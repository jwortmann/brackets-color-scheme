{
    "name": "Brackets Light",
    "author": "Janos Wortmann",
    "variables":
    {
        "textcolor": "#535353",
        "blue": "#446fbd",
        "green": "#6d8600",
        "green2": "#292",
        "grey": "#949494",
        "orange": "#e88501",
        "pink": "#d33682",
        "purple": "#6c71c4",
        "red": "#dc322f",
        "red2": "#d44",
        "violet": "#8757ad",
        "--yellowish": "#e88501",
        "--cyanish": "#446fbd"
    },
    "globals":
    {
        "background": "#f8f8f8",
        "foreground": "var(textcolor)",
        "caret": "#000",
        "block_caret": "color(#000 alpha(0.5))",
        "line_highlight": "color(#dee6e6 alpha(0.5))",
        "misspelling": "var(red)",
        "fold_marker": "color(var(grey) alpha(0.5))",
        "accent": "var(blue)",
        "gutter_foreground": "var(grey)",
        "gutter_foreground_highlight": "#000",
        "line_diff_width": "3",
        "line_diff_added": "var(green2)",
        "line_diff_modified": "var(orange)",
        "line_diff_deleted": "var(red2)",
        "selection": "#abdffa",
        "inactive_selection": "#d5dee3",
        "selection_corner_style": "round",
        "selection_corner_radius": "2",
        "find_highlight": "#f7c44e",
        "find_highlight_foreground": "#121212",
        "brackets_options": "underline",
        "bracket_contents_options": "",
        "tags_options": "stippled_underline"
    },
    "rules":
    [
        {
            "name": "Comment",
            "scope": "comment",
            "foreground": "var(grey)"
        },
        {
            "name": "Escaped or special character",
            "scope": "constant.character",
            "foreground": "var(orange)"
        },
        {
            "name": "Built-in constant",
            "scope": "constant.language",
            "foreground": "var(orange)"
        },
        {
            "name": "Number",
            "scope": "constant.numeric",
            "foreground": "var(green)"
        },
        {
            "name": "Misc constant",
            "scope": "constant.other",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Enum value",
            "scope": "constant.other.enum",
            "font_style": "italic"
        },
        {
            "name": "Inline diff deleted line",
            "scope": "diff.deleted",
            "background": "color(var(red2) alpha(0.15))",
            "foreground_adjust": "lightness(- 10%)"
        },
        {
            "name": "Inline diff deleted region",
            "scope": "diff.deleted.char",
            "background": "color(var(red2) alpha(0.40))",
            "foreground_adjust": "lightness(- 10%)"
        },
        {
            "name": "Inline diff inserted line",
            "scope": "diff.inserted",
            "background": "color(var(green2) alpha(0.15))",
            "foreground_adjust": "lightness(- 10%)"
        },
        {
            "name": "Inline diff inserted region",
            "scope": "diff.inserted.char",
            "background": "color(var(green2) alpha(0.40))",
            "foreground_adjust": "lightness(- 10%)"
        },
        {
            "name": "Module/class/type/method name",
            "scope": "entity.name",
            "foreground": "var(violet)"
        },
        {
            "name": "Constant",
            "scope": "entity.name.constant",
            "foreground": "var(textcolor)",
            "font_style": "italic"
        },
        {
            "name": "Section name",
            "scope": "entity.name.section",
            "foreground": "var(pink)"
        },
        {
            "name": "Tag name",
            "scope": "entity.name.tag",
            "foreground": "var(blue)"
        },
        {
            "name": "Tag attribute",
            "scope": "meta.tag entity.other.attribute-name",
            "foreground": "var(green)"
        },
        {
            "name": "CSS selector class/id/attribute",
            "scope": "entity.other.attribute-name - meta.tag",
            "foreground": "var(blue)"
        },
        {
            "name": "Base class or interface",
            "scope": "entity.other.inherited-class",
            "foreground": "var(violet)",
            "font_style": "italic"
        },
        {
            "name": "Invalid expression",
            "scope": "invalid.illegal",
            "foreground": "var(red)"
        },
        {
            "name": "Keyword",
            "scope": "keyword - keyword.operator, keyword.operator.word",
            "foreground": "var(blue)"
        },
        {
            "name": "Preprocessor directive",
            "scope": "keyword.control.directive, meta.preprocessor keyword",
            "foreground": "var(purple)"
        },
        {
            "name": "Lambda function arrow",
            "scope": "keyword.declaration.function.lambda",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Operator symbol",
            "scope": "keyword.operator",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Error",
            "scope": "markup.error",
            "foreground": "var(red)"
        },
        {
            "name": "Info",
            "scope": "markup.info",
            "foreground": "var(blue)"
        },
        {
            "name": "Warning",
            "scope": "markup.warning",
            "foreground": "var(orange)"
        },
        {
            "name": "Inserted",
            "scope": "markup.inserted",
            "foreground": "var(green2)"
        },
        {
            "name": "Deleted",
            "scope": "markup.deleted",
            "foreground": "var(red2)"
        },
        {
            "name": "Changed",
            "scope": "markup.changed",
            "foreground": "var(orange)"
        },
        {
            "name": "Heading",
            "scope": "markup.heading - comment markup.heading - markup.heading.subject.git",
            "foreground": "var(pink)"
        },
        {
            "name": "Quote",
            "scope": "markup.quote",
            "foreground": "var(blue)"
        },
        {
            "name": "Mapping key",
            "scope": "meta.mapping.key string",
            "foreground": "var(violet)"
        },
        {
            "name": "Accessor symbol",
            "scope": "punctuation.accessor",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Annotation symbol",
            "scope": "punctuation.definition.annotation",
            "foreground": "var(pink)"
        },
        {
            "name": "Tag punctuation",
            "scope": "punctuation.definition.tag",
            "foreground": "var(blue)"
        },
        {
            "name": "Separator symbol",
            "scope": "punctuation.separator - punctuation.separator.decimal",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Terminator symbol",
            "scope": "punctuation.terminator",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Modifier keyword",
            "scope": "storage.modifier",
            "foreground": "var(blue)"
        },
        {
            "name": "Type keyword",
            "scope": "storage.type - storage.type.numeric",
            "foreground": "var(blue)"
        },
        {
            "name": "Numeric type suffix",
            "scope": "storage.type.numeric",
            "foreground": "var(green)"
        },
        {
            "name": "String",
            "scope": "string",
            "foreground": "var(orange)"
        },
        {
            "name": "Library or built-in construct",
            "scope": "support",
            "foreground": "var(blue)"
        },
        {
            "name": "Annotation",
            "scope": "variable.annotation",
            "foreground": "var(pink)"
        },
        {
            "name": "Function call",
            "scope": "variable.function",
            "foreground": "var(violet)"
        },
        {
            "name": "Built-in variable",
            "scope": "variable.language",
            "foreground": "var(blue)"
        },
        {
            "name": "Misc variable",
            "scope": "variable.other",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Function argument",
            "scope": "variable.parameter - meta.function-call - meta.annotation",
            "foreground": "var(orange)"
        },
        // ActionScript specific rules
        {
            "name": "ActionScript keyword",
            "scope": "keyword.operator.actionscript.2",
            "foreground": "var(blue)"
        },
        // AHK specific rules >> https://packagecontrol.io/packages/AutoHotkey
        {
            "name": "AHK preprocessor directive",
            "scope": "preprocessordirective.ahk keyword.control.ahk, keyword.control.import.ahk",
            "foreground": "var(purple)"
        },
        // Apache specific rules >> https://packagecontrol.io/packages/ApacheConf
        {
            "name": "Apache tag",
            "scope": "entity.tag.apacheconf",
            "foreground": "var(blue)"
        },
        {
            "name": "Apache keyword",
            "scope": "entity.status.apacheconf, entity.helper.apacheconf",
            "foreground": "var(blue)"
        },
        // ASP specific rules
        {
            "name": "ASP logical operator keyword",
            "scope": "keyword.operator.logical.asp",
            "foreground": "var(blue)"
        },
        // C# specific rules
        {
            "name": "C# keyword",
            "scope": "keyword.operator.new.cs, keyword.operator.reflection.cs",
            "foreground": "var(blue)"
        },
        {
            "name": "C# arrow operator",
            "scope": "storage.type.function.cs, storage.type.function.lambda.cs",
            "foreground": "var(textcolor)"
        },
        {
            "name": "C# tag attribute in doc comment",
            "scope": "comment.block.documentation entity.other.attribute-name",
            "foreground": "var(green)"
        },
        // Clojure specific rules
        {
            "name": "Clojure ratio",
            "scope": "punctuation.separator.ratio.clojure",
            "foreground": "var(green)"
        },
        // CoffeeScript specific rules >> https://packagecontrol.io/packages/Better%20CoffeeScript
        {
            "name": "CoffeeScript string interpolation",
            "scope": "source.coffee.embedded",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CoffeeScript keyword",
            "scope": "keyword.operator.new.coffee",
            "foreground": "var(blue)"
        },
        {
            "name": "CoffeeScript lambda function arrow",
            "scope": "storage.type.function.coffee",
            "foreground": "var(textcolor)"
        },
        // CSS specific rules
        {
            "name": "CSS selector pseudo-class/element",
            "scope": "entity.other.pseudo-class, entity.other.pseudo-element",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS namespace prefix",
            "scope": "entity.other.namespace-prefix.css",
            "foreground": "var(blue)"
        },
        {
            "name": "CSS property name",
            "scope": "support.type.property-name.css, support.type.property-name.media.css",
            "foreground": "var(violet)"
        },
        {
            "name": "CSS hex color value",
            "scope": "constant.other.color.rgb-value.css, constant.other.color.rgba-value.css",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS special color keyword",
            "scope": "support.constant.color.w3c-special-color-keyword.css",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS font name keyword",
            "scope": "support.constant.font-name.css",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS media type",
            "scope": "support.constant.media.css",
            "foreground": "var(green)"
        },
        {
            "name": "CSS property value",
            "scope": "support.constant.property-value.css",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS unquoted font name",
            "scope": "meta.property-value.css string.unquoted.css - meta.function-call",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS unit suffix",
            "scope": "keyword.other.unit.css",
            "foreground": "var(green)"
        },
        {
            "name": "CSS variable",
            "scope": "support.type.custom-property.css",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS function call",
            "scope": "source.css support.function",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS at-rule",
            "scope": "keyword.control.at-rule, keyword.control.at-rule support.type.property-vendor.css",
            "foreground": "var(violet)"
        },
        {
            "name": "CSS logical operator keyword",
            "scope": "keyword.operator.logic.css, keyword.operator.logic.media.css",
            "foreground": "var(blue)"
        },
        {
            "name": "CSS vendor prefix",
            "scope": "support.type.vendor-prefix.css",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS wildcard asterisk",
            "scope": "entity.name.tag.wildcard.css",
            "foreground": "var(textcolor)"
        },
        // CSS specific rules >> https://packagecontrol.io/packages/CSS3
        {
            "name": "CSS selector pseudo-class/element",
            "scope": "entity.other.attribute-name.pseudo-class, entity.other.attribute-name.pseudo-element",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS unquoted font name",
            "scope": "meta.property-value.font-family.css string.unquoted.identifier.css",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS variable",
            "scope": "support.type.property-name.custom.css",
            "foreground": "var(textcolor)"
        },
        // D specific rules
        {
            "name": "D numeric base prefix",
            "scope": "punctuation.definition.numeric.binary.d, punctuation.definition.numeric.hexadecimal.d",
            "foreground": "var(green)"
        },
        {
            "name": "D numeric type suffix",
            "scope": "storage.type.integer.d, storage.type.float.d",
            "foreground": "var(green)"
        },
        // Dart specific rules >> https://packagecontrol.io/packages/Dart
        {
            "name": "Dart class/function definition",
            "scope": "class.name.dart, function.name.dart",
            "foreground": "var(violet)"
        },
        {
            "name": "Dart annotation",
            "scope": "entity.name.function.annotation.dart, annotation.dart support",
            "foreground": "var(pink)"
        },
        {
            "name": "Dart string interpolation",
            "scope": "string.interpolated & (interpolation.dart | keyword.other.dart | variable.parameter.dart)",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Dart ternary operator",
            "scope": "keyword.control.ternary.dart",
            "foreground": "var(textcolor)"
        },
        // Diff specific rules
        {
            "name": "Diff header from-file",
            "scope": "meta.diff.header.from-file",
            "foreground": "var(red2)"
        },
        {
            "name": "Diff header to-file",
            "scope": "meta.diff.header.to-file",
            "foreground": "var(green2)"
        },
        {
            "name": "Diff index",
            "scope": "meta.diff.index",
            "foreground": "var(blue)"
        },
        {
            "name": "Diff range information",
            "scope": "meta.diff.range",
            "foreground": "var(grey)"
        },
        {
            "name": "Diff separator line",
            "scope": "meta.separator.diff",
            "foreground": "var(violet)"
        },
        // Dockerfile specific rules >> https://packagecontrol.io/packages/Dockerfile%20Syntax%20Highlighting
        {
            "name": "Dockerfile CMD/ENTRYPOINT instruction",
            "scope": "keyword.operator.dockerfile",
            "foreground": "var(blue)"
        },
        // DotENV specific rules >> https://packagecontrol.io/packages/DotENV
        {
            "name": "DotENV key",
            "scope": "variable.other.env - string",
            "foreground": "var(violet)"
        },
        {
            "name": "DotENV template punctuation",
            "scope": "source.env string.interpolated keyword.other.template",
            "foreground": "var(textcolor)"
        },
        // EditorConfig specific rules >> https://github.com/jwortmann/ini-syntax
        {
            "name": "EditorConfig key",
            "scope": "source.ini.editorconfig meta.mapping.key variable.language",
            "foreground": "var(violet)",
            "font_style": "italic"
        },
        // Erlang specific rules
        {
            "name": "Erlang bitwise operator keyword",
            "scope": "keyword.operator.bitwise.erlang",
            "foreground": "var(blue)"
        },
        // F# specific rules >> https://packagecontrol.io/packages/F%23
        {
            "name": "F# operator symbol",
            "scope": "keyword.symbol.fsharp",
            "foreground": "var(textcolor)"
        },
        {
            "name": "F# annotation",
            "scope": "support.function.attribute.fsharp",
            "foreground": "var(pink)"
        },
        {
            "name": "F# placeholder in string",
            "scope": "keyword.format.specifier.fsharp",
            "foreground": "var(textcolor)"
        },
        // Fortran specific rules >> https://packagecontrol.io/packages/Fortran
        {
            "name": "Fortran format descriptor",
            "scope": "meta.format-string.fortran constant.numeric.format-descriptor.fortran",
            "foreground": "var(orange)"
        },
        {
            "name": "Fortran double-colon",
            "scope": "keyword.control.double-colon.fortran",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Fortran preprocessor directive",
            "scope": "keyword.control.preprocessor.fortran",
            "foreground": "var(purple)"
        },
        {
            "name": "Fortran logical operator keyword",
            "scope": "keyword.operator.logical.fortran",
            "foreground": "var(blue)"
        },
        {
            "name": "Fortran subroutine call",
            "scope": "source.modern-fortran support.function.any-method",
            "foreground": "var(violet)"
        },
        // Git specific rules
        {
            "name": "Git Commit keyword",
            "scope": "keyword.operator.git.commit",
            "foreground": "var(blue)"
        },
        {
            "name": "Git Config variable",
            "scope": "meta.mapping.key variable.other.readwrite.git.config",
            "foreground": "var(violet)"
        },
        {
            "name": "Git Rebase keyword",
            "scope": "text.git.rebase keyword.operator",
            "foreground": "var(blue)"
        },
        {
            "name": "Git email delimiter bracket",
            "scope": "punctuation.definition.reference.email.begin.git, punctuation.definition.reference.email.end.git",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Git email punctuation",
            "scope": "punctuation.separator.email.git",
            "foreground": "var(violet)"
        },
        {
            "name": "Git filename punctuation",
            "scope": "punctuation.separator.path.extension.fnmatch.git",
            "foreground": "var(violet)"
        },
        // Gnuplot specific rules >> https://packagecontrol.io/packages/Gnuplot
        {
            "name": "Gnuplot brackets",
            "scope": "punctuation.definition.range.begin.gnuplot, punctuation.definition.range.end.gnuplot",
            "foreground": "var(textcolor)"
        },
        // Go specific rules
        {
            "name": "Go floating point exponent designator",
            "scope": "punctuation.separator.exponent.go",
            "foreground": "var(green)"
        },
        // Graphviz specific rules
        {
            "name": "Graphviz cluster subgraph",
            "scope": "variable.annotation.cluster.dot",
            "foreground": "var(violet)"
        },
        // Groovy specific rules
        {
            "name": "Groovy keyword",
            "scope": "keyword.operator.instanceof.groovy, keyword.operator.as.groovy, keyword.operator.is.groovy",
            "foreground": "var(blue)"
        },
        {
            "name": "Groovy string interpolation",
            "scope": "string source.groovy.embedded.source - string source.groovy.embedded.source string",
            "foreground": "var(textcolor)"
        },
        // Handlebars specific rules >> https://packagecontrol.io/packages/Handlebars
        {
            "name": "Handlebars inline-script tag attribute",
            "scope": "source.handlebars.embedded entity.other.attribute-name",
            "foreground": "var(green)"
        },
        {
            "name": "Handlebars template",
            "scope": "variable.parameter.handlebars, entity.other.attribute-name.handlebars",
            "foreground": "var(textcolor)"
        },
        // Haskell specific rules
        {
            "name": "Haskell arrow",
            "scope": "keyword.other.arrow.haskell, keyword.other.big-arrow.haskell",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Haskell double-colon",
            "scope": "keyword.other.double-colon.haskell",
            "foreground": "var(textcolor)"
        },
        // INI specific rules >> https://packagecontrol.io/packages/INI
        {
            "name": "INI section name",
            "scope": "entity.section.ini",
            "foreground": "var(pink)"
        },
        {
            "name": "INI key",
            "scope": "keyword.name.ini",
            "foreground": "var(violet)"
        },
        {
            "name": "INI string punctuation",
            "scope": "punctuation.definition.quote.ini",
            "foreground": "var(orange)"
        },
        // Java specific rules
        {
            "name": "Java constant",
            "scope": "constant.other.java",
            "font_style": "italic"
        },
        {
            "name": "Java lambda function arrow",
            "scope": "storage.type.function.anonymous.java",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Java import classname",
            "scope": "support.class.import.java",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Java namespace",
            "scope": "support.type.package.java",
            "foreground": "var(textcolor)"
        },
        // JavaScript specific rules
        {
            "name": "JavaScript generator function asterisk",
            "scope": "keyword.generator.asterisk.js",
            "foreground": "var(textcolor)"
        },
        {
            "name": "JavaScript keyword",
            "scope": "keyword.operator.js",
            "foreground": "var(blue)"
        },
        {
            "name": "JavaScript mapping key",
            "scope": "meta.object-literal.key.js, meta.object-literal.key.js string, meta.object-literal.key.dollar.js, meta.object-literal.key.dollar.only.js",
            "foreground": "var(violet)"
        },
        {
            "name": "JavaScript lambda function arrow",
            "scope": "storage.type.function.arrow.js",
            "foreground": "var(textcolor)"
        },
        {
            "name": "JavaScript constant",
            "scope": "variable.other.constant.js",
            "font_style": "italic"
        },
        {
            "name": "JavaScript annotation",
            "scope": "meta.annotation variable.other.readwrite.js",
            "foreground": "var(pink)"
        },
        // JavaScript specific rules >> https://packagecontrol.io/packages/Babel
        {
            "name": "JavaScript keyword",
            "scope": "keyword.operator.new.js, keyword.operator.module.js",
            "foreground": "var(blue)"
        },
        {
            "name": "JavaScript mapping key",
            "scope": "constant.other.object.key.js string.unquoted.label.js",
            "foreground": "var(violet)"
        },
        {
            "name": "JavaScript template string punctuation",
            "scope": "string.interpolated.js keyword.other.template",
            "foreground": "var(orange)"
        },
        {
            "name": "JavaScript template string interpolation",
            "scope": "string.interpolated.js keyword.other.substitution",
            "foreground": "var(textcolor)"
        },
        {
            "name": "JSX tag attribute",
            "scope": "meta.jsx entity.other.attribute-name",
            "foreground": "var(green)"
        },
        // JSON specific rules >> https://packagecontrol.io/packages/Babel
        {
            "name": "JSON mapping key",
            "scope": "meta.structure.dictionary.json string, meta.structure.dictionary.json meta.structure.dictionary.json string, meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json string",
            "foreground": "var(violet)"
        },
        {
            "name": "JSON mapping value",
            "scope": "meta.structure.dictionary.value.json string, meta.structure.dictionary.value.json meta.structure.dictionary.value.json string, meta.structure.dictionary.value.json meta.structure.dictionary.value.json meta.structure.dictionary.value.json string",
            "foreground": "var(orange)"
        },
        // Julia specific rules >> https://packagecontrol.io/packages/Julia
        {
            "name": "Julia macro",
            "scope": "variable.macro.julia, punctuation.definition.macro.julia, support.function.macro.julia",
            "foreground": "var(purple)"
        },
        // Kotlin specific rules >> https://packagecontrol.io/packages/Kotlin
        {
            "name": "Kotlin built-in variable",
            "scope": "constant.language.kotlin",
            "foreground": "var(blue)"
        },
        {
            "name": "Kotlin variable definition",
            "scope": "entity.name.variable.kotlin",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Kotlin constant",
            "scope": "constant.other.kotlin",
            "font_style": "italic"
        },
        // Laravel Blade specific rules >> https://packagecontrol.io/packages/Laravel%20Blade%20Highlighter
        {
            "name": "Laravel Blade template directive",
            "scope": "text.html.blade punctuation.section.embedded & (entity.name.tag.block.any.html | constant.other.inline-data.html)",
            "foreground": "var(purple)"
        },
        {
            "name": "Laravel Blade template custom directive",
            "scope": "text.html.blade custom.compiler.blade.php & (support.function | support.function constant.other.inline-data.html)",
            "foreground": "var(blue)"
        },
        // LaTeX specific rules
        {
            "name": "LaTeX citation/reference/label",
            "scope": "constant.other.citation.latex, constant.other.reference.latex, entity.name.label.latex",
            "foreground": "var(violet)"
        },
        {
            "name": "LaTeX array column count parameter",
            "scope": "constant.numeric.array-count.latex",
            "foreground": "var(textcolor)"
        },
        {
            "name": "LaTeX number",
            "scope": "constant.numeric.math.tex",
            "foreground": "var(textcolor)"
        },
        {
            "name": "LaTeX newline spacing parameter",
            "scope": "constant.numeric.newline.latex",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX inline math punctuation",
            "scope": "string.other.math.latex",
            "foreground": "var(green)"
        },
        {
            "name": "LaTeX brackets",
            "scope": "constant.character.parenthesis.tex, constant.character.bracket.tex, punctuation.definition.group.brace.begin.latex, punctuation.definition.group.brace.end.latex",
            "foreground": "var(textcolor)"
        },
        {
            "name": "LaTeX escaped brace character",
            "scope": "constant.character.brace.escape.tex",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX whitespace character",
            "scope": "constant.character.space.tex, constant.character.escape.tex",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX array delimiter",
            "scope": "constant.character.ampersand.tex, constant.character.newline.latex",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX command or operator declaration",
            "scope": "entity.name.newcommand.latex, entity.name.declare-math-operator.latex, entity.name.definition.tex",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX option parameter",
            "scope": "variable.parameter.bracket.latex",
            "foreground": "var(textcolor)"
        },
        {
            "name": "BibTeX citation-key",
            "scope": "entity.name.type.entry-key.bibtex",
            "foreground": "var(pink)"
        },
        {
            "name": "BibTeX field name",
            "scope": "string.unquoted.key.bibtex",
            "foreground": "var(violet)"
        },
        {
            "name": "BibTeX brace character",
            "scope": "string.quoted.other.braces.bibtex punctuation.definition.string",
            "foreground": "var(textcolor)"
        },
        // LESS specific rules >> https://packagecontrol.io/packages/LESS
        {
            "name": "LESS logical operator keyword",
            "scope": "keyword.operator.logic.mixin.less",
            "foreground": "var(blue)"
        },
        // Lua specific rules
        {
            "name": "Lua logical operator keyword",
            "scope": "keyword.operator.logical.lua",
            "foreground": "var(blue)"
        },
        // Markdown specific rules
        {
            "name": "Markdown heading punctuation",
            "scope": "punctuation.definition.heading.begin.markdown, punctuation.definition.heading.end.markdown, punctuation.definition.heading.setext.markdown",
            "foreground": "var(pink)"
        },
        {
            "name": "Markdown preformatted text",
            "scope": "markup.raw.inline.markdown, markup.raw.block.markdown, markup.raw.code-fence.markdown-gfm",
            "foreground": "var(grey)"
        },
        {
            "name": "Markdown fenced code block punctuation",
            "scope": "punctuation.definition.raw.code-fence.begin.markdown, punctuation.definition.raw.code-fence.end.markdown",
            "foreground": "var(grey)"
        },
        {
            "name": "Markdown fenced code block language",
            "scope": "constant.other.language-name.markdown",
            "foreground": "var(grey)"
        },
        {
            "name": "Markdown horizontal rule",
            "scope": "punctuation.definition.thematic-break.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown inline/reference-style link label",
            "scope": "meta.link.inline.description.markdown, meta.link.reference.description.markdown, meta.link.reference.literal.description.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown footnote-id",
            "scope": "meta.link.reference.literal.footnote-id.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown inline/reference-style image label",
            "scope": "meta.image.inline.description.markdown, meta.image.reference.description.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown inline/reference-style link/footnote label punctuation",
            "scope": "meta.link punctuation.definition.link.begin.markdown, meta.link punctuation.definition.link.end.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown image label punctuation",
            "scope": "punctuation.definition.image.begin.markdown, punctuation.definition.image.end.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown inline link/image url",
            "scope": "meta.link.inline.markdown markup.underline.link.markdown, meta.image.inline.markdown markup.underline.link.image.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown inline link/image url punctuation",
            "scope": "punctuation.definition.metadata.begin.markdown, punctuation.definition.metadata.end.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown reference-style link/image id punctuation",
            "scope": "meta.link.reference.markdown punctuation.definition.constant.begin.markdown, meta.link.reference.markdown punctuation.definition.constant.end.markdown, meta.link.reference.literal.markdown punctuation.definition.constant.begin.markdown, meta.link.reference.literal.markdown punctuation.definition.constant.end.markdown, meta.image.reference.markdown punctuation.definition.constant.begin.markdown, meta.image.reference.markdown punctuation.definition.constant.end.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown link/image attribute",
            "scope": "entity.other.attribute-name.markdown",
            "foreground": "var(green)"
        },
        {
            "name": "Markdown reference definition link url",
            "scope": "meta.link.reference.def.markdown markup.underline.link.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown reference definition link url punctuation",
            "scope": "meta.link.reference.def.markdown punctuation.definition.link.begin.markdown, meta.link.reference.def.markdown punctuation.definition.link.end.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown reference definition link/footnote-id punctuation",
            "scope": "meta.link.reference.def punctuation.definition.constant.begin.markdown, meta.link.reference.def punctuation.definition.constant.end.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown automatic link/email",
            "scope": "meta.link.inet.markdown markup.underline.link.markdown, meta.link.email.lt-gt.markdown markup.underline.link.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown automatic link/email punctuation",
            "scope": "meta.link.inet.markdown punctuation.definition.link.begin.markdown, meta.link.inet.markdown punctuation.definition.link.end.markdown, meta.link.email.lt-gt.markdown punctuation.definition.link.begin.markdown, meta.link.email.lt-gt.markdown punctuation.definition.link.end.markdown",
            "foreground": "var(violet)"
        },
        // Markdown specific rules >> https://packagecontrol.io/packages/Markdown%20Extended
        {
            "name": "Markdown fenced code block language",
            "scope": "markup.raw.block.fenced.markdown variable.language.fenced.markdown",
            "foreground": "var(grey)"
        },
        {
            "name": "Markdown horizontal rule",
            "scope": "meta.separator.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown inline link/image label",
            "scope": "string.other.link.title.markdown, string.other.link.description.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown inline link/image label punctuation",
            "scope": "punctuation.definition.string.begin.markdown - string, punctuation.definition.string.end.markdown - string",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown inline link/image url punctuation",
            "scope": "punctuation.definition.metadata.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown reference-style image id punctuation",
            "scope": "meta.image.reference.markdown punctuation.definition.constant.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown reference definition label",
            "scope": "meta.link.reference.def.markdown constant.other.reference.link.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown reference definition label punctuation",
            "scope": "meta.link.reference.def.markdown punctuation.definition.constant.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown reference definition link url punctuation",
            "scope": "meta.link.reference.def.markdown punctuation.definition.link.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown automatic link/email punctuation",
            "scope": "meta.link.inet.markdown punctuation.definition.link.markdown, meta.link.email.lt-gt.markdown punctuation.definition.link.markdown",
            "foreground": "var(violet)"
        },
        // Matlab specific rules
        {
            "name": "Matlab built-in function",
            "scope": "keyword.operator.matlab",
            "foreground": "var(blue)"
        },
        {
            "name": "Matlab built-in variable",
            "scope": "variable.other.function.matlab",
            "foreground": "var(blue)"
        },
        // NGINX specific rules >> https://packagecontrol.io/packages/nginx
        {
            "name": "NGINX context",
            "scope": "storage.type.context.nginx - meta.context.upstream",
            "foreground": "var(violet)"
        },
        {
            "name": "NGINX unknown directive",
            "scope": "keyword.directive.module.unsupported.nginx",
            "foreground": "var(textcolor)"
        },
        {
            "name": "NGINX IP address",
            "scope": "string.ipaddress.nginx",
            "foreground": "var(green)"
        },
        // OCaml specific rules
        {
            "name": "OCaml preprocessor directive",
            "scope": "keyword.other.directive.ocaml, keyword.other.directive.line-number.ocaml",
            "foreground": "var(purple)"
        },
        // Perl specific rules
        {
            "name": "Perl arrow",
            "scope": "keyword.accessor.arrow.perl",
            "foreground": "var(textcolor)"
        },
        // PHP specific rules
        {
            "name": "PHP keyword",
            "scope": "keyword.operator.type.php",
            "foreground": "var(blue)"
        },
        {
            "name": "PHP punctuation",
            "scope": "punctuation.definition.expression.php, punctuation.section.block.begin.php, punctuation.section.block.end.php, punctuation.section.brackets.begin.php, punctuation.section.brackets.end.php, punctuation.section.embedded.begin.php, punctuation.section.embedded.end.php, punctuation.section.group.begin.php, punctuation.section.group.end.php",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PHP library constant",
            "scope": "support.constant.core.php, support.constant.std.php, support.constant.ext.php, support.constant.parser-token.php",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "PHP ampersand reference punctuation",
            "scope": "storage.modifier.reference.php",
            "foreground": "var(textcolor)"
        },
        // PowerShell specific rules >> https://packagecontrol.io/packages/PowerShell
        {
            "name": "PowerShell operator keyword",
            "scope": "keyword.operator.comparison.powershell, keyword.operator.unary.powershell, keyword.operator.logical.powershell, keyword.operator.bitwise.powershell, keyword.operator.string-format.powershell",
            "foreground": "var(blue)"
        },
        {
            "name": "PowerShell variable punctuation",
            "scope": "keyword.other.variable.definition.powershell",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PowerShell at-symbol",
            "scope": "keyword.other.array.begin.powershell, keyword.other.hashtable.begin.powershell",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PowerShell semicolon",
            "scope": "keyword.other.statement-separator.powershell",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Powershell documentation keyword",
            "scope": "keyword.operator.documentation.powershell, constant.string.documentation.powershell",
            "foreground": "var(pink)"
        },
        {
            "name": "PowerShell string interpolation bracket",
            "scope": "string.quoted.double.powershell punctuation.section",
            "foreground": "var(textcolor)"
        },
        // Python specific rules
        {
            "name": "Python import statement punctuation/asterisk",
            "scope": "keyword.control.import.relative.python, constant.language.import-all.python",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Python logical operator keyword",
            "scope": "keyword.operator.logical.python",
            "foreground": "var(blue)"
        },
        {
            "name": "Python dict key",
            "scope": "meta.mapping.key.python meta.generic-name.python",
            "foreground": "var(violet)"
        },
        {
            "name": "Python decorator",
            "scope": "variable.annotation support.function.builtin.python, meta.annotation meta.generic-name.python - meta.annotation.arguments",
            "foreground": "var(pink)"
        },
        {
            "name": "Python constant",
            "scope": "variable.other.constant.python",
            "font_style": "italic"
        },
        // Python specific rules >> https://packagecontrol.io/packages/Python%203
        {
            "name": "Python logical operator keyword",
            "scope": "keyword.operator.bool.logical.python.3",
            "foreground": "var(blue)"
        },
        {
            "name": "Python decorator",
            "scope": "meta.function.decorator support.function.decorator.python.3",
            "foreground": "var(pink)"
        },
        // Python specific rules >> https://packagecontrol.io/packages/MagicPython
        {
            "name": "Python decorator",
            "scope": "meta.function.decorator entity.name.function.decorator.python, meta.function.decorator support.type.python",
            "foreground": "var(pink)"
        },
        {
            "name": "Python constant",
            "scope": "constant.other.caps.python",
            "font_style": "italic"
        },
        // Python specific rules >> https://packagecontrol.io/packages/Python%20Improved
        {
            "name": "Python constant",
            "scope": "constant.other.allcaps.python",
            "font_style": "italic"
        },
        // R specific rules
        {
            "name": "R operator symbol",
            "scope": "keyword.other.r - comment.line.roxygen.r",
            "foreground": "var(textcolor)"
        },
        // Regular Expression specific rules
        {
            "name": "Regex embedded in other language",
            "scope": "source.regexp, string.regexp.js - punctuation.definition.string, string.regexp.clojure - punctuation.definition.string",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Regex character set",
            "scope": "constant.other.range.regexp, constant.other.character-class.set.regexp, meta.set.regexp",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Regex group/set punctuation",
            "scope": "keyword.control.group.regexp, keyword.control.set.regexp, punctuation.definition.group.begin.regexp, punctuation.definition.group.end.regexp, punctuation.definition.character-class.begin.regexp, punctuation.definition.character-class.end.regexp",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Regex quantifier/operator",
            "scope": "keyword.operator.quantifier.regexp, keyword.operator.negation.regexp, keyword.operator.alternation.regexp, keyword.operator.or.regexp, keyword.operator.intersection.regexp",
            "foreground": "var(blue)"
        },
        {
            "name": "Regex assertion/mode modifier",
            "scope": "constant.other.assertion.regexp, punctuation.definition.group.assertion.regexp, storage.modifier.mode.regexp, punctuation.definition.group.no-capture.regexp",
            "foreground": "var(blue)"
        },
        {
            "name": "Regex reference/conditional",
            "scope": "keyword.other.named-capture-group.regexp, entity.name.capture-group.regexp, keyword.other.backref-and-recursion.regexp, keyword.other.backref-and-recursion.conditional.regexp, keyword.other.conditional.regexp, keyword.other.conditional.definition.regexp",
            "foreground": "var(blue)"
        },
        {
            "name": "Regex anchor",
            "scope": "keyword.control.anchor.regexp, keyword.control.anchors.regexp",
            "foreground": "var(blue)"
        },
        {
            "name": "Regex character class",
            "scope": "keyword.control.character-class.regexp, support.class.character-class.regexp, constant.character.character-class.regexp, constant.other.character-class.escape.backslash.regexp, constant.other.character-class.escape.unicode-property.regexp, keyword.other.any.regexp",
            "foreground": "var(violet)"
        },
        // reStructuredText specific rules
        {
            "name": "RST link label",
            "scope": "string.other.link.title.restructuredtext",
            "foreground": "var(violet)"
        },
        {
            "name": "RST link label punctuation",
            "scope": "punctuation.definition.link.restructuredtext - meta.link.reference.def - meta.link.footnote.def - meta.link.citation.def, punctuation.definition.string.restructuredtext",
            "foreground": "var(violet)"
        },
        {
            "name": "RST link target",
            "scope": "markup.underline.link.restructuredtext",
            "foreground": "var(orange)"
        },
        {
            "name": "RST footnote label",
            "scope": "text.restructuredtext meta.link.footnote constant.other.footnote.link",
            "foreground": "var(blue)"
        },
        {
            "name": "RST footnote label punctuation",
            "scope": "meta.link.footnote punctuation.definition.constant.restructuredtext",
            "foreground": "var(blue)"
        },
        {
            "name": "RST citation label",
            "scope": "text.restructuredtext meta.link.citation constant.other.citation.link",
            "foreground": "var(blue)"
        },
        {
            "name": "RST citation label punctuation",
            "scope": "meta.link.citation punctuation.definition.constant.restructuredtext",
            "foreground": "var(blue)"
        },
        {
            "name": "RST directive",
            "scope": "meta.other.directive.restructuredtext - punctuation",
            "foreground": "var(blue)"
        },
        {
            "name": "RST field name punctuation",
            "scope": "punctuation.definition.field.restructuredtext",
            "foreground": "var(textcolor)"
        },
        {
            "name": "RST interpreted text",
            "scope": "markup.other.command.restructuredtext",
            "foreground": "var(orange)"
        },
        {
            "name": "RST inline literal",
            "scope": "markup.raw.restructuredtext - meta.raw.block",
            "foreground": "var(grey)"
        },
        {
            "name": "RST block literal",
            "scope": "meta.raw.block markup.raw.restructuredtext",
            "foreground": "var(grey)"
        },
        // Rust specific rules
        {
            "name": "Rust constant",
            "scope": "constant.other.rust, variable.other.constant.rust",
            "font_style": "italic"
        },
        {
            "name": "Rust annotation",
            "scope": "meta.annotation.rust punctuation.section.group, meta.annotation.rust variable.function, meta.annotation.parameters.rust",
            "foreground": "var(pink)"
        },
        {
            "name": "Rust macro",
            "scope": "support.macro.rust",
            "foreground": "var(blue)"
        },
        // Sass specific rules >> https://packagecontrol.io/packages/Sass
        {
            "name": "Sass function call",
            "scope": "source.sass support.function",
            "foreground": "var(orange)"
        },
        // Scala specific rules
        {
            "name": "Scala string interpolation expression",
            "scope": "string punctuation.definition.expression.scala",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Scala lambda function arrow",
            "scope": "storage.type.function.arrow.lambda.scala, storage.type.function.arrow.case.scala",
            "foreground": "var(textcolor)"
        },
        // SCSS specific rules >> https://packagecontrol.io/packages/SCSS
        {
            "name": "SCSS property name",
            "scope": "support.type.property-name.scss",
            "foreground": "var(violet)"
        },
        {
            "name": "SCSS property value",
            "scope": "support.constant.property-value.scss, support.constant.font-name.scss",
            "foreground": "var(orange)"
        },
        {
            "name": "SCSS hex color value",
            "scope": "constant.other.color.rgb-value.scss",
            "foreground": "var(orange)"
        },
        {
            "name": "SCSS function call",
            "scope": "source.scss support.function",
            "foreground": "var(orange)"
        },
        {
            "name": "SCSS function argument",
            "scope": "variable.parameter.url.scss",
            "foreground": "var(textcolor)"
        },
        {
            "name": "SCSS unit suffix",
            "scope": "keyword.other.unit.scss",
            "foreground": "var(green)"
        },
        {
            "name": "SCSS misc symbol",
            "scope": "support.constant.mathematical-symbols.scss, entity.name.tag.wildcard.scss, entity.name.tag.reference.scss",
            "foreground": "var(textcolor)"
        },
        {
            "name": "SCSS string interpolation",
            "scope": "variable.interpolation.scss",
            "foreground": "var(textcolor)"
        },
        // ShellScript specific rules
        {
            "name": "ShellScript variable punctuation",
            "scope": "punctuation.definition.variable.shell",
            "foreground": "var(textcolor)"
        },
        {
            "name": "ShellScript bracket",
            "scope": "support.function.test.begin.shell, support.function.test.end.shell, support.function.double-brace.begin.shell, support.function.double-brace.end.shell",
            "foreground": "var(textcolor)"
        },
        {
            "name": "ShellScript option",
            "scope": "variable.parameter.option.shell",
            "foreground": "var(green)"
        },
        // SQL specific rules
        {
            "name": "SQL embedded in other language",
            "scope": "string source.sql - string source.sql string, string text.sql - string text.sql string",
            "foreground": "var(textcolor)"
        },
        {
            "name": "SQL operator keyword",
            "scope": "keyword.operator.logical.sql, keyword.operator.assignment.alias.sql",
            "foreground": "var(blue)"
        },
        {
            "name": "SQL wildcard asterisk",
            "scope": "variable.language.star.sql",
            "foreground": "var(textcolor)"
        },
        // Stylus specific rules >> https://packagecontrol.io/packages/Stylus
        {
            "name": "Stylus property name",
            "scope": "support.type.property-name.stylus, support.type.property-name.media.stylus",
            "foreground": "var(violet)"
        },
        {
            "name": "Stylus media type",
            "scope": "support.constant.media.stylus",
            "foreground": "var(green)"
        },
        {
            "name": "Stylus unit suffix",
            "scope": "constant.numeric.stylus keyword.other.unit.stylus",
            "foreground": "var(green)"
        },
        {
            "name": "Stylus logical operator keyword",
            "scope": "keyword.operator.logic.media.stylus",
            "foreground": "var(blue)"
        },
        {
            "name": "Stylus vendor prefix",
            "scope": "support.type.vendor-prefix.stylus",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Stylus property value constant",
            "scope": "constant.property-value.stylus",
            "foreground": "var(orange)"
        },
        {
            "name": "Stylus built-in color name",
            "scope": "constant.color.w3c-standard-color-name.stylus",
            "foreground": "var(blue)"
        },
        {
            "name": "Stylus animation keyframe selector",
            "scope": "entity.other.animation-keyframe.stylus",
            "foreground": "var(blue)"
        },
        {
            "name": "Stylus function call",
            "scope": "entity.function-name.stylus",
            "foreground": "var(blue)"
        },
        // Swift specific rules >> https://packagecontrol.io/packages/Swift
        {
            "name": "Swift function declaration",
            "scope": "entity.type.function.swift",
            "foreground": "var(violet)"
        },
        {
            "name": "Swift built-in constant",
            "scope": "keyword.constant.boolean.swift, constant.nil.swift",
            "foreground": "var(orange)"
        },
        {
            "name": "Swift keyword",
            "scope": "keyword.operator.type-casting.swift",
            "foreground": "var(blue)"
        },
        {
            "name": "Swift annotation",
            "scope": "storage.modifier.attribute.swift",
            "foreground": "var(pink)"
        },
        {
            "name": "Swift string interpolation punctuation",
            "scope": "meta.literal.string.swift support.punctuation.expression",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Swift imported module",
            "scope": "support.type.module.import.swift",
            "foreground": "var(violet)"
        },
        // Swift specific rules >> https://packagecontrol.io/packages/Decent%20Swift%20Syntax
        {
            "name": "Swift class declaration",
            "scope": "source.swift entity.name.type support.class",
            "foreground": "var(violet)"
        },
        {
            "name": "Swift annotation",
            "scope": "source.swift storage.type.decorator",
            "foreground": "var(pink)"
        },
        // Textile specific rules
        {
            "name": "Textile link title",
            "scope": "string.other.link.title.textile, string.other.link.description.title.textile, markup.underline.link.image.textile",
            "foreground": "var(violet)"
        },
        {
            "name": "Textile link target",
            "scope": "markup.underline.link.textile, constant.other.reference.link.textile",
            "foreground": "var(orange)"
        },
        {
            "name": "Textile attribute",
            "scope": "entity.name.type.textile",
            "foreground": "var(blue)"
        },
        // TOML specific rules >> https://packagecontrol.io/packages/TOML
        {
            "name": "TOML section name",
            "scope": "entity.name.table.toml",
            "foreground": "var(pink)"
        },
        {
            "name": "TOML key",
            "scope": "entity.name.tag.toml",
            "foreground": "var(violet)"
        },
        // Twig specific rules >> https://packagecontrol.io/packages/BetterTwig
        {
            "name": "Twig operator keyword",
            "scope": "keyword.operator.logical.twig - keyword.operator.logical.pipe, keyword.operator.bitwise.twig",
            "foreground": "var(blue)"
        },
        {
            "name": "Twig string interpolation punctuation",
            "scope": "meta.interpolation.twig punctuation.section.interpolation",
            "foreground": "var(textcolor)"
        },
        // TypeScript specific rules >> https://packagecontrol.io/packages/TypeScript
        {
            "name": "TypeScript keyword",
            "scope": "keyword.operator.new.ts, keyword.operator.new.tsx, source.ts keyword.operator.expression, source.tsx keyword.operator.expression",
            "foreground": "var(blue)"
        },
        {
            "name": "TypeScript type",
            "scope": "entity.name.type.ts, entity.name.type.tsx, entity.name.type.module.ts, entity.name.type.module.tsx",
            "foreground": "var(blue)"
        },
        {
            "name": "TypeScript decorator",
            "scope": "(meta.decorator.ts | meta.decorator.tsx) & (variable.other | entity.name), punctuation.decorator.ts, punctuation.decorator.tsx",
            "foreground": "var(pink)"
        },
        {
            "name": "TypeScript lambda function arrow",
            "scope": "storage.type.function.arrow.ts, storage.type.function.arrow.tsx",
            "foreground": "var(textcolor)"
        },
        {
            "name": "TypeScript placeholder asterisk",
            "scope": "constant.language.import-export-all.ts, constant.language.import-export-all.tsx",
            "foreground": "var(textcolor)"
        },
        // VBScript specific rules >> https://packagecontrol.io/packages/VBScript
        {
            "name": "VBScript operator symbol",
            "scope": "source.vbs keyword.operator.js",
            "foreground": "var(textcolor)"
        },
        {
            "name": "VBScript operator keyword",
            "scope": "source.vbs keyword.operator.asp",
            "foreground": "var(blue)"
        },
        // Vue specific rules >> https://packagecontrol.io/packages/Vue%20Syntax%20Highlight
        {
            "name": "Vue tag attribute name punctuation",
            "scope": "text.html.vue meta.tag punctuation.definition.attribute",
            "foreground": "var(green)"
        },
        {
            "name": "Vue tag attribute value punctuation",
            "scope": "text.html.vue meta.tag punctuation.definition.string",
            "foreground": "var(orange)"
        },
        // GitGutter specific rules >> https://packagecontrol.io/packages/GitGutter
        {
            "name": "GitGutter deleted",
            "scope": "markup.deleted.git_gutter",
            "foreground": "#F92672"
        },
        {
            "name": "GitGutter inserted",
            "scope": "markup.inserted.git_gutter",
            "foreground": "#A6E22E"
        },
        {
            "name": "GitGutter changed",
            "scope": "markup.changed.git_gutter",
            "foreground": "#967EFB"
        },
        {
            "name": "GitGutter ignored",
            "scope": "markup.ignored.git_gutter",
            "foreground": "#565656"
        },
        {
            "name": "GitGutter untracked",
            "scope": "markup.untracked.git_gutter",
            "foreground": "#565656"
        },
        // LSP specific rules >> https://packagecontrol.io/packages/LSP
        {
            "name": "LSP diagnostics filename",
            "scope": "output.lsp.diagnostics meta.diagnostic.preamble.lsp string.unquoted.lsp",
            "foreground": "var(blue)"
        },
        {
            "name": "LSP diagnostics linter name",
            "scope": "output.lsp.diagnostics comment.line.lsp",
            "foreground": "var(purple)"
        },
        {
            "name": "LSP log arrow",
            "scope": "output.lsp.log storage.modifier.lsp",
            "foreground": "var(textcolor)"
        },
        {
            "name": "LSP log server name",
            "scope": "output.lsp.log variable.function.lsp",
            "foreground": "var(purple)"
        },
        {
            "name": "LSP log unhandled",
            "scope": "output.lsp.log invalid.deprecated.lsp",
            "foreground": "var(red)"
        },
        {
            "name": "LSP references filename",
            "scope": "output.lsp.references entity.name.file.references.lsp",
            "foreground": "var(blue)"
        },
        // OverrideAudit specific rules >> https://packagecontrol.io/packages/OverrideAudit
        {
            "name": "OverrideAudit warning/expired",
            "scope": "text.override-audit.overridereport keyword.control.expired",
            "foreground": "var(orange)"
        },
        // PackageDev specific rules >> https://packagecontrol.io/packages/PackageDev
        {
            "name": "PackageDev JSON built-in key",
            "scope": "source.json.sublime meta.mapping.key & (keyword | support | constant.other | entity.name | storage.modifier)",
            "foreground": "var(violet)",
            "font_style": "italic"
        },
        {
            "name": "PackageDev JSON key",
            "scope": "source.json.sublime & (meta.variable-name punctuation.definition.string | meta.mapping.key entity.name.other.key.sublime-settings | meta.mapping.key keyword.other.namespace.sublime-settings)",
            "foreground": "var(violet)",
            "font_style": ""
        },
        {
            "name": "PackageDev JSON built-in value",
            "scope": "source.json.sublime meta.mapping.value & (support.constant | support.function.modifier.key | storage.type.context.key-value | keyword.operator.context.key-value)",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "PackageDev JSON value",
            "scope": "source.json.sublime meta.mapping.value & (support.constant.command-name | entity.name.variant.sublime-build | entity.name.id.sublime-menu | entity.name.class-selector.sublime-theme | support.constant.mnemonic.sublime-menu | variable.other.setting.sublime-keymap)",
            "foreground": "var(orange)",
            "font_style": ""
        },
        {
            "name": "PackageDev JSON punctuation",
            "scope": "source.json.sublime & (source.scope-selector punctuation.section.group | meta.function-call punctuation.definition.group)",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PackageDev XML/PList keyword",
            "scope": "text.xml.plist.textmate.preferences & (meta.inside-dict-key.plist keyword | meta.inside-value.string.plist support)",
            "foreground": "var(violet)"
        },
        {
            "name": "PackageDev YAML keyword",
            "scope": "source.yaml.sublime keyword.operator.include.sublime-syntax",
            "foreground": "var(blue)"
        },
        {
            "name": "PackageDev YAML punctuation",
            "scope": "source.yaml.sublime source.regexp punctuation.definition.variable",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PackageDev string interpolation placeholder variable",
            "scope": "(source.json.sublime | text.xml.sublime) & (constant.other.placeholder | keyword.other.placeholder.dollar | keyword.other.block)",
            "foreground": "var(textcolor)",
            "font_style": ""
        },
        {
            "name": "PackageDev scope selector punctuation",
            "scope": "(source.json.sublime | text.xml.sublime | text.xml.plist.textmate.preferences) & punctuation.separator.scope-segments.scope-selector",
            "foreground": "var(orange)"
        },
        // SublimeGDB specific rules >> https://packagecontrol.io/packages/SublimeGDB
        {
            "name": "SublimeGDB breakpoint",
            "scope": "keyword.gdb - keyword.gdb.returncode",
            "foreground": "var(red2)"
        },
        // SublimeLinter specific rules >> https://packagecontrol.io/packages/SublimeLinter
        {
            "name": "SublimeLinter diagnostics filename",
            "scope": "entity.name.filename.sublime_linter",
            "foreground": "var(blue)"
        },
        {
            "name": "SublimeLinter diagnostics message",
            "scope": "markup.quote.linter-message.sublime_linter",
            "foreground": "var(textcolor)"
        }
    ]
}
