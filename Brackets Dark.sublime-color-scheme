{
    "name": "Brackets Dark",
    "author": "Janos Wortmann",
    "variables":
    {
        "textcolor": "#DDDDDD",
        "blue":      "#6C9EF8",
        "green":     "#85A300",
        "green2":    "#229922",
        "grey":      "#767676",
        "orange":    "#D89333",
        "pink":      "#D85896",
        "red":       "#DC322F",
        "red2":      "#DD4444",
        "violet":    "#B77FDB",
        "--yellowish": "#D89333"
    },
    "globals":
    {
        "background": "#1D1F21",
        "foreground": "var(textcolor)",
        "caret": "#C5C8C6",
        "block_caret": "#C5C8C6",
        "line_highlight": "#2F2F2F",
        "misspelling": "var(red)",
        "fold_marker": "#444444",
        "accent": "var(blue)",
        "gutter_foreground": "var(grey)",
        "line_diff_width": "3",
        "line_diff_added": "var(green2)",
        "line_diff_modified": "var(orange)",
        "line_diff_deleted": "var(red2)",
        "selection": "#0050A0",
        "inactive_selection": "#333F48",
        "selection_corner_style": "round",
        "selection_corner_radius": "2",
        "find_highlight": "#F6A644",
        "find_highlight_foreground": "#121212",
        "brackets_options": "underline",
        "bracket_contents_options": "",
        "tags_options": "stippled_underline"
    },
    "rules":
    [
        {
            "name": "Comments",
            "scope": "comment",
            "foreground": "var(grey)"
        },
        {
            "name": "Language-specific characters",
            "scope": "constant.character",
            "foreground": "var(orange)"
        },
        {
            "name": "Language-specific constants",
            "scope": "constant.language",
            "foreground": "var(orange)"
        },
        {
            "name": "Numbers",
            "scope": "constant.numeric",
            "foreground": "var(green)"
        },
        {
            "name": "Misc constants",
            "scope": "constant.other",
            "foreground": "var(orange)"
        },
        {
            "name": "Enum values",
            "scope": "constant.other.enum",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "Placeholder symbols in strings",
            "scope": "constant.other.placeholder",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "Diff deleted line",
            "scope": "diff.deleted",
            "background": "color(var(red2) alpha(0.15))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Diff deleted region",
            "scope": "diff.deleted.char",
            "background": "color(var(red2) alpha(0.40))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Diff inserted line",
            "scope": "diff.inserted",
            "background": "color(var(green2) alpha(0.15))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Diff inserted region",
            "scope": "diff.inserted.char",
            "background": "color(var(green2) alpha(0.40))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Data structures, types and other constructs",
            "scope": "entity.name",
            "foreground": "var(violet)"
        },
        {
            "name": "Constants",
            "scope": "entity.name.constant",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "Section names",
            "scope": "entity.name.section",
            "foreground": "var(pink)"
        },
        {
            "name": "Tag names",
            "scope": "entity.name.tag",
            "foreground": "var(blue)"
        },
        {
            "name": "Inherited class",
            "scope": "entity.other.inherited-class",
            "foreground": "var(violet)",
            "font_style": "italic"
        },
        {
            "name": "Illegal statements",
            "scope": "invalid.illegal",
            "foreground": "var(red)"
        },
        {
            "name": "Keywords",
            "scope": "keyword",
            "foreground": "var(blue)"
        },
        {
            "name": "Symbolic operators",
            "scope": "keyword.operator",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Textual operators",
            "scope": "keyword.operator.word",
            "foreground": "var(blue)"
        },
        {
            "name": "Error",
            "scope": "markup.error",
            "foreground": "var(red)"
        },
        {
            "name": "Info",
            "scope": "markup.info",
            "foreground": "var(blue)"
        },
        {
            "name": "Warning",
            "scope": "markup.warning",
            "foreground": "var(orange)"
        },
        {
            "name": "Mapping keys",
            "scope": "meta.mapping.key string",
            "foreground": "var(violet)"
        },
        {
            "name": "Accessor symbols",
            "scope": "punctuation.accessor",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Annotation symbols",
            "scope": "punctuation.definition.annotation",
            "foreground": "var(pink)"
        },
        {
            "name": "Tag punctuations",
            "scope": "punctuation.definition.tag",
            "foreground": "var(blue)"
        },
        {
            "name": "Separator symbols",
            "scope": "punctuation.separator",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Decimal separator",
            "scope": "punctuation.separator.decimal",
            "foreground": "var(green)"
        },
        {
            "name": "Terminator symbols",
            "scope": "punctuation.terminator",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Storage modifiers",
            "scope": "storage.modifier",
            "foreground": "var(blue)"
        },
        {
            "name": "Types and definition/declaration keywords",
            "scope": "storage.type",
            "foreground": "var(blue)"
        },
        {
            "name": "Numeric type suffixes",
            "scope": "storage.type.numeric",
            "foreground": "var(green)"
        },
        {
            "name": "Strings",
            "scope": "string",
            "foreground": "var(orange)"
        },
        {
            "name": "Library and user constructs",
            "scope": "support",
            "foreground": "var(blue)"
        },
        {
            "name": "Annotations",
            "scope": "variable.annotation",
            "foreground": "var(pink)"
        },
        {
            "name": "Function or method calls",
            "scope": "variable.function",
            "foreground": "var(violet)"
        },
        {
            "name": "Language-specific variables",
            "scope": "variable.language",
            "foreground": "var(blue)"
        },
        {
            "name": "Generic variables",
            "scope": "variable.other",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Function or method arguments",
            "scope": "variable.parameter",
            "foreground": "var(orange)"
        },
        // C# specific rules
        {
            "name": "C# keyword: new",
            "scope": "keyword.operator.new.cs",
            "foreground": "var(blue)"
        },
        {
            "name": "C# lambda functions",
            "scope": "storage.type.function.lambda.cs",
            "foreground": "var(textcolor)"
        },
        // Clojure specific rules
        {
            "name": "Clojure ratio slash",
            "scope": "punctuation.separator.ratio.clojure",
            "foreground": "var(green)"
        },
        // CSS specific rules
        {
            "name": "CSS selectors",
            "scope": "source entity.other.attribute-name",
            "foreground": "var(blue)"
        },
        {
            "name": "CSS namespace prefix",
            "scope": "entity.other.namespace-prefix.css",
            "foreground": "var(blue)"
        },
        {
            "name": "CSS property names",
            "scope": "support.type.property-name.css, support.type.property-name.media.css",
            "foreground": "var(violet)"
        },
        {
            "name": "CSS special color keywords",
            "scope": "support.constant.color.w3c-special-color-keyword.css",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS font names",
            "scope": "support.constant.font-name.css",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS media type",
            "scope": "support.constant.media.css",
            "foreground": "var(green)"
        },
        {
            "name": "CSS property values",
            "scope": "support.constant.property-value.css",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS property value unquoted strings",
            "scope": "meta.property-value.css string.unquoted.css - meta.function-call",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS units",
            "scope": "constant.numeric.css keyword.other.unit.css",
            "foreground": "var(green)"
        },
        {
            "name": "CSS variable name declarations",
            "scope": "support.type.custom-property.css",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS function calls",
            "scope": "source.css support.function",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS at-rule",
            "scope": "keyword.control.at-rule, keyword.control.at-rule support.type.property-vendor.css",
            "foreground": "var(violet)"
        },
        {
            "name": "CSS logical operators",
            "scope": "keyword.operator.logic.css, keyword.operator.logic.media.css",
            "foreground": "var(blue)"
        },
        {
            "name": "CSS vendor prefix",
            "scope": "support.type.vendor-prefix.css",
            "foreground": "var(textcolor)"
        },
        // D specific rules
        {
            "name": "D numeric base prefix",
            "scope": "punctuation.definition.numeric.binary.d, punctuation.definition.numeric.hexadecimal.d",
            "foreground": "var(green)"
        },
        {
            "name": "D numeric type suffix",
            "scope": "storage.type.integer.d, storage.type.float.d",
            "foreground": "var(green)"
        },
        // Diff specific rules
        {
            "name": "Diff changed lines",
            "scope": "markup.changed.diff",
            "foreground": "var(orange)"
        },
        {
            "name": "Diff deleted lines",
            "scope": "markup.deleted.diff",
            "foreground": "var(red2)"
        },
        {
            "name": "Diff inserted lines",
            "scope": "markup.inserted.diff",
            "foreground": "var(green2)"
        },
        {
            "name": "Diff header from-file",
            "scope": "meta.diff.header.from-file",
            "foreground": "var(red2)"
        },
        {
            "name": "Diff header to-file",
            "scope": "meta.diff.header.to-file",
            "foreground": "var(green2)"
        },
        {
            "name": "Diff index",
            "scope": "meta.diff.index",
            "foreground": "var(blue)"
        },
        {
            "name": "Diff range information",
            "scope": "meta.diff.range",
            "foreground": "var(grey)"
        },
        {
            "name": "Diff separator lines",
            "scope": "meta.separator.diff",
            "foreground": "var(violet)"
        },
        // Dockerfile specific rules (https://packagecontrol.io/packages/Dockerfile%20Syntax%20Highlighting)
        {
            "name": "Dockerfile CMD & ENTRYPOINT instructions",
            "scope": "keyword.operator.dockerfile",
            "foreground": "var(blue)"
        },
        // Fortran specific rules (https://packagecontrol.io/packages/Fortran)
        {
            "name": "Fortran format descriptors",
            "scope": "meta.format-string.fortran constant.numeric.format-descriptor.fortran",
            "foreground": "var(orange)"
        },
        {
            "name": "Fortran type declaration double-colon",
            "scope": "keyword.control.double-colon.fortran",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Fortran logical operators",
            "scope": "keyword.operator.logical.fortran",
            "foreground": "var(blue)"
        },
        {
            "name": "Fortran subroutine-call",
            "scope": "source.modern-fortran support.function.any-method",
            "foreground": "var(violet)"
        },
        // Git specific rules
        {
            "name": "Git email punctuation",
            "scope": "punctuation.separator.email.git",
            "foreground": "var(violet)"
        },
        {
            "name": "Git filename punctuation",
            "scope": "punctuation.separator.path.extension.fnmatch.git",
            "foreground": "var(violet)"
        },
        // Gnuplot specific rules (https://packagecontrol.io/packages/Gnuplot)
        {
            "name": "Gnuplot punctuations",
            "scope": "punctuation.definition.range.begin.gnuplot, punctuation.definition.range.end.gnuplot",
            "foreground": "var(textcolor)"
        },
        // Go specific rules
        {
            "name": "Go floating point exponent designator",
            "scope": "punctuation.separator.exponent.go",
            "foreground": "var(green)"
        },
        // Graphviz specific rules
        {
            "name": "Graphviz cluster subgraph",
            "scope": "variable.annotation.cluster.dot",
            "foreground": "var(violet)"
        },
        // Groovy specific rules
        {
            "name": "Groovy interpolated strings",
            "scope": "string source.groovy.embedded.source - string source.groovy.embedded.source string",
            "foreground": "var(textcolor)"
        },
        // Haskell specific rules
        {
            "name": "Haskell arrows",
            "scope": "keyword.other.arrow.haskell, keyword.other.big-arrow.haskell",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Haskell double-colon",
            "scope": "keyword.other.double-colon.haskell",
            "foreground": "var(textcolor)"
        },
        // HTML/XML specific rules
        {
            "name": "HTML/XML tag attribute names",
            "scope": "text entity.other.attribute-name, comment.block.documentation entity.other.attribute-name",
            "foreground": "var(green)"
        },
        // INI specific rules (https://packagecontrol.io/packages/INI)
        {
            "name": "INI section names",
            "scope": "entity.section.ini, punctuation.definition.section.ini",
            "foreground": "var(pink)"
        },
        {
            "name": "INI key names",
            "scope": "keyword.name.ini",
            "foreground": "var(violet)"
        },
        {
            "name": "INI key values",
            "scope": "string.name.value.ini",
            "foreground": "var(blue)"
        },
        // Java specific rules
        {
            "name": "Java constants",
            "scope": "constant.other.java",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "Java lambda function arrow",
            "scope": "storage.type.function.anonymous.java",
            "foreground": "var(textcolor)"
        },
        // JavaScript specific rules
        {
            "name": "JavaScript generator function symbol",
            "scope": "keyword.generator.asterisk.js",
            "foreground": "var(textcolor)"
        },
        {
            "name": "JavaScript textual operators",
            "scope": "keyword.operator.js",
            "foreground": "var(blue)"
        },
        {
            "name": "JavaScript object keys",
            "scope": "meta.object-literal.key.js, meta.object-literal.key.js string, meta.object-literal.key.dollar.js, meta.object-literal.key.dollar.only.js",
            "foreground": "var(violet)"
        },
        {
            "name": "JavaScript arrow function symbol",
            "scope": "storage.type.function.arrow.js",
            "foreground": "var(textcolor)"
        },
        {
            "name": "JavaScript constants",
            "scope": "variable.other.constant.js",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "JavaScript annotations",
            "scope": "meta.annotation variable.other.readwrite.js",
            "foreground": "var(pink)"
        },
        // LaTeX specific rules
        {
            "name": "LaTeX environments",
            "scope": "variable.parameter.function.latex",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "LaTeX citations, references and labels",
            "scope": "constant.other.citation.latex, constant.other.reference.latex, entity.name.label.latex",
            "foreground": "var(violet)",
            "font_style": "italic"
        },
        {
            "name": "LaTeX array column parameter",
            "scope": "constant.numeric.array-count.latex",
            "foreground": "var(textcolor)"
        },
        {
            "name": "LaTeX numbers",
            "scope": "constant.numeric.math.tex",
            "foreground": "var(textcolor)"
        },
        {
            "name": "LaTeX newline spacing parameter",
            "scope": "constant.numeric.newline.latex",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX inline math punctuations",
            "scope": "string.other.math.latex",
            "foreground": "var(green)"
        },
        {
            "name": "LaTeX parentheses and brackets",
            "scope": "constant.character.parenthesis.tex, constant.character.bracket.tex",
            "foreground": "var(textcolor)"
        },
        {
            "name": "LaTeX escaped brace character",
            "scope": "constant.character.brace.escape.tex",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX whitespace characters",
            "scope": "constant.character.space.tex, constant.character.escape.tex",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX array delimiters",
            "scope": "constant.character.ampersand.tex, constant.character.newline.latex",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX user command declarations",
            "scope": "entity.name.newcommand.latex",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX puncutation braces",
            "scope": "punctuation.definition.group.brace.begin.latex, punctuation.definition.group.brace.end.latex",
            "foreground": "var(textcolor)"
        },
        {
            "name": "BibTeX citation-keys",
            "scope": "entity.name.type.entry-key.bibtex",
            "foreground": "var(pink)"
        },
        {
            "name": "BibTeX field names",
            "scope": "string.unquoted.key.bibtex",
            "foreground": "var(violet)"
        },
        {
            "name": "BibTeX braces",
            "scope": "string.quoted.other.braces.bibtex punctuation.definition.string",
            "foreground": "var(textcolor)"
        },
        // LESS specific rules (https://packagecontrol.io/packages/LESS)
        {
            "name": "LESS logical operators",
            "scope": "keyword.operator.logic.mixin.less",
            "foreground": "var(blue)"
        },
        // Lua specific rules
        {
            "name": "Lua logical operators",
            "scope": "keyword.operator.logical.lua",
            "foreground": "var(blue)"
        },
        // Markdown specific rules
        {
            "name": "Markdown headings",
            "scope": "markup.heading.markdown, markup.heading.1.markdown, markup.heading.2.markdown, markup.heading.1.setext.markdown, markup.heading.2.setext.markdown",
            "foreground": "var(pink)"
        },
        {
            "name": "Markdown quotes",
            "scope": "markup.quote.markdown",
            "foreground": "var(blue)"
        },
        {
            "name": "Markdown preformatted text",
            "scope": "markup.raw.inline.markdown, markup.raw.block.markdown, markup.raw.code-fence.markdown-gfm",
            "foreground": "var(grey)"
        },
        {
            "name": "Markdown code block punctuation",
            "scope": "punctuation.definition.raw.code-fence.begin.markdown, punctuation.definition.raw.code-fence.end.markdown",
            "foreground": "var(grey)"
        },
        {
            "name": "Markdown code block language",
            "scope": "constant.other.language-name.markdown",
            "foreground": "var(grey)"
        },
        {
            "name": "Markdown horizontal rules",
            "scope": "punctuation.definition.thematic-break.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown inline & reference-style link text",
            "scope": "meta.link.inline.description.markdown, meta.link.reference.description.markdown, meta.link.reference.literal.description.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown footnote-id",
            "scope": "meta.link.reference.literal.footnote-id.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown inline & reference-style image alt-text",
            "scope": "meta.image.inline.description.markdown, meta.image.reference.description.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown inline & reference-style link/footnote text punctuation",
            "scope": "meta.link punctuation.definition.link.begin.markdown, meta.link punctuation.definition.link.end.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown image alt-text punctuation",
            "scope": "punctuation.definition.image.begin.markdown, punctuation.definition.image.end.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown inline link/image address",
            "scope": "meta.link.inline.markdown markup.underline.link.markdown, meta.image.inline.markdown markup.underline.link.image.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown inline link/image address punctuation",
            "scope": "punctuation.definition.metadata.begin.markdown, punctuation.definition.metadata.end.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown reference-style link/image id punctuation",
            "scope": "meta.link.reference.markdown punctuation.definition.constant.begin.markdown, meta.link.reference.markdown punctuation.definition.constant.end.markdown, meta.link.reference.literal.markdown punctuation.definition.constant.begin.markdown, meta.link.reference.literal.markdown punctuation.definition.constant.end.markdown, meta.image.reference.markdown punctuation.definition.constant.begin.markdown, meta.image.reference.markdown punctuation.definition.constant.end.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown reference definition link address",
            "scope": "meta.link.reference.def.markdown markup.underline.link.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown reference definition link address punctuation",
            "scope": "meta.link.reference.def.markdown punctuation.definition.link.begin.markdown, meta.link.reference.def.markdown punctuation.definition.link.end.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown reference definition link/footnote id punctuation",
            "scope": "meta.link.reference.def punctuation.definition.constant.begin.markdown, meta.link.reference.def punctuation.definition.constant.end.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown automatic link/email",
            "scope": "meta.link.inet.markdown markup.underline.link.markdown, meta.link.email.lt-gt.markdown markup.underline.link.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown automatic link/email punctuation",
            "scope": "meta.link.inet.markdown punctuation.definition.link.begin.markdown, meta.link.inet.markdown punctuation.definition.link.end.markdown, meta.link.email.lt-gt.markdown punctuation.definition.link.begin.markdown, meta.link.email.lt-gt.markdown punctuation.definition.link.end.markdown",
            "foreground": "var(violet)"
        },
        // Perl specific rules
        {
            "name": "Perl arrow",
            "scope": "keyword.accessor.arrow.perl",
            "foreground": "var(textcolor)"
        },
        // PHP specific rules
        {
            "name": "PHP instanceof keyword",
            "scope": "keyword.operator.type.php",
            "foreground": "var(blue)"
        },
        {
            "name": "PHP punctuation",
            "scope": "punctuation.definition.expression.php, punctuation.section.block.begin.php, punctuation.section.block.end.php, punctuation.section.brackets.begin.php, punctuation.section.brackets.end.php, punctuation.section.embedded.begin.php, punctuation.section.embedded.end.php, punctuation.section.group.begin.php, punctuation.section.group.end.php",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PHP constants in strings",
            "scope": "string constant.other.php",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PHP library constants",
            "scope": "support.constant.core.php, support.constant.std.php, support.constant.ext.php, support.constant.parser-token.php",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        // PowerShell specific rules (https://packagecontrol.io/packages/PowerShell)
        {
            "name": "PowerShell variables Dollar-symbol",
            "scope": "keyword.other.variable.definition.powershell",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PowerShell at-symbol",
            "scope": "keyword.other.array.begin.powershell, keyword.other.hashtable.begin.powershell",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PowerShell semicolon",
            "scope": "keyword.other.statement-separator.powershell",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PowerShell interpolated string brackets",
            "scope": "string.quoted.double.powershell punctuation.section",
            "foreground": "var(textcolor)"
        },
        // Python specific rules
        {
            "name": "Python import punctuation",
            "scope": "keyword.control.import.relative.python",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Python logical operators",
            "scope": "keyword.operator.logical.python",
            "foreground": "var(blue)"
        },
        {
            "name": "Python dictionary keys",
            "scope": "meta.mapping.key.python meta.generic-name.python",
            "foreground": "var(violet)"
        },
        {
            "name": "Python annotations",
            "scope": "variable.annotation support.function.builtin.python",
            "foreground": "var(pink)"
        },
        {
            "name": "Python constants",
            "scope": "variable.other.constant.python",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        // RAML specific rules (https://packagecontrol.io/packages/RAML%20Syntax%20Highlighter)
        {
            "name": "RAML header",
            "scope": "source.raml constant.language.directive.yaml",
            "foreground": "var(blue)"
        },
        {
            "name": "RAML keys",
            "scope": "source.raml & (entity.name.function.yaml | constant.numeric.yaml)",
            "foreground": "var(blue)"
        },
        {
            "name": "RAML HTTP methods",
            "scope": "source.raml constant.character.method.yaml",
            "foreground": "var(blue)",
            "font_style": "italic"
        },
        {
            "name": "RAML HTTP response keys",
            "scope": "source.raml support.type.function.yaml",
            "foreground": "var(green)"
        },
        {
            "name": "RAML resource nodes",
            "scope": "source.raml entity.name.tag.yaml, source.raml keyword.other.omap.yaml",
            "foreground": "var(violet)"
        },
        {
            "name": "RAML include tag",
            "scope": "source.raml meta.key-value.include.path",
            "foreground": "var(violet)",
            "font_style": "italic"
        },
        {
            "name": "RAML base URI",
            "scope": "source.raml meta.link support.type.tag.yaml",
            "foreground": "var(textcolor)"
        },
        // Regular Expression specific rules
        {
            "name": "RegExp embedded in other languages",
            "scope": "source.regexp, string.regexp.js - punctuation.definition.string, string.regexp.clojure - punctuation.definition.string",
            "foreground": "var(textcolor)"
        },
        {
            "name": "RegExp character set",
            "scope": "constant.other.range.regexp, constant.other.character-class.set.regexp, meta.set.regexp",
            "foreground": "var(textcolor)"
        },
        {
            "name": "RegExp group and set punctuation",
            "scope": "keyword.control.group.regexp, keyword.control.set.regexp, punctuation.definition.group.begin.regexp, punctuation.definition.group.end.regexp, punctuation.definition.character-class.begin.regexp, punctuation.definition.character-class.end.regexp",
            "foreground": "var(textcolor)"
        },
        {
            "name": "RegExp quantifiers and operators",
            "scope": "keyword.operator.quantifier.regexp, keyword.operator.negation.regexp, keyword.operator.alternation.regexp, keyword.operator.or.regexp, keyword.operator.intersection.regexp",
            "foreground": "var(blue)"
        },
        {
            "name": "RegExp assertions and mode modifiers",
            "scope": "constant.other.assertion.regexp, punctuation.definition.group.assertion.regexp, storage.modifier.mode.regexp, punctuation.definition.group.no-capture.regexp",
            "foreground": "var(blue)"
        },
        {
            "name": "RegExp references and conditionals",
            "scope": "keyword.other.named-capture-group.regexp, entity.name.capture-group.regexp, keyword.other.backref-and-recursion.regexp, keyword.other.backref-and-recursion.conditional.regexp, keyword.other.conditional.regexp, keyword.other.conditional.definition.regexp",
            "foreground": "var(blue)"
        },
        {
            "name": "RegExp anchors",
            "scope": "keyword.control.anchor.regexp, keyword.control.anchors.regexp",
            "foreground": "var(blue)"
        },
        {
            "name": "RegExp character classes",
            "scope": "keyword.control.character-class.regexp, support.class.character-class.regexp, constant.character.character-class.regexp, constant.other.character-class.escape.backslash.regexp, keyword.other.any.regexp",
            "foreground": "var(violet)"
        },
        // reStructuredText specific rules
        {
            "name": "RST heading",
            "scope": "markup.heading.restructuredtext",
            "foreground": "var(pink)"
        },
        {
            "name": "RST hyperlink",
            "scope": "(meta.link.inline.restructuredtext | meta.link.reference.def.restructuredtext) & (markup.underline.link.restructuredtext | punctuation.definition.location.restructuredtext)",
            "foreground": "var(violet)"
        },
        {
            "name": "RST link label",
            "scope": "string.other.link.title.restructuredtext, punctuation.definition.link.restructuredtext, punctuation.definition.string.restructuredtext",
            "foreground": "var(violet)"
        },
        {
            "name": "RST footnote label",
            "scope": "(meta.link.footnote.numeric.restructuredtext | meta.link.footnote.def.restructuredtext) & (constant.other.footnote.link | punctuation.definition.constant.restructuredtext)",
            "foreground": "var(blue)"
        },
        {
            "name": "RST citation label",
            "scope": "meta.link.citation.restructuredtext & (constant.other.citation.link.restructuredtext | punctuation.definition.constant.restructuredtext)",
            "foreground": "var(blue)"
        },
        {
            "name": "RST reference punctuation",
            "scope": "(meta.link.footnote.def.restructuredtext | meta.link.reference.def.restructuredtext) & punctuation.definition.link.restructuredtext",
            "foreground": "var(textcolor)"
        },
        {
            "name": "RST preformatted text",
            "scope": "markup.raw.restructuredtext - meta.raw.block.restructuredtext",
            "foreground": "var(grey)"
        },
        {
            "name": "RST field punctuation",
            "scope": "punctuation.definition.field.restructuredtext",
            "foreground": "var(textcolor)"
        },
        {
            "name": "RST interpreted text",
            "scope": "markup.other.command.restructuredtext - punctuation.definition.interpreted.restructuredtext",
            "foreground": "var(orange)"
        },
        // Rust specific rules
        {
            "name": "Rust constants",
            "scope": "constant.other.rust, variable.other.constant.rust",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "Rust annotations",
            "scope": "meta.annotation.parameters.rust",
            "foreground": "var(pink)"
        },
        // Scala specific rules
        {
            "name": "Scala expressions in interpolated strings",
            "scope": "string punctuation.definition.expression.scala",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Scala arrows",
            "scope": "storage.type.function.arrow.lambda.scala, storage.type.function.arrow.case.scala",
            "foreground": "var(textcolor)"
        },
        // ShellScript specific rules
        {
            "name": "ShellScript variable punctuation",
            "scope": "punctuation.definition.variable.shell",
            "foreground": "var(textcolor)"
        },
        {
            "name": "ShellScript single and double brackets",
            "scope": "support.function.test.begin.shell, support.function.test.end.shell, support.function.double-brace.begin.shell, support.function.double-brace.end.shell",
            "foreground": "var(textcolor)"
        },
        {
            "name": "ShellScript command options",
            "scope": "variable.parameter.option.shell",
            "foreground": "var(green)"
        },
        // SQL specific rules
        {
            "name": "SQL embedded in other languages",
            "scope": "string source.sql - string source.sql string, string text.sql - string text.sql string",
            "foreground": "var(textcolor)"
        },
        {
            "name": "SQL multiple-part names",
            "scope": "constant.other.database-name.sql, constant.other.table-name.sql",
            "foreground": "var(textcolor)"
        },
        {
            "name": "SQL operators",
            "scope": "keyword.operator.logical.sql, keyword.operator.assignment.alias.sql",
            "foreground": "var(blue)"
        },
        {
            "name": "SQL asterisk",
            "scope": "variable.language.star.sql",
            "foreground": "var(textcolor)"
        },
        // Swift specific rules (https://packagecontrol.io/packages/Swift)
        {
            "name": "Swift function declaration",
            "scope": "entity.type.function.swift",
            "foreground": "var(violet)"
        },
        {
            "name": "Swift predefined constants",
            "scope": "keyword.constant.boolean.swift, constant.nil.swift",
            "foreground": "var(orange)"
        },
        {
            "name": "Swift type casting operator",
            "scope": "keyword.operator.type-casting.swift",
            "foreground": "var(blue)"
        },
        {
            "name": "Swift annotations",
            "scope": "storage.modifier.attribute.swift",
            "foreground": "var(pink)"
        },
        {
            "name": "Swift string interpolation punctuation",
            "scope": "meta.literal.string.swift support.punctuation.expression",
            "foreground": "var(orange)"
        },
        {
            "name": "Swift imported module",
            "scope": "support.type.module.import.swift",
            "foreground": "var(violet)"
        },
        // Swift specific rules (https://packagecontrol.io/packages/Decent%20Swift%20Syntax)
        {
            "name": "Swift class declaration",
            "scope": "source.swift entity.name.type support.class",
            "foreground": "var(violet)"
        },
        {
            "name": "Swift annotations",
            "scope": "source.swift storage.type.decorator",
            "foreground": "var(pink)"
        },
        // Textile specific rules
        {
            "name": "Textile deleted",
            "scope": "markup.deleted.textile",
            "foreground": "var(red2)"
        },
        {
            "name": "Textile headings",
            "scope": "markup.heading.textile",
            "foreground": "var(pink)"
        },
        {
            "name": "Textile inserted",
            "scope": "markup.inserted.textile",
            "foreground": "var(green2)"
        },
        {
            "name": "Textile quotes",
            "scope": "markup.quote.textile",
            "foreground": "var(blue)"
        },
        // TypeScript specific rules (https://packagecontrol.io/packages/TypeScript)
        {
            "name": "TypeScript textual operators",
            "scope": "source.ts keyword.operator.expression",
            "foreground": "var(blue)"
        },
        {
            "name": "TypeScript types",
            "scope": "entity.name.type.ts, entity.name.type.module.ts",
            "foreground": "var(blue)"
        },
        {
            "name": "TypeScript arrow function",
            "scope": "storage.type.function.arrow.ts",
            "foreground": "var(textcolor)"
        },
        {
            "name": "TypeScript asterisk placeholder",
            "scope": "constant.language.import-export-all.ts",
            "foreground": "var(textcolor)"
        },
        // Babel JavaScript/JSON specific rules (https://packagecontrol.io/packages/Babel)
        {
            "name": "Babel JavaScript keys",
            "scope": "constant.other.object.key.js string.unquoted.label.js",
            "foreground": "var(violet)"
        },
        {
            "name": "Babel JSON keys (up to 3 levels)",
            "scope": "meta.structure.dictionary.json string, meta.structure.dictionary.json meta.structure.dictionary.json string, meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json string",
            "foreground": "var(violet)"
        },
        {
            "name": "Babel JSON values (up to 3 levels)",
            "scope": "meta.structure.dictionary.value.json string, meta.structure.dictionary.value.json meta.structure.dictionary.value.json string, meta.structure.dictionary.value.json meta.structure.dictionary.value.json meta.structure.dictionary.value.json string",
            "foreground": "var(orange)"
        },
        // GitGutter specific rules (https://packagecontrol.io/packages/GitGutter)
        {
            "name": "GitGutter deleted",
            "scope": "markup.deleted.git_gutter",
            "foreground": "#F92672"
        },
        {
            "name": "GitGutter inserted",
            "scope": "markup.inserted.git_gutter",
            "foreground": "#A6E22E"
        },
        {
            "name": "GitGutter changed",
            "scope": "markup.changed.git_gutter",
            "foreground": "#967EFB"
        },
        {
            "name": "GitGutter ignored",
            "scope": "markup.ignored.git_gutter",
            "foreground": "#565656"
        },
        {
            "name": "GitGutter untracked",
            "scope": "markup.untracked.git_gutter",
            "foreground": "#565656"
        },
        // PackageDev specific rules (https://packagecontrol.io/packages/PackageDev)
        {
            "name": "PackageDev Build System predefined key name",
            "scope": "keyword.other.main.sublime-build, support.function.exec-arg.sublime-build",
            "foreground": "var(violet)",
            "font_style": "italic"
        },
        {
            "name": "PackageDev Build System placeholder punctuation",
            "scope": "keyword.other.block.start.placeholder.sublime-build, keyword.other.block.end.placeholder.sublime-build",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PackageDev Build System placeholder",
            "scope": "constant.other.placeholder.sublime-build",
            "foreground": "var(blue)",
            "font_style": ""
        },
        {
            "name": "PackageDev Build System variant name",
            "scope": "entity.name.variant.sublime-build",
            "foreground": "var(orange)"
        },
        {
            "name": "PackageDev Color Scheme predefined key name",
            "scope": "keyword.other.main.sublime-color-scheme, keyword.other.rule.sublime-color-scheme, entity.name.globals.sublime-color-scheme",
            "foreground": "var(violet)",
            "font_style": "italic"
        },
        {
            "name": "PackageDev Color Scheme variable definition string punctuation",
            "scope": "meta.variable-name.sublime-color-scheme punctuation.definition.string",
            "foreground": "var(violet)"
        },
        {
            "name": "PackageDev Color Scheme scope selector punctuation",
            "scope": "meta.rule.sublime-color-scheme meta.scope-selector punctuation.separator.scope-segments.scope-selector",
            "foreground": "var(orange)"
        },
        {
            "name": "PackageDev Color Scheme scope selector parenthesis",
            "scope": "meta.rule.sublime-color-scheme meta.scope-selector punctuation.section.group",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PackageDev Color Scheme color function parenthesis",
            "scope": "(meta.color.sublime-color-scheme | meta.color-adjuster.sublime-color-scheme) & meta.function-call punctuation.definition.group",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PackageDev Keymap predefined keyword",
            "scope": "keyword.other.main.sublime-keymap, support.function.context.sublime-keymap",
            "foreground": "var(violet)",
            "font_style": "italic"
        },
        {
            "name": "PackageDev Keymap keyboard key",
            "scope": "support.constant.key.named.sublime-keymap, support.function.modifier.key.sublime-keymap",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "PackageDev Keymap operator keyword",
            "scope": "keyword.operator.context.key-value.sublime-keymap",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "PackageDev Keymap command name",
            "scope": "support.constant.command-name.sublime-keymap",
            "foreground": "var(orange)"
        },
        {
            "name": "PackageDev Menu key",
            "scope": "keyword.other.main.sublime-menu",
            "foreground": "var(violet)",
            "font_style": "italic"
        },
        {
            "name": "PackageDev Menu id value",
            "scope": "entity.name.id.sublime-menu",
            "foreground": "var(orange)"
        },
        {
            "name": "PackageDev Settings namespace",
            "scope": "keyword.other.namespace.sublime-settings",
            "foreground": "var(violet)"
        },
        {
            "name": "PackageDev Snippet punctuation",
            "scope": "text.xml.sublime.snippet meta.text-substitution.snippet keyword.other.block",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PackageDev Syntax Definition include",
            "scope": "keyword.operator.include.sublime-syntax",
            "foreground": "var(blue)"
        },
        {
            "name": "PackageDev Syntax Definition variable reference punctuation",
            "scope": "punctuation.definition.variable.begin.sublime-syntax, punctuation.definition.variable.end.sublime-syntax",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PackageDev Theme rule key",
            "scope": "meta.main-key keyword.other.main.sublime-theme, meta.rule-key keyword.other.rule.sublime-theme, meta.rule-key storage.modifier.selector.sublime-theme, meta.interpolation-key keyword.other.interpolation.sublime-theme, meta.texture-key keyword.other.texture.sublime-theme, meta.rule-key keyword.other.rule.sublime-theme & (constant.other.layer.sublime-theme | punctuation.accessor.dot.sublime-theme)",
            "foreground": "var(violet)",
            "font_style": "italic"
        },
        {
            "name": "PackageDev Theme class-selector",
            "scope": "entity.name.class-selector.sublime-theme",
            "foreground": "var(orange)"
        },
        {
            "name": "PackageDev Theme variable name string punctuation",
            "scope": "meta.variable-name.sublime-theme punctuation.definition.string",
            "foreground": "var(violet)"
        },
        {
            "name": "PackageDev Theme interpolation value string punctuation",
            "scope": "meta.interpolation-mapping.sublime-theme meta.mapping.value punctuation.definition.string",
            "foreground": "var(orange)"
        },
        {
            "name": "PackageDev Theme var parenthesis",
            "scope": "meta.rule.sublime-theme meta.function-call punctuation.definition.group",
            "foreground": "var(textcolor)"
        },
        // SublimeGDB specific rules (https://packagecontrol.io/packages/SublimeGDB)
        {
            "name": "SublimeGDB breakpoint",
            "scope": "keyword.gdb - keyword.gdb.returncode",
            "foreground": "var(red2)"
        },
        // SublimeLinter specific rules (https://packagecontrol.io/packages/SublimeLinter)
        {
            "name": "SublimeLinter console output filename",
            "scope": "entity.name.filename.sublime_linter",
            "foreground": "var(blue)"
        },
        {
            "name": "SublimeLinter console output message",
            "scope": "markup.quote.linter-message.sublime_linter",
            "foreground": "var(textcolor)"
        }
    ]
}
