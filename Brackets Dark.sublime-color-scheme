{
    "name": "Brackets Dark",
    "author": "Janos Wortmann",
    "variables":
    {
        "textcolor": "#DDDDDD",
        "blue":      "#6C9EF8",
        "green":     "#85A300",
        "green2":    "#229922",
        "grey":      "#767676",
        "orange":    "#D89333",
        "pink":      "#D85896",
        "red":       "#DC322F",
        "red2":      "#DD4444",
        "violet":    "#B77FDB",
        "--yellowish": "var(orange)" // SublimeLinter popupCss warning
    },
    "globals":
    {
        "background": "#1D1F21",
        "foreground": "var(textcolor)",
        "caret": "#C5C8C6",
        "line_highlight": "#2F2F2F",
        "misspelling": "var(red)",
        "fold_marker": "#444444",
        "accent": "var(blue)",
        "gutter_foreground": "var(grey)",
        "line_diff_width": "3",
        "line_diff_added": "var(green2)",
        "line_diff_modified": "var(orange)",
        "line_diff_deleted": "var(red2)",
        "selection": "#0050A0",
        "inactive_selection": "#333F48",
        "selection_corner_style": "round",
        "selection_corner_radius": "2",
        "find_highlight": "#F6A644",
        "find_highlight_foreground": "#121212",
        "brackets_options": "underline",
        "bracket_contents_options": "",
        "tags_options": "stippled_underline"
    },
    "rules":
    [
        {
            "name": "Comments",
            "scope": "comment",
            "foreground": "var(grey)"
        },
        {
            "name": "Language-specific characters",
            "scope": "constant.character",
            "foreground": "var(orange)"
        },
        {
            "name": "Language-specific constants",
            "scope": "constant.language",
            "foreground": "var(orange)"
        },
        {
            "name": "Numbers",
            "scope": "constant.numeric",
            "foreground": "var(green)"
        },
        {
            "name": "Misc constants",
            "scope": "constant.other",
            "foreground": "var(orange)"
        },
        {
            "name": "Enum values",
            "scope": "constant.other.enum",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "Placeholder symbols in strings",
            "scope": "constant.other.placeholder",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "Diff deleted line",
            "scope": "diff.deleted",
            "background": "color(var(red2) alpha(0.15))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Diff deleted region",
            "scope": "diff.deleted.char",
            "background": "color(var(red2) alpha(0.40))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Diff inserted line",
            "scope": "diff.inserted",
            "background": "color(var(green2) alpha(0.15))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Diff inserted region",
            "scope": "diff.inserted.char",
            "background": "color(var(green2) alpha(0.40))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Data structures, types and other constructs",
            "scope": "entity.name",
            "foreground": "var(violet)"
        },
        {
            "name": "Constants",
            "scope": "entity.name.constant",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "Section names",
            "scope": "entity.name.section",
            "foreground": "var(pink)"
        },
        {
            "name": "Tag names",
            "scope": "entity.name.tag",
            "foreground": "var(blue)"
        },
        {
            "name": "Inherited class",
            "scope": "entity.other.inherited-class",
            "foreground": "var(violet)",
            "font_style": "italic"
        },
        {
            "name": "Illegal statements",
            "scope": "invalid.illegal",
            "foreground": "var(red)"
        },
        {
            "name": "Keywords",
            "scope": "keyword",
            "foreground": "var(blue)"
        },
        {
            "name": "Operators (symbolic)",
            "scope": "keyword.operator",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Operators (written)",
            "scope": "keyword.operator.word",
            "foreground": "var(blue)"
        },
        {
            "name": "Accessor symbols",
            "scope": "punctuation.accessor",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Annotation symbols",
            "scope": "punctuation.definition.annotation",
            "foreground": "var(pink)"
        },
        {
            "name": "Tag punctuations",
            "scope": "punctuation.definition.tag",
            "foreground": "var(blue)"
        },
        {
            "name": "Separators",
            "scope": "punctuation.separator",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Storage modifiers",
            "scope": "storage.modifier",
            "foreground": "var(blue)"
        },
        {
            "name": "Types and definition/declaration keywords",
            "scope": "storage.type",
            "foreground": "var(blue)"
        },
        {
            "name": "Numeric type identifiers",
            "scope": "storage.type.numeric",
            "foreground": "var(green)"
        },
        {
            "name": "Strings",
            "scope": "string",
            "foreground": "var(orange)"
        },
        {
            "name": "Library and user constructs",
            "scope": "support",
            "foreground": "var(blue)"
        },
        {
            "name": "Annotations",
            "scope": "variable.annotation",
            "foreground": "var(pink)"
        },
        {
            "name": "Function or method calls",
            "scope": "variable.function",
            "foreground": "var(violet)"
        },
        {
            "name": "Language-specific variables",
            "scope": "variable.language",
            "foreground": "var(blue)"
        },
        {
            "name": "Function or method arguments",
            "scope": "variable.parameter",
            "foreground": "var(orange)"
        },
        // C# specific rules
        {
            "name": "C# keyword: new",
            "scope": "keyword.operator.new.cs",
            "foreground": "var(blue)"
        },
        {
            "name": "C# lambda functions",
            "scope": "storage.type.function.lambda.cs",
            "foreground": "var(textcolor)"
        },
        // Clojure specific rules
        {
            "name": "Clojure decimal separator",
            "scope": "punctuation.separator.decimal.clojure",
            "foreground": "var(green)"
        },
        // CSS specific rules
        {
            "name": "CSS selectors",
            "scope": "source entity.other.attribute-name",
            "foreground": "var(blue)"
        },
        {
            "name": "CSS namespace prefixes",
            "scope": "entity.other.namespace-prefix.css",
            "foreground": "var(blue)"
        },
        {
            "name": "CSS properties",
            "scope": "support.type.property-name.css, support.type.property-name.media.css",
            "foreground": "var(violet)"
        },
        {
            "name": "CSS special color keywords",
            "scope": "support.constant.color.w3c-special-color-keyword.css",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS font names",
            "scope": "support.constant.font-name.css",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS media type",
            "scope": "support.constant.media.css",
            "foreground": "var(green)"
        },
        {
            "name": "CSS property values",
            "scope": "support.constant.property-value.css",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS units",
            "scope": "constant.numeric.css keyword.other.unit.css",
            "foreground": "var(green)"
        },
        {
            "name": "CSS variable name declarations",
            "scope": "support.type.custom-property.css",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS function calls",
            "scope": "source.css support.function",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS at-rule",
            "scope": "keyword.control.at-rule",
            "foreground": "var(violet)"
        },
        {
            "name": "CSS logic operators",
            "scope": "keyword.operator.logic.css, keyword.operator.logic.media.css",
            "foreground": "var(blue)"
        },
        {
            "name": "CSS vendor prefix",
            "scope": "support.type.vendor-prefix.css",
            "foreground": "var(textcolor)"
        },
        // Diff specific rules
        {
            "name": "Diff changed lines",
            "scope": "markup.changed.diff",
            "foreground": "var(orange)"
        },
        {
            "name": "Diff deleted lines",
            "scope": "markup.deleted.diff",
            "foreground": "var(red2)"
        },
        {
            "name": "Diff inserted lines",
            "scope": "markup.inserted.diff",
            "foreground": "var(green2)"
        },
        {
            "name": "Diff header from-file",
            "scope": "meta.diff.header.from-file",
            "foreground": "var(red2)"
        },
        {
            "name": "Diff header to-file",
            "scope": "meta.diff.header.to-file",
            "foreground": "var(green2)"
        },
        {
            "name": "Diff index",
            "scope": "meta.diff.index",
            "foreground": "var(blue)"
        },
        {
            "name": "Diff range information",
            "scope": "meta.diff.range",
            "foreground": "var(grey)"
        },
        {
            "name": "Diff separator lines",
            "scope": "meta.separator.diff",
            "foreground": "var(violet)"
        },
        // Fortran specific rules
        {
            "name": "Fortran format descriptors",
            "scope": "constant.numeric.format-descriptor.fortran, meta.format-string.fortran",
            "foreground": "var(orange)"
        },
        {
            "name": "Fortran type declaration colons",
            "scope": "keyword.control.double-colon.fortran",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Fortran logical operators",
            "scope": "keyword.operator.logical.fortran",
            "foreground": "var(blue)"
        },
        // HTML/XML specific rules
        {
            "name": "HTML/XML tag attribute names",
            "scope": "text entity.other.attribute-name, comment.block.documentation entity.other.attribute-name",
            "foreground": "var(green)"
        },
        // INI specific rules
        {
            "name": "INI section names",
            "scope": "entity.section.ini, punctuation.definition.section.ini",
            "foreground": "var(pink)"
        },
        {
            "name": "INI key names",
            "scope": "keyword.name.ini",
            "foreground": "var(violet)"
        },
        {
            "name": "INI key values",
            "scope": "string.name.value.ini",
            "foreground": "var(blue)"
        },
        // Java specific rules
        {
            "name": "Java constants",
            "scope": "constant.other.java",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "Java lambda functions",
            "scope": "storage.type.function.anonymous.java",
            "foreground": "var(textcolor)"
        },
        // JavaScript specific rules
        {
            "name": "JavaScript generator function symbol",
            "scope": "keyword.generator.asterisk.js",
            "foreground": "var(textcolor)"
        },
        {
            "name": "JavaScript keys",
            "scope": "meta.object-literal.key.js, meta.object-literal.key.js string, meta.object-literal.key.dollar.js",
            "foreground": "var(violet)"
        },
        {
            "name": "JavaScript arrow function symbol",
            "scope": "storage.type.function.arrow.js",
            "foreground": "var(textcolor)"
        },
        {
            "name": "JavaScript constants",
            "scope": "variable.other.constant.js",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "JavaScript jQuery Dollar",
            "scope": "variable.other.dollar.only.js",
            "foreground": "var(textcolor)"
        },
        // JSON specific rules
        {
            "name": "JSON keys",
            "scope": "meta.mapping.key.json string, meta.structure.dictionary.key.json string",
            "foreground": "var(violet)"
        },
        // LaTeX specific rules
        {
            "name": "LaTeX environments",
            "scope": "variable.parameter.function.latex",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "LaTeX citations, references and labels",
            "scope": "constant.other.citation.latex, constant.other.reference.latex, entity.name.label.latex",
            "foreground": "var(violet)",
            "font_style": "italic"
        },
        {
            "name": "LaTeX array column parameter",
            "scope": "constant.numeric.array-count.latex",
            "foreground": "var(textcolor)"
        },
        {
            "name": "LaTeX numbers",
            "scope": "constant.numeric.math.tex",
            "foreground": "var(textcolor)"
        },
        {
            "name": "LaTeX newline spacing parameter",
            "scope": "constant.numeric.newline.latex",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX inline math punctuations",
            "scope": "string.other.math.latex",
            "foreground": "var(green)"
        },
        {
            "name": "LaTeX parentheses and brackets",
            "scope": "constant.character.parenthesis.tex, constant.character.bracket.tex",
            "foreground": "var(textcolor)"
        },
        {
            "name": "LaTeX escaped brace character",
            "scope": "constant.character.brace.escape.tex",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX whitespace characters",
            "scope": "constant.character.space.tex, constant.character.escape.tex",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX array delimiters",
            "scope": "constant.character.ampersand.tex, constant.character.newline.latex",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX user command declarations",
            "scope": "entity.name.newcommand.latex",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX puncutation braces",
            "scope": "punctuation.definition.group.brace.begin.latex, punctuation.definition.group.brace.end.latex",
            "foreground": "var(textcolor)"
        },
        // Lua specific rules
        {
            "name": "Lua logical operators",
            "scope": "keyword.operator.logical.lua",
            "foreground": "var(blue)"
        },
        // Markdown specific rules
        {
            "name": "Markdown headings",
            "scope": "markup.heading.markdown, markup.heading.1.markdown, markup.heading.2.markdown, markup.heading.1.setext.markdown, markup.heading.2.setext.markdown",
            "foreground": "var(pink)"
        },
        {
            "name": "Markdown quotes",
            "scope": "markup.quote.markdown",
            "foreground": "var(blue)"
        },
        {
            "name": "Markdown preformatted text",
            "scope": "markup.raw.inline.markdown, markup.raw.block.markdown, markup.raw.code-fence.markdown-gfm",
            "foreground": "var(grey)"
        },
        {
            "name": "Markdown code block punctuation",
            "scope": "punctuation.definition.raw.code-fence.begin.markdown, punctuation.definition.raw.code-fence.end.markdown",
            "foreground": "var(grey)"
        },
        {
            "name": "Markdown code block language",
            "scope": "constant.other.language-name.markdown",
            "foreground": "var(grey)"
        },
        {
            "name": "Markdown horizontal rules",
            "scope": "punctuation.definition.thematic-break.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown inline & reference-style link text",
            "scope": "meta.link.inline.description.markdown, meta.link.reference.description.markdown, meta.link.reference.literal.description.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown footnote-id",
            "scope": "meta.link.reference.literal.footnote-id.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown inline & reference-style image alt-text",
            "scope": "meta.image.inline.description.markdown, meta.image.reference.description.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown inline & reference-style link/footnote text punctuation",
            "scope": "meta.link punctuation.definition.link.begin.markdown, meta.link punctuation.definition.link.end.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown image alt-text punctuation",
            "scope": "punctuation.definition.image.begin.markdown, punctuation.definition.image.end.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown inline link/image address",
            "scope": "meta.link.inline.markdown markup.underline.link.markdown, meta.image.inline.markdown markup.underline.link.image.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown inline link/image address punctuation",
            "scope": "punctuation.definition.metadata.begin.markdown, punctuation.definition.metadata.end.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown reference-style link/image id punctuation",
            "scope": "meta.link.reference.markdown punctuation.definition.constant.begin.markdown, meta.link.reference.markdown punctuation.definition.constant.end.markdown, meta.link.reference.literal.markdown punctuation.definition.constant.begin.markdown, meta.link.reference.literal.markdown punctuation.definition.constant.end.markdown, meta.image.reference.markdown punctuation.definition.constant.begin.markdown, meta.image.reference.markdown punctuation.definition.constant.end.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown reference definition link address",
            "scope": "meta.link.reference.def.markdown markup.underline.link.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown reference definition link address punctuation",
            "scope": "meta.link.reference.def.markdown punctuation.definition.link.begin.markdown, meta.link.reference.def.markdown punctuation.definition.link.end.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown reference definition link/footnote id punctuation",
            "scope": "meta.link.reference.def punctuation.definition.constant.begin.markdown, meta.link.reference.def punctuation.definition.constant.end.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown automatic link/email",
            "scope": "meta.link.inet.markdown markup.underline.link.markdown, meta.link.email.lt-gt.markdown markup.underline.link.markdown",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown automatic link/email punctuation",
            "scope": "meta.link.inet.markdown punctuation.definition.link.begin.markdown, meta.link.inet.markdown punctuation.definition.link.end.markdown, meta.link.email.lt-gt.markdown punctuation.definition.link.begin.markdown, meta.link.email.lt-gt.markdown punctuation.definition.link.end.markdown",
            "foreground": "var(violet)"
        },
        // PHP specific rules
        {
            "name": "PHP library constants",
            "scope": "support.constant.core.php, support.constant.std.php, support.constant.ext.php, support.constant.parser-token.php",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        // Python specific rules
        {
            "name": "Python logical operators",
            "scope": "keyword.operator.logical.python",
            "foreground": "var(blue)"
        },
        {
            "name": "Python annotations",
            "scope": "variable.annotation support.function.builtin.python",
            "foreground": "var(pink)"
        },
        {
            "name": "Python constants",
            "scope": "variable.other.constant.python",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        // Regular Expression specific rules
        {
            "name": "RegExp embedded in other languages",
            "scope": "source.regexp, string.regexp.js - punctuation.definition.string, string.regexp.clojure - punctuation.definition.string",
            "foreground": "var(textcolor)"
        },
        {
            "name": "RegExp character set",
            "scope": "constant.other.range.regexp, constant.other.character-class.set.regexp, meta.set.regexp",
            "foreground": "var(textcolor)"
        },
        {
            "name": "RegExp group and set punctuation",
            "scope": "keyword.control.group.regexp, keyword.control.set.regexp, punctuation.definition.group.begin.regexp, punctuation.definition.group.end.regexp, punctuation.definition.character-class.begin.regexp, punctuation.definition.character-class.end.regexp",
            "foreground": "var(textcolor)"
        },
        {
            "name": "RegExp quantifiers and operators",
            "scope": "keyword.operator.quantifier.regexp, keyword.operator.negation.regexp, keyword.operator.alternation.regexp, keyword.operator.or.regexp, keyword.operator.intersection.regexp",
            "foreground": "var(blue)"
        },
        {
            "name": "RegExp assertions and mode modifiers",
            "scope": "constant.other.assertion.regexp, punctuation.definition.group.assertion.regexp, storage.modifier.mode.regexp, punctuation.definition.group.no-capture.regexp",
            "foreground": "var(blue)"
        },
        {
            "name": "RegExp references and conditionals",
            "scope": "keyword.other.named-capture-group.regexp, entity.name.capture-group.regexp, keyword.other.backref-and-recursion.regexp, keyword.other.backref-and-recursion.conditional.regexp, keyword.other.conditional.regexp, keyword.other.conditional.definition.regexp",
            "foreground": "var(blue)"
        },
        {
            "name": "RegExp anchors",
            "scope": "keyword.control.anchor.regexp, keyword.control.anchors.regexp",
            "foreground": "var(blue)"
        },
        {
            "name": "RegExp character classes",
            "scope": "keyword.control.character-class.regexp, support.class.character-class.regexp, constant.character.character-class.regexp, constant.other.character-class.escape.backslash.regexp, keyword.other.any.regexp",
            "foreground": "var(violet)"
        },
        // reStructuredText specific rules
        {
            "name": "reStructuredText headings",
            "scope": "punctuation.definition.heading.restructuredtext",
            "foreground": "var(pink)"
        },
        // Rust specific rules
        {
            "name": "Rust constants",
            "scope": "constant.other.rust, variable.other.constant.rust",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "Rust annotations",
            "scope": "meta.annotation.parameters.rust",
            "foreground": "var(pink)"
        },
        // ShellScript specific rules
        {
            "name": "ShellScript command options",
            "scope": "variable.parameter.option.shell",
            "foreground": "var(green)"
        },
        // Sublime-syntax specific rules
        {
            "name": "Sublime-syntax include",
            "scope": "keyword.operator.include.sublime-syntax",
            "foreground": "var(blue)"
        },
        // Textile specific rules
        {
            "name": "Textile deleted",
            "scope": "markup.deleted.textile",
            "foreground": "var(red2)"
        },
        {
            "name": "Textile headings",
            "scope": "markup.heading.textile",
            "foreground": "var(pink)"
        },
        {
            "name": "Textile inserted",
            "scope": "markup.inserted.textile",
            "foreground": "var(green2)"
        },
        {
            "name": "Textile quotes",
            "scope": "markup.quote.textile",
            "foreground": "var(blue)"
        },
        // GitGutter rules
        {
            "name": "GitGutter deleted",
            "scope": "markup.deleted.git_gutter",
            "foreground": "#F92672"
        },
        {
            "name": "GitGutter inserted",
            "scope": "markup.inserted.git_gutter",
            "foreground": "#A6E22E"
        },
        {
            "name": "GitGutter changed",
            "scope": "markup.changed.git_gutter",
            "foreground": "#967EFB"
        },
        {
            "name": "GitGutter ignored",
            "scope": "markup.ignored.git_gutter",
            "foreground": "#565656"
        },
        {
            "name": "GitGutter untracked",
            "scope": "markup.untracked.git_gutter",
            "foreground": "#565656"
        },
        // SublimeLinter rules
        {
            "name": "SublimeLinter error",
            "scope": "markup.error.sublime_linter",
            "foreground": "var(red)"
        },
        {
            "name": "SublimeLinter warning",
            "scope": "markup.warning.sublime_linter",
            "foreground": "var(orange)"
        },
        {
            "name": "SublimeLinter console output filename",
            "scope": "entity.name.filename.sublime_linter",
            "foreground": "var(blue)"
        },
        {
            "name": "SublimeLinter console output message",
            "scope": "markup.quote.linter-message.sublime_linter",
            "foreground": "var(textcolor)"
        }
    ]
}
