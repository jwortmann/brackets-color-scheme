{
    "name": "Brackets Dark",
    "author": "Janos Wortmann",
    "variables":
    {
        "textcolor": "#ddd",
        "blue": "#6c9ef8",
        "green": "#85a300",
        "green2": "#292",
        "grey": "#767676",
        "orange": "#d89333",
        "pink": "#d85896",
        "purple": "#8087e5",
        "red": "#dc322f",
        "red2": "#d44",
        "violet": "#b77fdb",
        "--yellowish": "#d3cd69",
        "--cyanish": "#6bbeff",
        "operator_symbol": "var(textcolor)",
        "operator_keyword": "var(blue)",
        "punctuation": "var(textcolor)",
        "type": "var(textcolor)"
    },
    "globals":
    {
        "background": "#1d1f21",
        "foreground": "var(textcolor)",
        "caret": "#c5c8c6",
        "block_caret": "rgba(253, 255, 253, 0.25)",
        "block_caret_border": "color(var(textcolor) alpha(0.6))",
        "line_highlight": "rgba(65, 63, 61, 0.5)",
        "misspelling": "var(red)",
        "fold_marker": "var(--yellowish)",
        "accent": "var(blue)",
        "gutter_foreground": "var(grey)",
        "gutter_foreground_highlight": "#fff",
        "line_diff_width": "3",
        "line_diff_added": "var(green2)",
        "line_diff_modified": "var(orange)",
        "line_diff_deleted": "var(red2)",
        "selection": "#0050a0",
        "inactive_selection": "#333f48",
        "inactive_selection_border": "#29333a",
        "selection_corner_style": "round",
        "selection_corner_radius": "2",
        "highlight": "#78b2f2",
        "find_highlight": "#f6a644",
        "find_highlight_foreground": "#121212",
        "scroll_highlight": "var(grey)",
        "scroll_selected_highlight": "var(orange)",
        "active_guide": "color(var(blue) alpha(0.5))",
        "stack_guide": "color(var(blue) alpha(0.25))",
        "brackets_options": "underline",
        "bracket_contents_options": "",
        "tags_options": "stippled_underline"
    },
    "rules":
    [
        {
            "name": "Module/class/type/method name",
            "scope": "entity.name - entity.name.section",
            "foreground": "var(violet)"
        },
        {
            "name": "Section name",
            "scope": "entity.name.section - comment",
            "foreground": "var(pink)"
        },
        {
            "name": "Constant",
            "scope": "entity.name.constant",
            "foreground": "var(textcolor)",
            "font_style": "italic"
        },
        {
            "name": "Filename",
            "scope": "entity.name.filename",
            "foreground": "var(purple)"
        },
        {
            "name": "Tag name",
            "scope": "entity.name.tag, punctuation.definition.tag",
            "foreground": "var(blue)"
        },
        {
            "name": "Tag attribute",
            "scope": "meta.tag entity.other.attribute-name - comment",
            "foreground": "var(green)"
        },
        {
            "name": "CSS selector class/id/attribute",
            "scope": "entity.other.attribute-name - meta.tag",
            "foreground": "var(blue)"
        },
        {
            "name": "Base class or interface",
            "scope": "entity.other.inherited-class",
            "foreground": "var(violet)",
            "font_style": "italic"
        },
        {
            "name": "Built-in variable",
            "scope": "variable.language - variable.language.anonymous - variable.language.wildcard.asterisk",
            "foreground": "var(blue)"
        },
        {
            "name": "Function argument",
            "scope": "variable.parameter - meta.function-call - meta.annotation",
            "foreground": "var(orange)"
        },
        {
            "name": "Function call",
            "scope": "variable.function",
            "foreground": "var(violet)"
        },
        {
            "name": "Annotation",
            "scope": "variable.annotation, punctuation.definition.annotation",
            "foreground": "var(pink)"
        },
        {
            "name": "Misc variable",
            "scope": "variable.other",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Number",
            "scope": "constant.numeric, punctuation.separator.decimal",
            "foreground": "var(green)"
        },
        {
            "name": "Built-in constant",
            "scope": "constant.language",
            "foreground": "var(orange)"
        },
        {
            "name": "Escaped or special character",
            "scope": "constant.character",
            "foreground": "var(orange)"
        },
        {
            "name": "Misc constant",
            "scope": "constant.other",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Hex-color value",
            "scope": "constant.other.color",
            "foreground": "var(orange)"
        },
        {
            "name": "Enum value",
            "scope": "constant.other.enum",
            "font_style": "italic"
        },
        {
            "name": "Type keyword",
            "scope": "storage.type",
            "foreground": "var(blue)"
        },
        {
            "name": "Numeric type suffix [ST3]",
            "scope": "storage.type.numeric",
            "foreground": "var(green)"
        },
        {
            "name": "Modifier keyword",
            "scope": "storage.modifier",
            "foreground": "var(blue)"
        },
        {
            "name": "Built-in or library construct",
            "scope": "support",
            "foreground": "var(blue)"
        },
        {
            "name": "Keyword",
            "scope": "keyword - keyword.operator",
            "foreground": "var(blue)"
        },
        {
            "name": "Operator symbol",
            "scope": "keyword.operator",
            "foreground": "var(operator_symbol)"
        },
        {
            "name": "Operator keyword",
            "scope": "keyword.operator.word",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "Lambda function arrow",
            "scope": "keyword.declaration.function.arrow, keyword.declaration.function.anonymous",
            "foreground": "var(operator_symbol)"
        },
        {
            "name": "Lambda function arrow [ST3]",
            "scope": "keyword.declaration.function.lambda",
            "foreground": "var(operator_symbol)"
        },
        {
            "name": "Preprocessor directive",
            "scope": "keyword.control.directive, meta.preprocessor keyword.control.import, keyword.control.preprocessor, keyword.other.preprocessor",
            "foreground": "var(purple)"
        },
        {
            "name": "String",
            "scope": "string",
            "foreground": "var(orange)"
        },
        {
            "name": "Mapping key",
            "scope": "meta.mapping.key string",
            "foreground": "var(violet)"
        },
        {
            "name": "Punctuation",
            "scope": "punctuation.separator - punctuation.separator.path - punctuation.separator.email - punctuation.separator.domain, punctuation.accessor, punctuation.terminator - punctuation.terminator.entity",
            "foreground": "var(punctuation)"
        },
        {
            "name": "Brackets",
            "scope": "punctuation.section - source.yaml.sublime.syntax comment, punctuation.definition.group, punctuation.definition.generic, punctuation.definition.sequence, punctuation.definition.mapping",
            "foreground": "var(punctuation)"
        },
        {
            "name": "Comment",
            "scope": "comment, punctuation.definition.comment",
            "foreground": "var(grey)"
        },
        {
            "name": "Code section comment",
            "scope": "comment entity.name.section",
            "font_style": "bold"
        },
        {
            "name": "Shebang interpreter name",
            "scope": "comment constant.language.shebang",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        {
            "name": "Doc comment: HTML tag",
            "scope": "comment entity.name.tag, comment punctuation.definition.tag",
            "foreground": "color(var(blue) alpha(0.6))"
        },
        {
            "name": "Doc comment: HTML tag attribute",
            "scope": "comment entity.other.attribute-name",
            "foreground": "color(var(green) alpha(0.6))"
        },
        {
            "name": "Doc comment: string",
            "scope": "comment string",
            "foreground": "color(var(orange) alpha(0.6))"
        },
        {
            "name": "Doc comment: punctuation",
            "scope": "comment punctuation.separator",
            "foreground": "color(var(punctuation) alpha(0.6))"
        },
        {
            "name": "Doc comment: tag/keyword",
            "scope": "comment keyword, comment storage.modifier",
            "foreground": "color(var(blue) alpha(0.6))"
        },
        {
            "name": "Doc comment: parameter",
            "scope": "comment variable.parameter",
            "foreground": "color(var(orange) alpha(0.6))"
        },
        {
            "name": "Doc comment: link",
            "scope": "comment markup.underline.link",
            "foreground": "color(var(textcolor) alpha(0.6))",
            "font_style": "underline"
        },
        {
            "name": "Invalid expression",
            "scope": "invalid - invalid.deprecated",
            "foreground": "var(red)"
        },
        {
            "name": "Heading",
            "scope": "markup.heading - comment - markup.heading.subject.git",
            "foreground": "var(pink)"
        },
        {
            "name": "Inserted",
            "scope": "markup.inserted",
            "foreground": "var(green2)"
        },
        {
            "name": "Changed",
            "scope": "markup.changed",
            "foreground": "var(orange)"
        },
        {
            "name": "Deleted",
            "scope": "markup.deleted",
            "foreground": "var(red2)"
        },
        {
            "name": "Error",
            "scope": "markup.error",
            "foreground": "var(red)"
        },
        {
            "name": "Warning",
            "scope": "markup.warning",
            "foreground": "var(orange)"
        },
        {
            "name": "Info",
            "scope": "markup.info",
            "foreground": "var(blue)"
        },
        {
            "name": "LSP DocumentHighlight",
            "scope": "markup.highlight",
            "background": "rgba(200, 200, 150, 0.2)"
        },
        {
            "name": "LSP Hover",
            "scope": "markup.highlight.hover",
            "background": "color(var(--cyanish) alpha(0.15))"
        },
        {
            "name": "Inline diff inserted line",
            "scope": "diff.inserted",
            "background": "color(var(green2) alpha(0.15))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Inline diff inserted region",
            "scope": "diff.inserted.char",
            "background": "color(var(green2) alpha(0.4))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Inline diff deleted line",
            "scope": "diff.deleted",
            "background": "color(var(red2) alpha(0.15))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Inline diff deleted region",
            "scope": "diff.deleted.char",
            "background": "color(var(red2) alpha(0.4))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Sublime Merge side-by-side diff changed region",
            "scope": "diff.fill, diff.inserted.side-by-side, diff.deleted.side-by-side",
            "background": "color(#1d1f21 lightness(+ 3%))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Sublime Merge blame commit separator border",
            "scope": "blame.border",
            "background": "#3a3c3d"
        },
        {
            "name": "Sublime Merge merge conflict left view line",
            "scope": "diff.inserted.merge-left",
            "background": "color(var(green2) alpha(0.15))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Sublime Merge merge conflict left view region",
            "scope": "diff.inserted.char.merge-left",
            "background": "color(var(green2) alpha(0.4))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Sublime Merge merge conflict left view unrelated change border",
            "scope": "diff.border.merge-left",
            "background": "color(var(green2) alpha(0.4))"
        },
        {
            "name": "Sublime Merge merge conflict right view line",
            "scope": "diff.inserted.merge-right",
            "background": "color(var(blue) alpha(0.15))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Sublme Merge merge conflict right view region",
            "scope": "diff.inserted.char.merge-right",
            "background": "color(var(blue) alpha(0.4))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Sublime Merge merge conflict right view unrelated change border",
            "scope": "diff.border.merge-right",
            "background": "color(var(blue) alpha(0.4))"
        },
        {
            "name": "Sublime Merge unresolved merge conflict border",
            "scope": "diff.border.merge-conflict",
            "background": "color(var(red2) alpha(0.4))"
        },
        {
            "name": "Sublime Merge resolved merge conflict border",
            "scope": "diff.border.merge-merged",
            "background": "color(var(green2) alpha(0.4))"
        },
        // ActionScript specific rules
        {
            "name": "ActionScript operator keyword",
            "scope": "source.actionscript keyword.operator - keyword.operator.symbolic",
            "foreground": "var(operator_keyword)"
        },
        // Apache specific rules >> https://packagecontrol.io/packages/ApacheConf
        {
            "name": "Apache tag",
            "scope": "source.apacheconf entity.tag",
            "foreground": "var(blue)"
        },
        {
            "name": "Apache keyword",
            "scope": "source.apacheconf entity.status, source.apacheconf entity.helper",
            "foreground": "var(blue)"
        },
        // ASP specific rules
        {
            "name": "ASP operator keyword",
            "scope": "source.asp keyword.operator.logical",
            "foreground": "var(operator_keyword)"
        },
        // AutoHotkey specific rules >> https://packagecontrol.io/packages/AutoHotkey
        {
            "name": "AutoHotkey preprocessor directive",
            "scope": "source.ahk preprocessordirective keyword.control, source.ahk importline keyword.control.import",
            "foreground": "var(purple)"
        },
        // C/C++ specific rules
        {
            "name": "C/C++ code section comment",
            "scope": "(source.c | source.c++ | source.objc | source.objc++) & comment meta.toc-list.banner",
            "font_style": "bold"
        },
        // C# specific rules
        {
            "name": "C# class name",
            "scope": "source.cs support.type",
            "foreground": "var(type)"
        },
        {
            "name": "C# operator keyword",
            "scope": "source.cs keyword.operator.new, source.cs keyword.operator.reflection, source.cs keyword.operator.logical - meta.preprocessor",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "C# operator symbol",
            "scope": "source.cs storage.type.nullable",
            "foreground": "var(operator_symbol)"
        },
        {
            "name": "C# lambda function arrow [ST3]",
            "scope": "source.cs storage.type.function",
            "foreground": "var(operator_symbol)"
        },
        {
            "name": "C# string placeholder punctuation",
            "scope": "source.cs punctuation.definition.placeholder",
            "foreground": "var(punctuation)"
        },
        {
            "name": "C# comment todo annotation",
            "scope": "source.cs comment.line.todo",
            "foreground": "color(var(red2) alpha(0.6))",
            "font_style": "glow"
        },
        // CoffeeScript specific rules >> https://packagecontrol.io/packages/Better%20CoffeeScript
        {
            "name": "CoffeeScript string interpolation",
            "scope": "source.coffee.embedded",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CoffeeScript operator keyword",
            "scope": "source.coffee keyword.operator.new",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "CoffeeScript lambda function arrow",
            "scope": "source.coffee storage.type.function",
            "foreground": "var(operator_symbol)"
        },
        // CSS specific rules
        {
            "name": "CSS selector pseudo-class",
            "scope": "entity.other.pseudo-class",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS selector pseudo-element",
            "scope": "entity.other.pseudo-element",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS namespace prefix",
            "scope": "entity.other.namespace-prefix.css",
            "foreground": "var(blue)"
        },
        {
            "name": "CSS property name",
            "scope": "support.type.property-name.css",
            "foreground": "var(violet)"
        },
        {
            "name": "CSS property name media [ST3]",
            "scope": "support.type.property-name.media.css",
            "foreground": "var(violet)"
        },
        {
            "name": "CSS special color keyword",
            "scope": "support.constant.color.w3c.special.css",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS special color keyword [ST3]",
            "scope": "support.constant.color.w3c-special-color-keyword.css",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS font name keyword",
            "scope": "support.constant.font-name.css",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS media type",
            "scope": "support.constant.media.css",
            "foreground": "var(green)"
        },
        {
            "name": "CSS property value",
            "scope": "support.constant.property-value.css",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS unquoted font name",
            "scope": "meta.property-value.css string.unquoted.css - meta.function-call",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS unit suffix [ST3]",
            "scope": "constant.numeric keyword.other.unit.css",
            "foreground": "var(green)"
        },
        {
            "name": "CSS variable [ST3]",
            "scope": "support.type.custom-property.css",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS function",
            "scope": "source.css support.function",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS unknown function",
            "scope": "source.css variable.function",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS at-rule [ST3]",
            "scope": "keyword.control.at-rule, keyword.control.at-rule support.type.property-vendor.css",
            "foreground": "var(purple)"
        },
        {
            "name": "CSS operator keyword",
            "scope": "keyword.operator.logical.css",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "CSS operator keyword [ST4126, Sass, SCSS]",
            "scope": "keyword.operator.logic.css",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "CSS media operator keyword [ST3]",
            "scope": "keyword.operator.logic.media.css",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "CSS vendor prefix",
            "scope": "support.type.vendor-prefix.css",
            "foreground": "var(textcolor)"
        },
        // CSS specific rules >> https://packagecontrol.io/packages/CSS3
        {
            "name": "CSS selector pseudo-class",
            "scope": "source.css meta.rule entity.other.attribute-name.pseudo-class",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS selector pseudo-element",
            "scope": "source.css meta.rule entity.other.attribute-name.pseudo-element",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS unit suffix",
            "scope": "source.css meta.rule keyword.other.unit",
            "foreground": "var(green)"
        },
        {
            "name": "CSS unquoted font name",
            "scope": "source.css meta.rule meta.property-value.font-family string.unquoted",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS variable",
            "scope": "source.css meta.rule support.type.property-name.custom",
            "foreground": "var(textcolor)"
        },
        // D specific rules
        {
            "name": "D numeric base prefix [ST3]",
            "scope": "source.d punctuation.definition.numeric",
            "foreground": "var(green)"
        },
        {
            "name": "D numeric type suffix [ST3]",
            "scope": "source.d storage.type.integer, source.d storage.type.float",
            "foreground": "var(green)"
        },
        // Dart specific rules >> https://packagecontrol.io/packages/Dart
        {
            "name": "Dart class/function definition",
            "scope": "source.dart class.name, source.dart function.name",
            "foreground": "var(violet)"
        },
        {
            "name": "Dart annotation",
            "scope": "source.dart entity.name.function.annotation, source.dart annotation support.type",
            "foreground": "var(pink)"
        },
        {
            "name": "Dart string interpolation",
            "scope": "source.dart string.interpolated interpolation, source.dart string.interpolated variable.parameter",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Dart string interpolation punctuation",
            "scope": "source.dart string.interpolated keyword.other",
            "foreground": "var(punctuation)"
        },
        {
            "name": "Dart operator symbol",
            "scope": "source.dart keyword.control.ternary",
            "foreground": "var(operator_symbol)"
        },
        // Diff specific rules
        {
            "name": "Diff header",
            "scope": "meta.diff.header",
            "foreground": "var(purple)"
        },
        {
            "name": "Diff index",
            "scope": "meta.diff.index",
            "foreground": "var(blue)"
        },
        {
            "name": "Diff range information",
            "scope": "meta.diff.range, meta.diff.range entity.name.section",
            "foreground": "var(grey)"
        },
        {
            "name": "Diff separator line",
            "scope": "meta.separator.diff",
            "foreground": "var(grey)"
        },
        // Dockerfile specific rules >> https://packagecontrol.io/packages/Dockerfile%20Syntax%20Highlighting
        {
            "name": "Dockerfile operator keyword",
            "scope": "source.dockerfile keyword.operator",
            "foreground": "var(operator_keyword)"
        },
        // DotENV specific rules >> https://packagecontrol.io/packages/DotENV
        {
            "name": "DotENV key",
            "scope": "source.env variable.other - string",
            "foreground": "var(violet)"
        },
        {
            "name": "DotENV template punctuation",
            "scope": "source.env string.interpolated keyword.other.template",
            "foreground": "var(punctuation)"
        },
        // EditorConfig specific rules >> https://packagecontrol.io/packages/INI
        {
            "name": "EditorConfig key",
            "scope": "source.ini.editorconfig meta.mapping.key variable.language",
            "foreground": "var(violet)",
            "font_style": "italic"
        },
        // Elixir specific rules >> https://packagecontrol.io/packages/Elixir
        {
            "name": "Elixir operator keyword",
            "scope": "source.elixir keyword.operator.elixir",
            "foreground": "var(operator_keyword)"
        },
        // Erlang specific rules
        {
            "name": "Erlang operator keyword",
            "scope": "source.erlang keyword.operator.bitwise",
            "foreground": "var(operator_keyword)"
        },
        // F# specific rules >> https://packagecontrol.io/packages/F%23
        {
            "name": "F# operator symbol",
            "scope": "source.fsharp keyword.symbol",
            "foreground": "var(operator_symbol)"
        },
        {
            "name": "F# attribute",
            "scope": "source.fsharp support.function.attribute",
            "foreground": "var(pink)"
        },
        {
            "name": "F# string placeholder",
            "scope": "source.fsharp keyword.format.specifier",
            "foreground": "var(textcolor)"
        },
        // Fortran specific rules >> https://packagecontrol.io/packages/ModernFortran
        {
            "name": "Fortran class name",
            "scope": "source.fortran storage.type.class",
            "foreground": "var(type)"
        },
        {
            "name": "Fortran label",
            "scope": "source.fortran entity.name.label",
            "foreground": "var(pink)"
        },
        {
            "name": "Fortran built-in function",
            "scope": "source.fortran variable.function.function.intrinsic, source.fortran variable.function.subroutine.intrinsic",
            "foreground": "var(blue)"
        },
        {
            "name": "Fortran variable or function identifier",
            "scope": "source.fortran variable.function",
            "foreground": "var(textcolor)"
        },
        // Fortran specific rules >> https://packagecontrol.io/packages/Fortran
        {
            "name": "Fortran subroutine call",
            "scope": "source.modern-fortran support.function.any-method",
            "foreground": "var(violet)"
        },
        {
            "name": "Fortran operator keyword",
            "scope": "source.modern-fortran keyword.operator.logical, source.fixedform-fortran keyword.operator.logical",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "Fortran punctuation",
            "scope": "source.modern-fortran keyword.control.double-colon, source.modern-fortran support.constant.line-continuation",
            "foreground": "var(punctuation)"
        },
        {
            "name": "Fortran format string",
            "scope": "source.modern-fortran meta.format-string constant.numeric.format-descriptor",
            "foreground": "var(orange)"
        },
        // Git specific rules
        {
            "name": "Git commit hash",
            "scope": "text.git constant.other.hash",
            "foreground": "var(green)"
        },
        {
            "name": "Git operator keyword",
            "scope": "text.git keyword.operator - text.git.config",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "Git branch name",
            "scope": "text.git constant.language.branch-name",
            "foreground": "var(violet)"
        },
        {
            "name": "Git Config key",
            "scope": "text.git.config meta.mapping.key variable.other",
            "foreground": "var(violet)"
        },
        {
            "name": "Git Log email angle brackets",
            "scope": "text.git.log punctuation.definition.reference.email",
            "foreground": "var(punctuation)"
        },
        // Gnuplot specific rules >> https://packagecontrol.io/packages/Gnuplot
        {
            "name": "Gnuplot brackets",
            "scope": "source.gnuplot punctuation.definition.range",
            "foreground": "var(punctuation)"
        },
        // Go specific rules
        {
            "name": "Go operator keyword",
            "scope": "source.go keyword.operator.type",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "Go user-defined type",
            "scope": "source.go storage.type",
            "foreground": "var(type)"
        },
        {
            "name": "Go comment directive",
            "scope": "source.go comment meta.keyword.annotation, source.go comment meta.variable.function",
            "foreground": "color(var(purple) alpha(0.6))"
        },
        {
            "name": "Go comment directive argument",
            "scope": "source.go comment meta.annotation.parameters",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        {
            "name": "Go comment directive punctuation",
            "scope": "source.go comment meta.punctuation",
            "foreground": "color(var(punctuation) alpha(0.6))"
        },
        {
            "name": "Go floating point exponent separator [ST3]",
            "scope": "source.go punctuation.separator.exponent",
            "foreground": "var(green)"
        },
        // Graphviz specific rules
        {
            "name": "Graphviz cluster subgraph",
            "scope": "source.dot variable.annotation.cluster",
            "foreground": "var(violet)"
        },
        // Groovy specific rules
        {
            "name": "Groovy operator keyword",
            "scope": "source.groovy keyword.operator.instanceof, source.groovy keyword.operator.as, source.groovy keyword.operator.is",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "Groovy string interpolation",
            "scope": "string source.groovy.embedded.source - string source.groovy.embedded.source string",
            "foreground": "var(textcolor)"
        },
        // Handlebars specific rules >> https://packagecontrol.io/packages/Handlebars
        {
            "name": "Handlebars inline-script tag attribute",
            "scope": "source.handlebars.embedded entity.other.attribute-name",
            "foreground": "var(green)"
        },
        {
            "name": "Handlebars template",
            "scope": "variable.parameter.handlebars, entity.other.attribute-name.handlebars",
            "foreground": "var(textcolor)"
        },
        // Haskell specific rules
        {
            "name": "Haskell operator symbol",
            "scope": "source.haskell keyword.other.arrow, source.haskell keyword.other.big-arrow, source.haskell keyword.other.double-colon",
            "foreground": "var(operator_symbol)"
        },
        {
            "name": "Haskell import module name",
            "scope": "source.haskell meta.import support.other.module",
            "foreground": "var(textcolor)"
        },
        // Java specific rules
        {
            "name": "Java class name",
            "scope": "source.java support.class",
            "foreground": "var(type)"
        },
        {
            "name": "Java class name [ST4123 - ST4150]",
            "scope": "source.java storage.type.class",
            "foreground": "var(type)"
        },
        {
            "name": "Java constant",
            "scope": "source.java constant.other",
            "font_style": "italic"
        },
        {
            "name": "Java lambda function arrow [ST3]",
            "scope": "source.java storage.type.function.anonymous",
            "foreground": "var(operator_symbol)"
        },
        {
            "name": "Java array punctuation",
            "scope": "source.java storage.modifier.array",
            "foreground": "var(punctuation)"
        },
        {
            "name": "Java import class name",
            "scope": "source.java meta.import entity.name.class, source.java support.class.import",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Java exports namespace",
            "scope": "source.java meta.exports entity.name.namespace",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Java uses class name",
            "scope": "source.java meta.uses entity.name.class",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Java opens namespace",
            "scope": "source.java meta.opens entity.name.namespace",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Java provides class name",
            "scope": "source.java meta.provides entity.name.class",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Java requires namespace",
            "scope": "source.java meta.requires entity.name.namespace",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Java namespace [ST3]",
            "scope": "source.java support.type.package",
            "foreground": "var(textcolor)"
        },
        {
            "name": "JavaDoc inline-tag punctuation [ST3]",
            "scope": "source.java comment.block.documentation punctuation.section.inline-tag",
            "foreground": "color(var(punctuation) alpha(0.6))"
        },
        {
            "name": "JavaDoc code",
            "scope": "source.java comment.block.documentation markup.raw",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        {
            "name": "JavaDoc HTML entity",
            "scope": "source.java comment.block.documentation constant.character.entity",
            "foreground": "color(var(orange) alpha(0.6))"
        },
        // JavaScript specific rules
        {
            "name": "JavaScript user-defined class",
            "scope": "support.class.js",
            "foreground": "var(type)"
        },
        {
            "name": "JavaScript operator keyword",
            "scope": "keyword.operator.js",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "JavaScript unquoted object-key",
            "scope": "meta.mapping.key.js",
            "foreground": "var(violet)"
        },
        {
            "name": "JavaScript object-key [ST3]",
            "scope": "source.js meta.object-literal.key, source.js meta.object-literal.key string",
            "foreground": "var(violet)"
        },
        {
            "name": "JavaScript lambda function arrow [ST3]",
            "scope": "storage.type.function.arrow.js",
            "foreground": "var(operator_symbol)"
        },
        {
            "name": "JavaScript constructor",
            "scope": "entity.name.function.constructor.js",
            "foreground": "var(blue)"
        },
        {
            "name": "JavaScript constant",
            "scope": "variable.other.constant.js",
            "font_style": "italic"
        },
        {
            "name": "JavaScript annotation",
            "scope": "meta.annotation variable.other.readwrite.js",
            "foreground": "var(pink)"
        },
        {
            "name": "JavaScript regexp string modifier suffix",
            "scope": "source.js string.regexp keyword.other.js",
            "foreground": "var(orange)"
        },
        {
            "name": "JSDoc tag",
            "scope": "comment.block.documentation entity.other.attribute-name.documentation.js",
            "foreground": "color(var(blue) alpha(0.6))"
        },
        {
            "name": "JSX & TSX punctuation for toggle_comment workaround [sublimehq/Packages#2787]",
            "scope": "meta.jsx comment punctuation.definition.interpolation",
            "foreground": "var(punctuation)"
        },
        // Julia specific rules >> https://packagecontrol.io/packages/Julia
        {
            "name": "Julia macro",
            "scope": "source.julia variable.macro, source.julia punctuation.definition.macro, source.julia support.function.macro",
            "foreground": "var(purple)"
        },
        {
            "name": "Julia symbol",
            "scope": "source.julia constant.other.symbol",
            "font_style": "italic"
        },
        {
            "name": "Julia user-defined type",
            "scope": "source.julia meta.type meta.generic-name - meta.parametric-type.parameters",
            "foreground": "var(type)"
        },
        // Kotlin specific rules >> https://packagecontrol.io/packages/Kotlin
        {
            "name": "Kotlin built-in variable",
            "scope": "source.Kotlin constant.language",
            "foreground": "var(blue)"
        },
        {
            "name": "Kotlin variable definition",
            "scope": "source.Kotlin entity.name.variable",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Kotlin constant",
            "scope": "source.Kotlin constant.other",
            "font_style": "italic"
        },
        // Laravel Blade specific rules >> https://packagecontrol.io/packages/Laravel%20Blade%20Highlighter
        {
            "name": "Laravel Blade template directive",
            "scope": "text.html.blade punctuation.section.embedded & (entity.name.tag.block.any.html | constant.other.inline-data.html)",
            "foreground": "var(purple)"
        },
        {
            "name": "Laravel Blade template custom directive",
            "scope": "text.html.blade custom.compiler.blade.php & (support.function | support.function constant.other.inline-data.html)",
            "foreground": "var(blue)"
        },
        // LaTeX specific rules
        {
            "name": "LaTeX citation/reference",
            "scope": "text.tex constant.other.citation, text.tex constant.other.reference",
            "foreground": "var(violet)"
        },
        {
            "name": "LaTeX number",
            "scope": "text.tex constant.numeric",
            "foreground": "var(textcolor)"
        },
        {
            "name": "LaTeX newline spacing parameter",
            "scope": "text.tex constant.numeric.newline",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX inline math punctuation",
            "scope": "text.tex string.other.math punctuation.definition.string",
            "foreground": "var(green)"
        },
        {
            "name": "LaTeX brackets",
            "scope": "text.tex constant.character.parenthesis, text.tex constant.character.bracket",
            "foreground": "var(textcolor)"
        },
        {
            "name": "LaTeX escaped brace",
            "scope": "text.tex constant.character.brace.escape",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX special whitespace character",
            "scope": "text.tex constant.character.space, text.tex constant.character.escape",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX array delimiter",
            "scope": "text.tex constant.character.ampersand, text.tex constant.character.newline",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX command or operator declaration",
            "scope": "text.tex entity.name.newcommand, text.tex entity.name.declare-math-operator, text.tex entity.name.definition",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX option parameter",
            "scope": "text.tex variable.parameter.bracket",
            "foreground": "var(textcolor)"
        },
        {
            "name": "LaTeX package name",
            "scope": "text.tex meta.preamble support.class",
            "foreground": "var(textcolor)"
        },
        {
            "name": "BibTeX citation-key",
            "scope": "text.bibtex entity.name.type.entry-key",
            "foreground": "var(pink)"
        },
        {
            "name": "BibTeX field name [ST3]",
            "scope": "text.bibtex meta.key-assignment string.unquoted.key",
            "foreground": "var(violet)"
        },
        {
            "name": "BibTeX brace string punctuation",
            "scope": "text.bibtex string.quoted.other.braces punctuation.definition.string",
            "foreground": "var(punctuation)"
        },
        // Lisp specific rules
        {
            "name": "Lisp operator keyword",
            "scope": "source.lisp keyword.operator.logical, source.lisp keyword.operator.bitwise",
            "foreground": "var(operator_keyword)"
        },
        // LESS specific rules >> https://packagecontrol.io/packages/LESS
        {
            "name": "LESS operator keyword",
            "scope": "source.less keyword.operator.logic",
            "foreground": "var(operator_keyword)"
        },
        // Lua specific rules
        {
            "name": "Lua operator keyword",
            "scope": "source.lua keyword.operator.logical",
            "foreground": "var(operator_keyword)"
        },
        // Makefile specific rules
        {
            "name": "Makefile target",
            "scope": "source.makefile entity.name.function",
            "foreground": "var(pink)"
        },
        {
            "name": "Makefile punctuation",
            "scope": "source.makefile keyword.other.block, source.makefile keyword.other.single-character-variable",
            "foreground": "var(punctuation)"
        },
        {
            "name": "Makefile variable reference",
            "scope": "source.makefile variable.parameter",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Makefile command silencing operator & call function",
            "scope": "source.makefile constant.language - source.shell",
            "foreground": "var(blue)"
        },
        // Markdown specific rules
        {
            "name": "Markdown blockquote",
            "scope": "text.html.markdown markup.quote",
            "foreground": "var(blue)"
        },
        {
            "name": "Markdown code",
            "scope": "text.html.markdown markup.raw - markup.raw.code-fence, text.html.markdown markup.raw.code-fence.markdown-gfm",
            "foreground": "var(grey)"
        },
        {
            "name": "Markdown fenced code block punctuation",
            "scope": "text.html.markdown punctuation.definition.raw.code-fence",
            "foreground": "var(grey)"
        },
        {
            "name": "Markdown fenced code block info string",
            "scope": "text.html.markdown meta.code-fence.definition.begin.text",
            "foreground": "var(grey)"
        },
        {
            "name": "Markdown fenced code block language",
            "scope": "text.html.markdown meta.code-fence constant.other.language-name",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        {
            "name": "Markdown horizontal rule",
            "scope": "text.html.markdown punctuation.definition.thematic-break",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown link text",
            "scope": "text.html.markdown meta.link.inline.description, text.html.markdown meta.link.reference.description, text.html.markdown meta.link.reference.literal.description",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown link text punctuation",
            "scope": "text.html.markdown meta.link.inline punctuation.definition.link, text.html.markdown meta.link.reference.description punctuation.definition.link, text.html.markdown meta.link.reference.literal.description punctuation.definition.link",
            "foreground": "color(var(violet) alpha(0.6))"
        },
        {
            "name": "Markdown link destination",
            "scope": "text.html.markdown markup.underline.link",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown link destination punctuation",
            "scope": "text.html.markdown punctuation.definition.metadata",
            "foreground": "color(var(orange) alpha(0.6))"
        },
        {
            "name": "Markdown image description",
            "scope": "text.html.markdown meta.image.inline.description, text.html.markdown meta.image.reference.description",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown image description punctuation",
            "scope": "text.html.markdown punctuation.definition.image",
            "foreground": "color(var(violet) alpha(0.6))"
        },
        {
            "name": "Markdown image destination punctuation",
            "scope": "text.html.markdown meta.image.inline punctuation.definition.link",
            "foreground": "color(var(orange) alpha(0.6))"
        },
        {
            "name": "Markdown link reference definition label",
            "scope": "text.html.markdown entity.name.reference.link",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown link reference definition label punctuation",
            "scope": "text.html.markdown meta.link.reference.def punctuation.definition.reference",
            "foreground": "color(var(violet) alpha(0.6))"
        },
        {
            "name": "Markdown autolink punctuation",
            "scope": "text.html.markdown meta.link.inet punctuation.definition.link, text.html.markdown meta.link.email punctuation.definition.link, text.html.markdown meta.link.reference.def punctuation.definition.link",
            "foreground": "color(var(orange) alpha(0.6))"
        },
        {
            "name": "Markdown footnote label",
            "scope": "text.html.markdown meta.link.reference.literal.footnote-id",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown footnote label punctuation",
            "scope": "text.html.markdown meta.link.reference.footnote punctuation.definition.link",
            "foreground": "color(var(violet) alpha(0.6))"
        },
        {
            "name": "Markdown link attribute",
            "scope": "text.html.markdown entity.other.attribute-name.markdown",
            "foreground": "var(purple)"
        },
        {
            "name": "Markdown link attributes punctuation",
            "scope": "text.html.markdown punctuation.definition.attributes",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        {
            "name": "Markdown table alignment punctuation",
            "scope": "text.html.markdown punctuation.definition.table-cell-alignment",
            "foreground": "var(punctuation)"
        },
        {
            "name": "Markdown bold",
            "scope": "text.html.markdown markup.bold",
            "font_style": "bold"
        },
        {
            "name": "Markdown italic",
            "scope": "text.html.markdown markup.italic",
            "font_style": "italic"
        },
        {
            "name": "Markdown bold italic",
            "scope": "text.html.markdown markup.bold & text.html.markdown markup.italic",
            "font_style": "bold italic"
        },
        {
            "name": "Markdown LaTeX formatted math punctuation",
            "scope": "text.html.markdown punctuation.definition.math",
            "foreground": "var(green)"
        },
        {
            "name": "Markdown CriticMarkup addition",
            "scope": "text.html.markdown markup.critic.addition",
            "background": "color(var(green2) alpha(0.1))"
        },
        {
            "name": "Markdown CriticMarkup addition punctuation",
            "scope": "text.html.markdown markup.critic.addition punctuation.definition.critic",
            "foreground": "color(var(green2) alpha(0.6))"
        },
        {
            "name": "Markdown CriticMarkup deletion",
            "scope": "text.html.markdown markup.critic.deletion",
            "background": "color(var(red2) alpha(0.1))"
        },
        {
            "name": "Markdown CriticMarkup deletion punctuation",
            "scope": "text.html.markdown markup.critic.deletion punctuation.definition.critic",
            "foreground": "color(var(red2) alpha(0.6))"
        },
        {
            "name": "Markdown CriticMarkup substitution",
            "scope": "text.html.markdown markup.critic.substitution",
            "background": "color(var(orange) alpha(0.1))"
        },
        {
            "name": "Markdown CriticMarkup substitution punctuation",
            "scope": "text.html.markdown markup.critic.substitution punctuation.definition.critic, text.html.markdown markup.critic.substitution punctuation.separator.critic",
            "foreground": "color(var(orange) alpha(0.6))"
        },
        {
            "name": "Markdown CriticMarkup comment",
            "scope": "text.html.markdown markup.critic.comment",
            "background": "color(var(grey) alpha(0.1))"
        },
        {
            "name": "Markdown CriticMarkup comment punctuation",
            "scope": "text.html.markdown markup.critic.comment punctuation.definition.critic",
            "foreground": "color(var(grey) alpha(0.6))"
        },
        {
            "name": "Markdown CriticMarkup highlight",
            "scope": "text.html.markdown markup.critic.highlight",
            "background": "color(var(blue) alpha(0.1))"
        },
        {
            "name": "Markdown CriticMarkup highlight punctuation",
            "scope": "text.html.markdown markup.critic.highlight punctuation.definition.critic",
            "foreground": "color(var(blue) alpha(0.6))"
        },
        // Quarto >> https://packagecontrol.io/packages/Quarto
        {
            "name": "Quarto Markdown citation and cross reference",
            "scope": "text.html.markdown.quarto keyword.other.cite, text.html.markdown.quarto constant.other.cite",
            "foreground": "var(purple)"
        },
        // Markdown specific rules >> https://packagecontrol.io/packages/Markdown%20Extended
        {
            "name": "Markdown fenced code block with syntax highlighting",
            "scope": "text.html.markdown markup.raw.block.fenced & (source | text.html.basic | text.xml)",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Markdown fenced code block language",
            "scope": "text.html.markdown markup.raw.block.fenced variable.language.fenced",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        {
            "name": "Markdown horizontal rule",
            "scope": "text.html.markdown meta.separator.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown link text & image description",
            "scope": "text.html.markdown string.other.link.title.markdown, text.html.markdown string.other.link.description.markdown, text.html.markdown meta.link.reference.def constant.other.reference.link",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown link text & image description punctuation",
            "scope": "text.html.markdown meta.link punctuation.definition.string - string, text.html.markdown meta.image punctuation.definition.string - string",
            "foreground": "color(var(violet) alpha(0.6))"
        },
        // Matlab specific rules
        {
            "name": "Matlab built-in function [ST3]",
            "scope": "keyword.operator.matlab",
            "foreground": "var(blue)"
        },
        {
            "name": "Matlab built-in variable [ST3]",
            "scope": "source.matlab variable.other.function",
            "foreground": "var(blue)"
        },
        {
            "name": "Matlab code section comment",
            "scope": "source.matlab comment.line.double-percentage - punctuation",
            "font_style": "bold"
        },
        // NGINX specific rules >> https://packagecontrol.io/packages/nginx
        {
            "name": "NGINX context",
            "scope": "source.nginx storage.type.context",
            "foreground": "var(pink)"
        },
        {
            "name": "NGINX directive",
            "scope": "source.nginx keyword.directive",
            "foreground": "var(violet)"
        },
        {
            "name": "NGINX unknown directive",
            "scope": "source.nginx keyword.directive.module.unsupported",
            "foreground": "var(textcolor)"
        },
        {
            "name": "NGINX number",
            "scope": "source.nginx string.ipaddress",
            "foreground": "var(green)"
        },
        // OCaml specific rules
        {
            "name": "OCaml preprocessor directive",
            "scope": "source.ocaml keyword.other.directive",
            "foreground": "var(purple)"
        },
        // Perl specific rules
        {
            "name": "Perl punctuation [ST3]",
            "scope": "source.perl keyword.accessor.arrow",
            "foreground": "var(punctuation)"
        },
        {
            "name": "Perl Pod misc",
            "scope": "source.perl comment.block.documentation & (entity.name.label | constant.character.escape | string.unquoted | markup.heading | markup.underline.link | markup.quote | markup.bold | markup.italic)",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        // PHP specific rules
        {
            "name": "PHP user-defined class",
            "scope": "source.php support.class - support.class.builtin, source.php support.other.namespace",
            "foreground": "var(type)"
        },
        {
            "name": "PHP operator keyword",
            "scope": "source.php keyword.operator.type",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "PHP operator symbol",
            "scope": "source.php storage.type.nullable, source.php storage.modifier.reference, source.php punctuation.definition.arrow-function",
            "foreground": "var(operator_symbol)"
        },
        {
            "name": "PHP attribute",
            "scope": "source.php punctuation.definition.attribute, source.php meta.attribute support.class - meta.attribute meta.group, source.php meta.attribute support.other.namespace - meta.attribute meta.group, source.php meta.attribute punctuation.separator.namespace - meta.attribute meta.group",
            "foreground": "var(pink)"
        },
        {
            "name": "PHP string interpolation punctuation",
            "scope": "source.php string punctuation.definition.expression",
            "foreground": "var(punctuation)"
        },
        {
            "name": "PHP heredoc identifier",
            "scope": "source.php entity.name.tag.heredoc",
            "foreground": "var(purple)"
        },
        {
            "name": "PHP library constant",
            "scope": "source.php support.constant",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "PHP embedding tag",
            "scope": "embedding.php punctuation.section.embedded",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PHP doc comment invalid",
            "scope": "source.php comment.block.documentation invalid.illegal",
            "foreground": "color(var(red) alpha(0.6))"
        },
        // PowerShell specific rules >> https://packagecontrol.io/packages/PowerShell
        {
            "name": "PowerShell operator keyword",
            "scope": "source.powershell keyword.operator.comparison, source.powershell keyword.operator.unary, source.powershell keyword.operator.logical - keyword.operator.logical.pipe, source.powershell keyword.operator.bitwise, source.powershell keyword.operator.string-format",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "PowerShell variable punctuation",
            "scope": "source.powershell keyword.other.variable.definition",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PowerShell at-symbol",
            "scope": "source.powershell keyword.other.array, source.powershell keyword.other.hashtable",
            "foreground": "var(punctuation)"
        },
        {
            "name": "PowerShell semicolon",
            "scope": "source.powershell keyword.other.statement-separator",
            "foreground": "var(punctuation)"
        },
        {
            "name": "PowerShell documentation header",
            "scope": "source.powershell comment.documentation.embedded keyword.operator",
            "foreground": "var(grey)",
            "font_style": "bold"
        },
        {
            "name": "PowerShell attribute",
            "scope": "source.powershell support.function.attribute, source.powershell meta.attribute punctuation.section.bracket",
            "foreground": "var(pink)"
        },
        {
            "name": "PowerShell attribute built-in argument name",
            "scope": "source.powershell variable.parameter.attribute",
            "foreground": "var(blue)"
        },
        // Python specific rules
        {
            "name": "Python import statement asterisk",
            "scope": "source.python constant.language.import-all",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Python import statement punctuation",
            "scope": "source.python keyword.control.import.relative",
            "foreground": "var(punctuation)"
        },
        {
            "name": "Python operator keyword",
            "scope": "source.python keyword.operator.logical",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "Python decorator",
            "scope": "source.python variable.annotation support.function.builtin, source.python meta.annotation meta.generic-name - meta.annotation.arguments - meta.function-call.arguments",
            "foreground": "var(pink)"
        },
        {
            "name": "Python constant",
            "scope": "source.python variable.other.constant",
            "font_style": "italic"
        },
        {
            "name": "Python type annotation",
            "scope": "source.python meta.function.parameters.annotation meta.generic-name, source.python meta.function.annotation.return meta.generic-name, source.python meta.variable.annotation meta.generic-name",
            "foreground": "var(type)"
        },
        {
            "name": "Python string placeholder punctuation",
            "scope": "source.python punctuation.definition.placeholder",
            "foreground": "var(punctuation)"
        },
        {
            "name": "Python f-string interpolation modifier symbol",
            "scope": "source.python meta.interpolation storage.modifier.debug",
            "foreground": "var(operator_symbol)"
        },
        // Python specific rules >> https://packagecontrol.io/packages/Python%203
        {
            "name": "Python operator keyword",
            "scope": "source.python.3 keyword.operator.bool.logical",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "Python decorator",
            "scope": "source.python.3 meta.function.decorator support.function.decorator",
            "foreground": "var(pink)"
        },
        // Python specific rules >> https://packagecontrol.io/packages/Python%20Improved
        {
            "name": "Python constant",
            "scope": "source.python constant.other.allcaps",
            "font_style": "italic"
        },
        {
            "name": "Python comment todo/fixme annotation",
            "scope": "source.python comment.line.note.notation",
            "foreground": "color(var(red) alpha(0.6))"
        },
        // R specific rules
        {
            "name": "R operator symbol",
            "scope": "source.r keyword.other",
            "foreground": "var(operator_symbol)"
        },
        {
            "name": "R doc comment tag",
            "scope": "source.r comment keyword.other",
            "foreground": "color(var(blue) alpha(0.6))"
        },
        {
            "name": "R doc comment parameter",
            "scope": "source.r comment variable.parameter",
            "foreground": "color(var(orange) alpha(0.6))"
        },
        // Regular Expression specific rules
        {
            "name": "Regex string",
            "scope": "string source.regexp",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Regex string [JavaScript]",
            "scope": "string.regexp.js - punctuation.definition.string",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Regex string [Clojure ST3]",
            "scope": "source.clojure string.regexp - punctuation.definition.string",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Regex metacharacter",
            "scope": "keyword.operator.quantifier.regexp, keyword.operator.alternation.regexp, keyword.operator.or.regexp, source.regexp meta.set keyword.operator.logical, keyword.operator.negation.regexp, keyword.operator.intersection.regexp",
            "foreground": "var(blue)"
        },
        {
            "name": "Regex character set brackets",
            "scope": "source.regexp punctuation.definition.set",
            "foreground": "var(punctuation)"
        },
        {
            "name": "Regex character set brackets [JavaScript]",
            "scope": "string.regexp.js punctuation.definition.character-class",
            "foreground": "var(punctuation)"
        },
        {
            "name": "Regex character set brackets [PHP]",
            "scope": "source.regexp.php punctuation.definition.character-class",
            "foreground": "var(punctuation)"
        },
        {
            "name": "Regex group & character set parens/brackets [ST3]",
            "scope": "keyword.control.group.regexp, keyword.control.set.regexp",
            "foreground": "var(punctuation)"
        },
        {
            "name": "Regex non-capturing group & assertion",
            "scope": "constant.other.assertion.regexp",
            "foreground": "var(blue)"
        },
        {
            "name": "Regex non-capturing group & assertion [JavaScript]",
            "scope": "punctuation.definition.group.no-capture.regexp, punctuation.definition.group.assertion.regexp",
            "foreground": "var(blue)"
        },
        {
            "name": "Regex character class",
            "scope": "keyword.control.character-class.regexp, keyword.other.any.regexp",
            "foreground": "var(violet)"
        },
        {
            "name": "Regex character class [JavaScript]",
            "scope": "string.regexp.js constant.other.character-class.escape.backslash.regexp, string.regexp.js constant.other.character-class.escape.unicode-property.regexp",
            "foreground": "var(violet)"
        },
        {
            "name": "Regex character class [PHP]",
            "scope": "constant.character.character-class.regexp",
            "foreground": "var(violet)"
        },
        {
            "name": "Regex POSIX character class",
            "scope": "constant.other.posix-class.regexp",
            "foreground": "var(violet)"
        },
        {
            "name": "Regex unicode property [JavaScript]",
            "scope": "string.regexp.js support.constant.unicode-property.regexp",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Regex back-reference",
            "scope": "keyword.other.backref-and-recursion.regexp variable.other.backref-and-recursion.regexp",
            "foreground": "var(blue)"
        },
        {
            "name": "Regex named capture group",
            "scope": "entity.name.capture-group.regexp",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Regex Replace case conversion",
            "scope": "keyword.operator.case-conversion.regexp-replace",
            "foreground": "var(blue)"
        },
        // reStructuredText specific rules
        {
            "name": "RST link label",
            "scope": "text.restructuredtext meta.link string.other.link.title",
            "foreground": "var(violet)"
        },
        {
            "name": "RST link target",
            "scope": "text.restructuredtext meta.link markup.underline.link",
            "foreground": "var(orange)"
        },
        {
            "name": "RST inline link target punctuation",
            "scope": "text.restructuredtext meta.link.inline punctuation.definition.location",
            "foreground": "color(var(orange) alpha(0.6))"
        },
        {
            "name": "RST footnote & citation label",
            "scope": "text.restructuredtext meta.link constant.other",
            "foreground": "var(violet)"
        },
        {
            "name": "RST footnote & citation label punctuation",
            "scope": "text.restructuredtext meta.link constant punctuation.definition.constant",
            "foreground": "color(var(violet) alpha(0.6))"
        },
        {
            "name": "RST directive",
            "scope": "text.restructuredtext meta.other.directive - punctuation",
            "foreground": "var(blue)"
        },
        {
            "name": "RST field name punctuation",
            "scope": "text.restructuredtext punctuation.definition.field",
            "foreground": "var(punctuation)"
        },
        {
            "name": "RST interpreted text",
            "scope": "text.restructuredtext markup.other.command",
            "foreground": "var(orange)"
        },
        {
            "name": "RST inline literal",
            "scope": "text.restructuredtext markup.raw - meta.raw.block",
            "foreground": "var(grey)"
        },
        {
            "name": "RST block literal",
            "scope": "text.restructuredtext meta.raw.block markup.raw",
            "foreground": "var(grey)"
        },
        // Ruby specific rules
        {
            "name": "Ruby user-defined class",
            "scope": "source.ruby support.class",
            "foreground": "var(type)"
        },
        {
            "name": "Ruby symbol",
            "scope": "source.ruby constant.other.symbol",
            "font_style": "italic"
        },
        {
            "name": "Ruby parameters punctuation",
            "scope": "source.ruby punctuation.definition.parameters",
            "foreground": "var(punctuation)"
        },
        {
            "name": "Ruby base class namespace",
            "scope": "source.ruby entity.other.inherited-class support.other.namespace",
            "foreground": "var(textcolor)"
        },
        // Rust specific rules
        {
            "name": "Rust user-defined type",
            "scope": "source.rust storage.type.source",
            "foreground": "var(type)"
        },
        {
            "name": "Rust constant",
            "scope": "source.rust constant.other - constant.other.placeholder, source.rust variable.other.constant",
            "font_style": "italic"
        },
        {
            "name": "Rust attribute",
            "scope": "source.rust meta.annotation variable.function - meta.annotation.parameters, source.rust meta.annotation punctuation.section.group - meta.annotation.parameters",
            "foreground": "var(pink)"
        },
        {
            "name": "Rust macro",
            "scope": "source.rust support.macro",
            "foreground": "var(purple)"
        },
        {
            "name": "Rust operator and modifier symbols",
            "scope": "source.rust storage.modifier.relaxed-bounds",
            "foreground": "var(operator_symbol)"
        },
        // Sass specific rules >> https://packagecontrol.io/packages/Sass
        {
            "name": "Sass function call",
            "scope": "source.sass support.function",
            "foreground": "var(orange)"
        },
        // Scala specific rules
        {
            "name": "Scala string interpolation punctuation",
            "scope": "source.scala string punctuation.definition.expression",
            "foreground": "var(punctuation)"
        },
        {
            "name": "Scala arrow [ST3]",
            "scope": "source.scala storage.type.function.arrow",
            "foreground": "var(operator_symbol)"
        },
        // SCSS specific rules >> https://packagecontrol.io/packages/SCSS
        {
            "name": "SCSS property name",
            "scope": "source.scss support.type.property-name.scss",
            "foreground": "var(violet)"
        },
        {
            "name": "SCSS property value",
            "scope": "source.scss support.constant.property-value.scss, source.scss support.constant.font-name.scss",
            "foreground": "var(orange)"
        },
        {
            "name": "SCSS function call",
            "scope": "source.scss support.function",
            "foreground": "var(orange)"
        },
        {
            "name": "SCSS function argument",
            "scope": "source.scss variable.parameter.url.scss",
            "foreground": "var(textcolor)"
        },
        {
            "name": "SCSS unit suffix",
            "scope": "source.scss keyword.other.unit.scss",
            "foreground": "var(green)"
        },
        {
            "name": "SCSS misc symbol",
            "scope": "source.scss support.constant.mathematical-symbols.scss, source.scss entity.name.tag.wildcard.scss, source.scss entity.name.tag.reference.scss",
            "foreground": "var(textcolor)"
        },
        {
            "name": "SCSS string interpolation",
            "scope": "source.scss variable.interpolation.scss",
            "foreground": "var(textcolor)"
        },
        // ShellScript specific rules
        {
            "name": "ShellScript variable punctuation",
            "scope": "source.shell punctuation.definition.variable",
            "foreground": "var(textcolor)"
        },
        {
            "name": "ShellScript bracket",
            "scope": "source.shell support.function.test.begin, source.shell support.function.test.end, source.shell support.function.double-brace, source.shell keyword.control.conditional.patterns",
            "foreground": "var(punctuation)"
        },
        {
            "name": "ShellScript option",
            "scope": "source.shell variable.parameter.option",
            "foreground": "var(green)"
        },
        // SQL specific rules
        {
            "name": "SQL embedded in other language",
            "scope": "string source.sql - string source.sql string, string text.sql - string text.sql string",
            "foreground": "var(textcolor)"
        },
        {
            "name": "SQL operator keyword",
            "scope": "source.sql keyword.operator.logical, source.sql keyword.operator.assignment.alias",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "SQL wildcard asterisk [ST3]",
            "scope": "source.sql variable.language.star",
            "foreground": "var(textcolor)"
        },
        // Stylus specific rules >> https://packagecontrol.io/packages/Stylus
        {
            "name": "Stylus property name",
            "scope": "source.stylus support.type.property-name",
            "foreground": "var(violet)"
        },
        {
            "name": "Stylus media type",
            "scope": "source.stylus support.constant.media",
            "foreground": "var(green)"
        },
        {
            "name": "Stylus unit suffix",
            "scope": "source.stylus constant.numeric keyword.other.unit",
            "foreground": "var(green)"
        },
        {
            "name": "Stylus operator keyword",
            "scope": "source.stylus keyword.operator.logic",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "Stylus vendor prefix",
            "scope": "source.stylus support.type.vendor-prefix",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Stylus property value constant",
            "scope": "source.stylus support.constant.property-value, source.stylus constant.property-value",
            "foreground": "var(orange)"
        },
        {
            "name": "Stylus built-in color name",
            "scope": "source.stylus constant.color.w3c-standard-color-name",
            "foreground": "var(blue)"
        },
        {
            "name": "Stylus animation keyframe selector",
            "scope": "source.stylus entity.other.animation-keyframe",
            "foreground": "var(blue)"
        },
        {
            "name": "Stylus function call",
            "scope": "source.stylus entity.function-name",
            "foreground": "var(blue)"
        },
        // Swift specific rules >> https://packagecontrol.io/packages/Swift
        {
            "name": "Swift function declaration",
            "scope": "source.swift entity.type.function",
            "foreground": "var(violet)"
        },
        {
            "name": "Swift built-in constant",
            "scope": "source.swift keyword.constant.boolean, source.swift constant.nil",
            "foreground": "var(orange)"
        },
        {
            "name": "Swift operator keyword",
            "scope": "source.swift keyword.operator.type-casting",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "Swift attribute",
            "scope": "source.swift storage.modifier.attribute",
            "foreground": "var(pink)"
        },
        {
            "name": "Swift string interpolation punctuation",
            "scope": "source.swift meta.literal.string support.punctuation.expression",
            "foreground": "var(punctuation)"
        },
        {
            "name": "Swift imported module",
            "scope": "source.swift support.type.module.import",
            "foreground": "var(violet)"
        },
        // Swift specific rules >> https://packagecontrol.io/packages/Decent%20Swift%20Syntax
        {
            "name": "Swift class declaration",
            "scope": "source.swift entity.name.type support.class",
            "foreground": "var(violet)"
        },
        {
            "name": "Swift attribute",
            "scope": "source.swift storage.type.decorator",
            "foreground": "var(pink)"
        },
        // SystemVerilog specific rules >> https://packagecontrol.io/packages/SystemVerilog
        {
            "name": "SystemVerilog preprocessor directive",
            "scope": "source.systemverilog constant.other.preprocessor",
            "foreground": "var(purple)"
        },
        // Textile specific rules
        {
            "name": "Textile link title",
            "scope": "text.html.textile string.other.link.title, text.html.textile string.other.link.description.title, text.html.textile markup.underline.link.image",
            "foreground": "var(violet)"
        },
        {
            "name": "Textile link target",
            "scope": "text.html.textile markup.underline.link, text.html.textile constant.other.reference.link",
            "foreground": "var(orange)"
        },
        {
            "name": "Textile attribute",
            "scope": "text.html.textile entity.name.type",
            "foreground": "var(blue)"
        },
        // TOML specific rules >> https://packagecontrol.io/packages/TOML
        {
            "name": "TOML section name",
            "scope": "source.toml entity.name.table",
            "foreground": "var(pink)"
        },
        {
            "name": "TOML key",
            "scope": "source.toml entity.name.tag",
            "foreground": "var(violet)"
        },
        // TypeScript specific rules
        {
            "name": "TypeScript operator keyword",
            "scope": "source.ts keyword.operator.type.extends, source.tsx keyword.operator.type.extends",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "TypeScript operator symbol",
            "scope": "source.ts storage.modifier.optional, source.tsx storage.modifier.optional, source.ts storage.modifier.definite, source.tsx storage.modifier.definite",
            "foreground": "var(operator_symbol)"
        },
        {
            "name": "TypeScript array punctuation",
            "scope": "source.ts storage.modifier.array, source.tsx storage.modifier.array",
            "foreground": "var(punctuation)"
        },
        {
            "name": "TypeScript decorator function",
            "scope": "source.ts meta.annotation variable.function, source.tsx meta.annotation variable.function",
            "foreground": "var(pink)"
        },
        // TypeScript specific rules >> https://packagecontrol.io/packages/TypeScript
        {
            "name": "TypeScript type",
            "scope": "source.ts entity.name.type.ts, source.tsx entity.name.type.tsx, source.ts entity.name.type.module.ts, source.tsx entity.name.type.module.tsx",
            "foreground": "var(type)"
        },
        {
            "name": "TypeScript operator keyword",
            "scope": "source.ts keyword.operator.new, source.tsx keyword.operator.new, source.ts keyword.operator.expression, source.tsx keyword.operator.expression",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "TypeScript decorator",
            "scope": "source.ts meta.decorator variable.other, source.tsx meta.decorator variable.other, source.ts meta.decorator entity.name.function, source.tsx meta.decorator entity.name.function, source.ts meta.decorator punctuation.decorator, source.tsx meta.decorator punctuation.decorator",
            "foreground": "var(pink)"
        },
        {
            "name": "TypeScript lambda function arrow",
            "scope": "source.ts storage.type.function.arrow, source.tsx storage.type.function.arrow",
            "foreground": "var(operator_symbol)"
        },
        {
            "name": "TypeScript import asterisk",
            "scope": "source.ts constant.language.import-export-all, source.tsx constant.language.import-export-all",
            "foreground": "var(textcolor)"
        },
        {
            "name": "TypeScript template string expression",
            "scope": "source.ts meta.template.expression - meta.template.expression string, source.tsx meta.template.expression - meta.template.expression string",
            "foreground": "var(textcolor)"
        },
        {
            "name": "JSDoc tag",
            "scope": "(source.ts | source.tsx) & comment.block.documentation storage.type.class.jsdoc",
            "foreground": "color(var(blue) alpha(0.6))"
        },
        {
            "name": "JSDoc keyword",
            "scope": "(source.ts | source.tsx) & comment.block.documentation & (keyword.operator.control.jsdoc | constant.language.access-type.jsdoc | constant.language.symbol-type.jsdoc)",
            "foreground": "color(var(blue) alpha(0.6))"
        },
        {
            "name": "JSDoc parameter",
            "scope": "(source.ts | source.tsx) & comment.block.documentation variable.other.jsdoc",
            "foreground": "color(var(orange) alpha(0.6))"
        },
        {
            "name": "JSDoc punctuation",
            "scope": "(source.ts | source.tsx) & comment.block.documentation variable.other.jsdoc & (punctuation | keyword.operator)",
            "foreground": "color(var(punctuation) alpha(0.6))"
        },
        {
            "name": "JSDoc type",
            "scope": "(source.ts | source.tsx) & comment.block.documentation entity.name.type.instance.jsdoc",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        {
            "name": "JSDoc link & email",
            "scope": "(source.ts | source.tsx) & comment.block.documentation & (variable.other.link.underline.jsdoc | constant.other.email.link.underline.jsdoc)",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        {
            "name": "JSDoc description",
            "scope": "(source.ts | source.tsx) & comment.block.documentation & (variable.other.description.jsdoc | constant.other.description.jsdoc)",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        {
            "name": "JSDoc invalid",
            "scope": "(source.ts | source.tsx) & comment.block.documentation & (invalid.illegal.syntax.jsdoc | invalid.illegal.type.jsdoc)",
            "foreground": "color(var(red) alpha(0.6))"
        },
        // VBScript specific rules >> https://packagecontrol.io/packages/VBScript
        {
            "name": "VBScript operator keyword",
            "scope": "source.vbs keyword.operator.asp",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "VBScript operator symbol",
            "scope": "source.vbs keyword.operator.js",
            "foreground": "var(operator_symbol)"
        },
        // Vue specific rules >> https://packagecontrol.io/packages/Vue%20Syntax%20Highlight
        {
            "name": "Vue tag attribute name punctuation",
            "scope": "text.html.vue meta.tag punctuation.definition.attribute",
            "foreground": "var(green)"
        },
        {
            "name": "Vue tag attribute value punctuation",
            "scope": "text.html.vue meta.tag punctuation.definition.string",
            "foreground": "var(orange)"
        },
        // YAML specific rules
        {
            "name": "YAML header reserved directive",
            "scope": "source.yaml meta.directive support.other.directive.reserved, source.yaml meta.directive string.unquoted",
            "foreground": "var(textcolor)"
        },
        {
            "name": "YAML header tag declaration",
            "scope": "source.yaml meta.directive support.type.tag-prefix",
            "foreground": "var(textcolor)"
        },
        {
            "name": "YAML tag",
            "scope": "source.yaml storage.type.tag-handle",
            "foreground": "var(purple)"
        },
        {
            "name": "YAML anchor punctuation",
            "scope": "source.yaml punctuation.definition.anchor",
            "foreground": "var(violet)"
        },
        // Plugin specific rules
        {
            "name": "Find in Files results panel line number context",
            "scope": "constant.numeric.line-number.find-in-files",
            "foreground": "color(var(green) alpha(0.4))"
        },
        // Anaconda specific rules >> https://packagecontrol.io/packages/Anaconda
        {
            "name": "Anaconda linter illegal",
            "scope": "anaconda.outline.illegal",
            "foreground": "var(red)"
        },
        {
            "name": "Anaconda linter warning",
            "scope": "anaconda.outline.warning",
            "foreground": "var(orange)"
        },
        {
            "name": "Anaconda linter violation",
            "scope": "anaconda.outline.violation",
            "foreground": "var(grey)"
        },
        {
            "name": "Anaconda linter underline",
            "scope": "anaconda.underline.illegal, anaconda.underline.warning, anaconda.underline.violation",
            "foreground": "var(red)"
        },
        // GitGutter specific rules >> https://packagecontrol.io/packages/GitGutter
        {
            "name": "GitGutter deleted",
            "scope": "markup.deleted.git_gutter",
            "foreground": "#F92672"
        },
        {
            "name": "GitGutter inserted",
            "scope": "markup.inserted.git_gutter",
            "foreground": "#A6E22E"
        },
        {
            "name": "GitGutter changed",
            "scope": "markup.changed.git_gutter",
            "foreground": "#967EFB"
        },
        {
            "name": "GitGutter ignored",
            "scope": "markup.ignored.git_gutter",
            "foreground": "#565656"
        },
        {
            "name": "GitGutter untracked",
            "scope": "markup.untracked.git_gutter",
            "foreground": "#565656"
        },
        // LSP specific rules >> https://packagecontrol.io/packages/LSP
        {
            "name": "LSP DocumentLink",
            "scope": "markup.underline.link.lsp",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        {
            "name": "LSP SemanticTokens",
            "scope": "meta.semantic-token",
            "background": "#00000001"
        },
        {
            "name": "LSP signature help popup",
            "scope": "entity.name.function.sighelp.lsp, variable.parameter.sighelp.lsp",
            "foreground": "var(textcolor)"
        },
        {
            "name": "LSP signature help popup highlighted parameter",
            "scope": "variable.parameter.sighelp.active.lsp",
            "foreground": "var(orange)"
        },
        {
            "name": "LSP log panel arrow",
            "scope": "output.lsp.log storage.modifier",
            "foreground": "var(textcolor)"
        },
        {
            "name": "LSP log panel arrow unhandled notification",
            "scope": "output.lsp.log invalid.deprecated",
            "foreground": "var(grey)"
        },
        {
            "name": "LSP log panel server name",
            "scope": "output.lsp.log variable.function",
            "foreground": "var(purple)"
        },
        {
            "name": "LSP diagnostics panel filename [ST3]",
            "scope": "output.lsp.diagnostics meta.diagnostic.preamble string",
            "foreground": "var(purple)"
        },
        {
            "name": "LSP references panel filename [ST3]",
            "scope": "output.lsp.references meta.reference.preamble entity.name.file",
            "foreground": "var(purple)"
        },
        // LSP-pyright specific rules >> https://packagecontrol.io/packages/LSP-pyright
        {
            "name": "LSP-pyright hover popup kind prefix",
            "scope": "source.python.lsp storage.type.python",
            "foreground": "var(textcolor)"
        },
        // OverrideAudit specific rules >> https://packagecontrol.io/packages/OverrideAudit
        {
            "name": "OverrideAudit warning/expired",
            "scope": "text.override-audit keyword.control.expired",
            "foreground": "var(orange)"
        },
        // PackageDev specific rules >> https://packagecontrol.io/packages/PackageDev
        {
            "name": "PackageDev JSON built-in key",
            "scope": "source.json.sublime meta.mapping.key & (keyword | support | constant.other | entity.name | storage.modifier)",
            "foreground": "var(violet)",
            "font_style": "italic"
        },
        {
            "name": "PackageDev JSON key",
            "scope": "source.json.sublime & (meta.variable-name punctuation.definition.string | meta.mapping.key entity.name.other.key.sublime-settings | meta.mapping.key keyword.other.namespace.sublime-settings)",
            "foreground": "var(violet)",
            "font_style": ""
        },
        {
            "name": "PackageDev JSON built-in value",
            "scope": "source.json.sublime meta.mapping.value & (support.constant | support.function.modifier.key | storage.type.context.key-value | keyword.operator.context.key-value | entity.other.attribute-name)",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "PackageDev JSON value",
            "scope": "source.json.sublime meta.mapping.value & (support.constant.command-name | entity.name.variant.sublime-build | entity.name.id.sublime-menu | entity.name.class-selector.sublime-theme | support.constant.mnemonic.sublime-menu | variable.other.setting.sublime-keymap | keyword.other.namespace.sublime-settings)",
            "foreground": "var(orange)",
            "font_style": ""
        },
        {
            "name": "PackageDev XML/PList keyword",
            "scope": "text.xml.plist.textmate.preferences & (meta.inside-dict-key.plist keyword | meta.inside-value.string.plist support)",
            "foreground": "var(violet)"
        },
        {
            "name": "PackageDev sublime-syntax operator keyword",
            "scope": "source.yaml.sublime.syntax keyword.operator.include.sublime-syntax",
            "foreground": "var(operator_keyword)"
        },
        {
            "name": "PackageDev sublime-syntax include file",
            "scope": "source.yaml.sublime.syntax support.module.file-path",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PackageDev sublime-syntax punctuation",
            "scope": "source.yaml.sublime.syntax source.regexp punctuation.definition.variable",
            "foreground": "var(punctuation)"
        },
        {
            "name": "PackageDev sublime-syntax regex character class",
            "scope": "source.yaml.sublime.syntax source.regexp support.class.character-class.regexp, source.yaml.sublime.syntax source.regexp keyword.other.character-class.property.regexp",
            "foreground": "var(violet)"
        },
        {
            "name": "PackageDev sublime-syntax regex unicode category",
            "scope": "source.yaml.sublime.syntax source.regexp keyword.other.character-class.property.regexp support.type.property.regexp",
            "foreground": "var(violet)"
        },
        {
            "name": "PackageDev sublime-syntax regex unrecognized unicode category",
            "scope": "source.yaml.sublime.syntax source.regexp keyword.other.character-class.property.regexp support.function.property.untested.regexp",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PackageDev sublime-syntax regex unicode category punctuation",
            "scope": "source.yaml.sublime.syntax source.regexp keyword.other.character-class.property.regexp punctuation.definition.property",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PackageDev string interpolation placeholder variable",
            "scope": "(source.json.sublime | text.xml.sublime) & (constant.other.placeholder | keyword.other.placeholder.dollar | keyword.other.block)",
            "foreground": "var(textcolor)",
            "font_style": ""
        },
        {
            "name": "PackageDev scope selector punctuation",
            "scope": "(source.json.sublime | text.xml.sublime | text.xml.plist.textmate.preferences) & punctuation.separator.scope-segments.scope-selector",
            "foreground": "var(orange)"
        },
        // SublimeGDB specific rules >> https://packagecontrol.io/packages/SublimeGDB
        {
            "name": "SublimeGDB breakpoint",
            "scope": "keyword.gdb - keyword.gdb.returncode",
            "foreground": "var(red2)"
        },
        // SublimeLinter specific rules >> https://packagecontrol.io/packages/SublimeLinter
        {
            "name": "SublimeLinter diagnostics message",
            "scope": "markup.quote.linter-message.sublime_linter",
            "foreground": "var(textcolor)"
        },
        // [x]it! specific rules >> https://packagecontrol.io/packages/xit!
        {
            "name": "[x]it! title",
            "scope": "source.xit markup.other.title",
            "font_style": "bold"
        },
        {
            "name": "[x]it! open checkbox",
            "scope": "source.xit markup.other.checkbox.open",
            "foreground": "var(blue)"
        },
        {
            "name": "[x]it! ongoing checkbox",
            "scope": "source.xit markup.other.checkbox.ongoing",
            "foreground": "var(violet)"
        },
        {
            "name": "[x]it! priority",
            "scope": "source.xit markup.other.priority",
            "font_style": "glow"
        },
        {
            "name": "[x]it! priority dimmed",
            "scope": "source.xit comment markup.other.priority",
            "foreground": "color(var(red2) alpha(0.6))"
        },
        {
            "name": "[x]it! due date",
            "scope": "source.xit markup.other.due_date",
            "foreground": "var(orange)"
        },
        {
            "name": "[x]it! due date dimmed",
            "scope": "source.xit comment markup.other.due_date",
            "foreground": "color(var(orange) alpha(0.6))"
        },
        {
            "name": "[x]it! tag",
            "scope": "source.xit markup.other.tag",
            "font_style": "italic"
        },
        {
            "name": "[x]it! tag name",
            "scope": "source.xit markup.other.tag.name",
            "foreground": "var(blue)"
        },
        {
            "name": "[x]it! tag name dimmed",
            "scope": "source.xit comment markup.other.tag.name",
            "foreground": "color(var(blue) alpha(0.6))"
        }
    ]
}
