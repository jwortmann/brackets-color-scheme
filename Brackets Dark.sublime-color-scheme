{
    "name": "Brackets Dark",
    "author": "Janos Wortmann",
    "variables":
    {
        "textcolor": "#ddd",
        "blue": "#6c9ef8",
        "green": "#85a300",
        "green2": "#292",
        "grey": "#767676",
        "orange": "#d89333",
        "pink": "#d85896",
        "purple": "#8087e5",
        "red": "#dc322f",
        "red2": "#d44",
        "violet": "#b77fdb",
        "--orangish": "#d89333",
        "--yellowish": "#d3cd69",
        "--cyanish": "#44cde5",
        "--bluish": "#6c9ef8"
    },
    "globals":
    {
        "background": "#1d1f21",
        "foreground": "var(textcolor)",
        "caret": "#c5c8c6",
        "block_caret": "rgba(253, 255, 253, 0.75)",
        "line_highlight": "rgba(65, 63, 61, 0.5)",
        "misspelling": "var(red)",
        "fold_marker": "color(var(grey) alpha(0.75))",
        "accent": "var(blue)",
        "gutter_foreground": "var(grey)",
        "gutter_foreground_highlight": "#fff",
        "line_diff_width": "3",
        "line_diff_added": "var(green2)",
        "line_diff_modified": "var(orange)",
        "line_diff_deleted": "var(red2)",
        "selection": "#0050a0",
        "inactive_selection": "#333f48",
        "selection_corner_style": "round",
        "selection_corner_radius": "2",
        "find_highlight": "#f6a644",
        "find_highlight_foreground": "#121212",
        "active_guide": "color(var(blue) alpha(0.5))",
        "stack_guide": "color(var(blue) alpha(0.25))",
        "brackets_options": "underline",
        "bracket_contents_options": "",
        "tags_options": "stippled_underline"
    },
    "rules":
    [
        {
            "name": "Module/class/type/method name",
            "scope": "entity.name",
            "foreground": "var(violet)"
        },
        {
            "name": "Section name",
            "scope": "entity.name.section",
            "foreground": "var(pink)"
        },
        {
            "name": "Constant",
            "scope": "entity.name.constant",
            "foreground": "var(textcolor)",
            "font_style": "italic"
        },
        {
            "name": "Filename",
            "scope": "entity.name.filename",
            "foreground": "var(purple)"
        },
        {
            "name": "Tag name",
            "scope": "entity.name.tag, punctuation.definition.tag",
            "foreground": "var(blue)"
        },
        {
            "name": "Tag attribute",
            "scope": "meta.tag entity.other.attribute-name - comment",
            "foreground": "var(green)"
        },
        {
            "name": "CSS selector class/id/attribute",
            "scope": "entity.other.attribute-name - meta.tag",
            "foreground": "var(blue)"
        },
        {
            "name": "Base class or interface",
            "scope": "entity.other.inherited-class",
            "foreground": "var(violet)",
            "font_style": "italic"
        },
        {
            "name": "Built-in variable",
            "scope": "variable.language",
            "foreground": "var(blue)"
        },
        {
            "name": "Function argument",
            "scope": "variable.parameter - meta.function-call - meta.annotation",
            "foreground": "var(orange)"
        },
        {
            "name": "Function call",
            "scope": "variable.function",
            "foreground": "var(violet)"
        },
        {
            "name": "Annotation",
            "scope": "variable.annotation, punctuation.definition.annotation",
            "foreground": "var(pink)"
        },
        {
            "name": "Misc variable",
            "scope": "variable.other",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Number",
            "scope": "constant.numeric, punctuation.separator.decimal",
            "foreground": "var(green)"
        },
        {
            "name": "Built-in constant",
            "scope": "constant.language",
            "foreground": "var(orange)"
        },
        {
            "name": "Escaped or special character",
            "scope": "constant.character",
            "foreground": "var(orange)"
        },
        {
            "name": "Misc constant",
            "scope": "constant.other",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Enum value",
            "scope": "constant.other.enum",
            "font_style": "italic"
        },
        {
            "name": "Type keyword",
            "scope": "storage.type",
            "foreground": "var(blue)"
        },
        {
            "name": "Numeric type suffix [ST3]",
            "scope": "storage.type.numeric",
            "foreground": "var(green)"
        },
        {
            "name": "Modifier keyword",
            "scope": "storage.modifier",
            "foreground": "var(blue)"
        },
        {
            "name": "Built-in or library construct",
            "scope": "support",
            "foreground": "var(blue)"
        },
        {
            "name": "Keyword",
            "scope": "keyword - keyword.operator, keyword.operator.word",
            "foreground": "var(blue)"
        },
        {
            "name": "Operator symbol",
            "scope": "keyword.operator",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Lambda function arrow",
            "scope": "keyword.declaration.function.arrow, keyword.declaration.function.anonymous",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Lambda function arrow [ST3]",
            "scope": "keyword.declaration.function.lambda",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Preprocessor directive",
            "scope": "keyword.control.directive, meta.preprocessor keyword.control.import, keyword.control.preprocessor, keyword.other.preprocessor",
            "foreground": "var(purple)"
        },
        {
            "name": "String",
            "scope": "string",
            "foreground": "var(orange)"
        },
        {
            "name": "Mapping key",
            "scope": "meta.mapping.key string",
            "foreground": "var(violet)"
        },
        {
            "name": "Punctuation",
            "scope": "punctuation.separator, punctuation.accessor, punctuation.terminator - constant.character.entity",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Comment",
            "scope": "comment, punctuation.definition.comment",
            "foreground": "var(grey)"
        },
        {
            "name": "Doc comment: HTML tag",
            "scope": "comment entity.name.tag, comment punctuation.definition.tag",
            "foreground": "color(var(blue) alpha(0.6))"
        },
        {
            "name": "Doc comment: HTML tag attribute",
            "scope": "comment entity.other.attribute-name",
            "foreground": "color(var(green) alpha(0.6))"
        },
        {
            "name": "Doc comment: string",
            "scope": "comment string",
            "foreground": "color(var(orange) alpha(0.6))"
        },
        {
            "name": "Doc comment: punctuation",
            "scope": "comment punctuation.separator",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        {
            "name": "Doc comment: tag/keyword",
            "scope": "comment keyword, comment storage.modifier",
            "foreground": "color(var(blue) alpha(0.6))"
        },
        {
            "name": "Doc comment: parameter",
            "scope": "comment.block.documentation variable.parameter",
            "foreground": "color(var(orange) alpha(0.6)"
        },
        {
            "name": "Doc comment: link",
            "scope": "comment markup.underline.link",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        {
            "name": "Invalid expression",
            "scope": "invalid.illegal",
            "foreground": "var(red)"
        },
        {
            "name": "Heading",
            "scope": "markup.heading - comment - markup.heading.subject.git",
            "foreground": "var(pink)"
        },
        {
            "name": "Inserted",
            "scope": "markup.inserted",
            "foreground": "var(green2)"
        },
        {
            "name": "Changed",
            "scope": "markup.changed",
            "foreground": "var(orange)"
        },
        {
            "name": "Deleted",
            "scope": "markup.deleted",
            "foreground": "var(red2)"
        },
        {
            "name": "Error",
            "scope": "markup.error",
            "foreground": "var(red)"
        },
        {
            "name": "Warning",
            "scope": "markup.warning",
            "foreground": "var(orange)"
        },
        {
            "name": "Info",
            "scope": "markup.info",
            "foreground": "var(blue)"
        },
        {
            "name": "LSP DocumentHighlight, Quick View Highlight",
            "scope": "markup.highlight",
            "background": "rgba(200, 200, 150, 0.2)"
        },
        {
            "name": "Inline diff inserted line",
            "scope": "diff.inserted",
            "background": "color(var(green2) alpha(0.15))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Inline diff inserted region",
            "scope": "diff.inserted.char",
            "background": "color(var(green2) alpha(0.4))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Inline diff deleted line",
            "scope": "diff.deleted",
            "background": "color(var(red2) alpha(0.15))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Inline diff deleted region",
            "scope": "diff.deleted.char",
            "background": "color(var(red2) alpha(0.4))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Sublime Merge side-by-side diff changed region",
            "scope": "diff.fill, diff.inserted.side-by-side, diff.deleted.side-by-side",
            "background": "color(#1d1f21 lightness(+ 3%))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Sublime Merge blame commit separator border",
            "scope": "blame.border",
            "background": "#3a3c3d"
        },
        {
            "name": "Sublime Merge merge conflict left view line",
            "scope": "diff.inserted.merge-left",
            "background": "color(var(green2) alpha(0.15))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Sublme Merge merge conflict left view region",
            "scope": "diff.inserted.char.merge-left",
            "background": "color(var(green2) alpha(0.4))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Sublime Merge merge conflict left view unrelated change border",
            "scope": "diff.border.merge-left",
            "background": "color(var(green2) alpha(0.4))"
        },
        {
            "name": "Sublime Merge merge conflict right view line",
            "scope": "diff.inserted.merge-right",
            "background": "color(var(blue) alpha(0.15))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Sublme Merge merge conflict right view region",
            "scope": "diff.inserted.char.merge-right",
            "background": "color(var(blue) alpha(0.4))",
            "foreground_adjust": "lightness(+ 5%)"
        },
        {
            "name": "Sublime Merge merge conflict right view unrelated change border",
            "scope": "diff.border.merge-right",
            "background": "color(var(blue) alpha(0.4))"
        },
        {
            "name": "Sublime Merge unresolved merge conflict border",
            "scope": "diff.border.merge-conflict",
            "background": "color(var(red2) alpha(0.4))"
        },
        {
            "name": "Sublime Merge resolved merge conflict border",
            "scope": "diff.border.merge-merged",
            "background": "color(var(green2) alpha(0.4))"
        },
        // ActionScript specific rules
        {
            "name": "ActionScript keyword",
            "scope": "keyword.operator.actionscript.2",
            "foreground": "var(blue)"
        },
        // AHK specific rules >> https://packagecontrol.io/packages/AutoHotkey
        {
            "name": "AHK preprocessor directive",
            "scope": "preprocessordirective.ahk keyword.control.ahk, keyword.control.import.ahk",
            "foreground": "var(purple)"
        },
        // Apache specific rules >> https://packagecontrol.io/packages/ApacheConf
        {
            "name": "Apache tag",
            "scope": "entity.tag.apacheconf",
            "foreground": "var(blue)"
        },
        {
            "name": "Apache keyword",
            "scope": "entity.status.apacheconf, entity.helper.apacheconf",
            "foreground": "var(blue)"
        },
        // ASP specific rules
        {
            "name": "ASP logical operator keyword",
            "scope": "keyword.operator.logical.asp",
            "foreground": "var(blue)"
        },
        // C# specific rules
        {
            "name": "C# keyword",
            "scope": "keyword.operator.new.cs, keyword.operator.reflection.cs",
            "foreground": "var(blue)"
        },
        {
            "name": "C# arrow operator",
            "scope": "storage.type.function.lambda.cs",
            "foreground": "var(textcolor)"
        },
        {
            "name": "C# arrow operator [ST3]",
            "scope": "storage.type.function.cs",
            "foreground": "var(textcolor)"
        },
        // Clojure specific rules
        {
            "name": "Clojure ratio",
            "scope": "punctuation.separator.ratio.clojure",
            "foreground": "var(green)"
        },
        {
            "name": "Clojure Regex string",
            "scope": "string.regexp.clojure - punctuation.definition.string",
            "foreground": "var(textcolor)"
        },
        // CoffeeScript specific rules >> https://packagecontrol.io/packages/Better%20CoffeeScript
        {
            "name": "CoffeeScript string interpolation",
            "scope": "source.coffee.embedded",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CoffeeScript keyword",
            "scope": "keyword.operator.new.coffee",
            "foreground": "var(blue)"
        },
        {
            "name": "CoffeeScript lambda function arrow",
            "scope": "storage.type.function.coffee",
            "foreground": "var(textcolor)"
        },
        // CSS specific rules
        {
            "name": "CSS selector pseudo-class/element",
            "scope": "entity.other.pseudo-class, entity.other.pseudo-element",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS namespace prefix",
            "scope": "entity.other.namespace-prefix.css",
            "foreground": "var(blue)"
        },
        {
            "name": "CSS property name",
            "scope": "support.type.property-name.css, support.type.property-name.media.css",
            "foreground": "var(violet)"
        },
        {
            "name": "CSS hex-color",
            "scope": "constant.other.color.rgb-value.css, constant.other.color.rgba-value.css",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS special color keyword",
            "scope": "support.constant.color.w3c-special-color-keyword.css",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS font name keyword",
            "scope": "support.constant.font-name.css",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS media type",
            "scope": "support.constant.media.css",
            "foreground": "var(green)"
        },
        {
            "name": "CSS property value",
            "scope": "support.constant.property-value.css",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS unquoted font name",
            "scope": "meta.property-value.css string.unquoted.css - meta.function-call",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS unit suffix",
            "scope": "keyword.other.unit.css",
            "foreground": "var(green)"
        },
        {
            "name": "CSS variable",
            "scope": "support.type.custom-property.css",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS function call",
            "scope": "source.css support.function",
            "foreground": "var(orange)"
        },
        {
            "name": "CSS at-rule",
            "scope": "keyword.control.at-rule, keyword.control.at-rule support.type.property-vendor.css",
            "foreground": "var(violet)"
        },
        {
            "name": "CSS logical operator keyword",
            "scope": "keyword.operator.logic.css, keyword.operator.logic.media.css",
            "foreground": "var(blue)"
        },
        {
            "name": "CSS vendor prefix",
            "scope": "support.type.vendor-prefix.css",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS wildcard asterisk",
            "scope": "entity.name.tag.wildcard.css",
            "foreground": "var(textcolor)"
        },
        // CSS specific rules >> https://packagecontrol.io/packages/CSS3
        {
            "name": "CSS selector pseudo-class/element",
            "scope": "entity.other.attribute-name.pseudo-class, entity.other.attribute-name.pseudo-element",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS unquoted font name",
            "scope": "meta.property-value.font-family.css string.unquoted.identifier.css",
            "foreground": "var(textcolor)"
        },
        {
            "name": "CSS variable",
            "scope": "support.type.property-name.custom.css",
            "foreground": "var(textcolor)"
        },
        // D specific rules
        {
            "name": "D numeric base prefix [ST3]",
            "scope": "punctuation.definition.numeric.binary.d, punctuation.definition.numeric.hexadecimal.d",
            "foreground": "var(green)"
        },
        {
            "name": "D numeric type suffix [ST3]",
            "scope": "storage.type.integer.d, storage.type.float.d",
            "foreground": "var(green)"
        },
        // Dart specific rules >> https://packagecontrol.io/packages/Dart
        {
            "name": "Dart class/function definition",
            "scope": "class.name.dart, function.name.dart",
            "foreground": "var(violet)"
        },
        {
            "name": "Dart annotation",
            "scope": "entity.name.function.annotation.dart, annotation.dart support",
            "foreground": "var(pink)"
        },
        {
            "name": "Dart string interpolation",
            "scope": "string.interpolated & (interpolation.dart | keyword.other.dart | variable.parameter.dart)",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Dart ternary operator",
            "scope": "keyword.control.ternary.dart",
            "foreground": "var(textcolor)"
        },
        // Diff specific rules
        {
            "name": "Diff header from-file",
            "scope": "meta.diff.header.from-file",
            "foreground": "var(red2)"
        },
        {
            "name": "Diff header to-file",
            "scope": "meta.diff.header.to-file",
            "foreground": "var(green2)"
        },
        {
            "name": "Diff index",
            "scope": "meta.diff.index",
            "foreground": "var(blue)"
        },
        {
            "name": "Diff range information",
            "scope": "meta.diff.range",
            "foreground": "var(grey)"
        },
        {
            "name": "Diff separator line",
            "scope": "meta.separator.diff",
            "foreground": "var(violet)"
        },
        // Dockerfile specific rules >> https://packagecontrol.io/packages/Dockerfile%20Syntax%20Highlighting
        {
            "name": "Dockerfile CMD/ENTRYPOINT instruction",
            "scope": "keyword.operator.dockerfile",
            "foreground": "var(blue)"
        },
        // DotENV specific rules >> https://packagecontrol.io/packages/DotENV
        {
            "name": "DotENV key",
            "scope": "variable.other.env - string",
            "foreground": "var(violet)"
        },
        {
            "name": "DotENV template punctuation",
            "scope": "source.env string.interpolated keyword.other.template",
            "foreground": "var(textcolor)"
        },
        // EditorConfig specific rules >> https://packagecontrol.io/packages/INI
        {
            "name": "EditorConfig key",
            "scope": "source.ini.editorconfig meta.mapping.key variable.language",
            "foreground": "var(violet)",
            "font_style": "italic"
        },
        // Elixir specific rules >> https://packagecontrol.io/packages/Elixir
        {
            "name": "Elixir operator keyword",
            "scope": "keyword.operator.elixir",
            "foreground": "var(blue)"
        },
        // Erlang specific rules
        {
            "name": "Erlang bitwise operator keyword",
            "scope": "keyword.operator.bitwise.erlang",
            "foreground": "var(blue)"
        },
        // F# specific rules >> https://packagecontrol.io/packages/F%23
        {
            "name": "F# operator symbol",
            "scope": "keyword.symbol.fsharp",
            "foreground": "var(textcolor)"
        },
        {
            "name": "F# annotation",
            "scope": "support.function.attribute.fsharp",
            "foreground": "var(pink)"
        },
        {
            "name": "F# placeholder in string",
            "scope": "keyword.format.specifier.fsharp",
            "foreground": "var(textcolor)"
        },
        // Fortran specific rules >> https://packagecontrol.io/packages/ModernFortran
        {
            "name": "Fortran label",
            "scope": "source.fortran entity.name.label",
            "foreground": "var(pink)"
        },
        {
            "name": "Fortran built-in function",
            "scope": "source.fortran variable.function.function.intrinsic, source.fortran variable.function.subroutine.intrinsic",
            "foreground": "var(blue)"
        },
        {
            "name": "Fortran variable or function identifier",
            "scope": "source.fortran variable.function",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Fortran user-defined class name",
            "scope": "source.fortran storage.type.class",
            "foreground": "var(textcolor)"
        },
        // Fortran specific rules >> https://packagecontrol.io/packages/Fortran
        {
            "name": "Fortran subroutine call",
            "scope": "source.modern-fortran support.function.any-method",
            "foreground": "var(violet)"
        },
        {
            "name": "Fortran logical operator keyword",
            "scope": "source.modern-fortran keyword.operator.logical, source.fixedform-fortran keyword.operator.logical",
            "foreground": "var(blue)"
        },
        {
            "name": "Fortran punctuation",
            "scope": "source.modern-fortran keyword.control.double-colon, source.modern-fortran support.constant.line-continuation",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Fortran format string",
            "scope": "source.modern-fortran meta.format-string constant.numeric.format-descriptor",
            "foreground": "var(orange)"
        },
        // Git specific rules
        {
            "name": "Git commit hash",
            "scope": "text.git constant.other.hash",
            "foreground": "var(green)"
        },
        {
            "name": "Git keyword",
            "scope": "text.git keyword.operator - text.git.config, text.git keyword.other",
            "foreground": "var(blue)"
        },
        {
            "name": "Git branch name",
            "scope": "text.git constant.language.branch-name",
            "foreground": "var(violet)"
        },
        {
            "name": "Git email angle brackets",
            "scope": "text.git punctuation.definition.reference.email",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Git email @-symbol & dot",
            "scope": "text.git punctuation.separator.email",
            "foreground": "var(violet)"
        },
        {
            "name": "Git Config key",
            "scope": "text.git meta.mapping.key variable.other",
            "foreground": "var(violet)"
        },
        {
            "name": "Git Rebase commit subject",
            "scope": "text.git string.unquoted.subject",
            "foreground": "var(textcolor)"
        },
        // Gnuplot specific rules >> https://packagecontrol.io/packages/Gnuplot
        {
            "name": "Gnuplot brackets",
            "scope": "punctuation.definition.range.begin.gnuplot, punctuation.definition.range.end.gnuplot",
            "foreground": "var(textcolor)"
        },
        // Go specific rules
        {
            "name": "Go floating point exponent separator [ST3]",
            "scope": "punctuation.separator.exponent.go",
            "foreground": "var(green)"
        },
        // Graphviz specific rules
        {
            "name": "Graphviz cluster subgraph",
            "scope": "variable.annotation.cluster.dot",
            "foreground": "var(violet)"
        },
        // Groovy specific rules
        {
            "name": "Groovy keyword",
            "scope": "keyword.operator.instanceof.groovy, keyword.operator.as.groovy, keyword.operator.is.groovy",
            "foreground": "var(blue)"
        },
        {
            "name": "Groovy string interpolation",
            "scope": "string source.groovy.embedded.source - string source.groovy.embedded.source string",
            "foreground": "var(textcolor)"
        },
        // Handlebars specific rules >> https://packagecontrol.io/packages/Handlebars
        {
            "name": "Handlebars inline-script tag attribute",
            "scope": "source.handlebars.embedded entity.other.attribute-name",
            "foreground": "var(green)"
        },
        {
            "name": "Handlebars template",
            "scope": "variable.parameter.handlebars, entity.other.attribute-name.handlebars",
            "foreground": "var(textcolor)"
        },
        // Haskell specific rules
        {
            "name": "Haskell arrow",
            "scope": "keyword.other.arrow.haskell, keyword.other.big-arrow.haskell",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Haskell double-colon",
            "scope": "keyword.other.double-colon.haskell",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Haskell import module",
            "scope": "meta.import support.other.module.haskell",
            "foreground": "var(textcolor)"
        },
        // Java specific rules
        {
            "name": "Java constant",
            "scope": "constant.other.java",
            "font_style": "italic"
        },
        {
            "name": "Java lambda function arrow",
            "scope": "storage.type.function.anonymous.java",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Java import classname",
            "scope": "support.class.import.java",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Java namespace",
            "scope": "support.type.package.java",
            "foreground": "var(textcolor)"
        },
        {
            "name": "JavaDoc inline-tag punctuation",
            "scope": "comment.block.documentation.javadoc punctuation.section.inline-tag",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        {
            "name": "JavaDoc code",
            "scope": "comment.block.documentation.javadoc markup.raw",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        {
            "name": "JavaDoc HTML entity",
            "scope": "comment.block.documentation.javadoc constant.character.entity",
            "foreground": "color(var(orange) alpha(0.6))"
        },
        // JavaScript specific rules
        {
            "name": "JavaScript keyword",
            "scope": "keyword.operator.js",
            "foreground": "var(blue)"
        },
        {
            "name": "JavaScript mapping key",
            "scope": "meta.object-literal.key.js, meta.object-literal.key.js string, meta.object-literal.key.dollar.js, meta.object-literal.key.dollar.only.js",
            "foreground": "var(violet)"
        },
        {
            "name": "JavaScript lambda function arrow [ST3]",
            "scope": "storage.type.function.arrow.js",
            "foreground": "var(textcolor)"
        },
        {
            "name": "JavaScript constructor",
            "scope": "entity.name.function.constructor.js",
            "foreground": "var(blue)"
        },
        {
            "name": "JavaScript constant",
            "scope": "variable.other.constant.js",
            "font_style": "italic"
        },
        {
            "name": "JavaScript annotation",
            "scope": "meta.annotation variable.other.readwrite.js",
            "foreground": "var(pink)"
        },
        {
            "name": "JavaScript user-defined class",
            "scope": "support.class.js",
            "foreground": "var(textcolor)"
        },
        {
            "name": "JavaScript Regex string",
            "scope": "string.regexp.js - punctuation.definition.string",
            "foreground": "var(textcolor)"
        },
        {
            "name": "JavaScript Regex string mode modifier",
            "scope": "string.regexp.js keyword.other.js",
            "foreground": "var(orange)"
        },
        {
            "name": "Regex (JavaScript) unicode property",
            "scope": "string.regexp.js support.constant.unicode-property.regexp",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Regex (JavaScript) character class ",
            "scope": "string.regexp.js constant.other.character-class.escape.backslash.regexp, string.regexp.js constant.other.character-class.escape.unicode-property.regexp",
            "foreground": "var(violet)"
        },
        {
            "name": "JSDoc tag",
            "scope": "comment.block.documentation entity.other.attribute-name.documentation.js",
            "foreground": "color(var(blue) alpha(0.6))"
        },
        // JavaScript specific rules >> https://packagecontrol.io/packages/Babel
        {
            "name": "JavaScript keyword",
            "scope": "keyword.operator.new.js, keyword.operator.module.js",
            "foreground": "var(blue)"
        },
        {
            "name": "JavaScript mapping key",
            "scope": "constant.other.object.key.js string.unquoted.label.js",
            "foreground": "var(violet)"
        },
        {
            "name": "JavaScript template string punctuation",
            "scope": "string.interpolated.js keyword.other.template",
            "foreground": "var(orange)"
        },
        {
            "name": "JavaScript template string interpolation",
            "scope": "string.interpolated.js keyword.other.substitution",
            "foreground": "var(textcolor)"
        },
        {
            "name": "JSX tag attribute",
            "scope": "meta.jsx entity.other.attribute-name",
            "foreground": "var(green)"
        },
        // JSON specific rules >> https://packagecontrol.io/packages/Babel
        {
            "name": "JSON mapping key",
            "scope": "meta.structure.dictionary.json string, meta.structure.dictionary.json meta.structure.dictionary.json string, meta.structure.dictionary.json meta.structure.dictionary.json meta.structure.dictionary.json string",
            "foreground": "var(violet)"
        },
        {
            "name": "JSON mapping value",
            "scope": "meta.structure.dictionary.value.json string, meta.structure.dictionary.value.json meta.structure.dictionary.value.json string, meta.structure.dictionary.value.json meta.structure.dictionary.value.json meta.structure.dictionary.value.json string",
            "foreground": "var(orange)"
        },
        // Julia specific rules >> https://packagecontrol.io/packages/Julia
        {
            "name": "Julia macro",
            "scope": "variable.macro.julia, punctuation.definition.macro.julia, support.function.macro.julia",
            "foreground": "var(purple)"
        },
        // Kotlin specific rules >> https://packagecontrol.io/packages/Kotlin
        {
            "name": "Kotlin built-in variable",
            "scope": "constant.language.kotlin",
            "foreground": "var(blue)"
        },
        {
            "name": "Kotlin variable definition",
            "scope": "entity.name.variable.kotlin",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Kotlin constant",
            "scope": "constant.other.kotlin",
            "font_style": "italic"
        },
        // Laravel Blade specific rules >> https://packagecontrol.io/packages/Laravel%20Blade%20Highlighter
        {
            "name": "Laravel Blade template directive",
            "scope": "text.html.blade punctuation.section.embedded & (entity.name.tag.block.any.html | constant.other.inline-data.html)",
            "foreground": "var(purple)"
        },
        {
            "name": "Laravel Blade template custom directive",
            "scope": "text.html.blade custom.compiler.blade.php & (support.function | support.function constant.other.inline-data.html)",
            "foreground": "var(blue)"
        },
        // LaTeX specific rules
        {
            "name": "LaTeX citation/reference/label",
            "scope": "constant.other.citation.latex, constant.other.reference.latex, entity.name.label.latex",
            "foreground": "var(violet)"
        },
        {
            "name": "LaTeX array column count parameter",
            "scope": "constant.numeric.array-count.latex",
            "foreground": "var(textcolor)"
        },
        {
            "name": "LaTeX number",
            "scope": "constant.numeric.math.tex",
            "foreground": "var(textcolor)"
        },
        {
            "name": "LaTeX newline spacing parameter",
            "scope": "constant.numeric.newline.latex",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX inline math punctuation",
            "scope": "string.other.math.latex",
            "foreground": "var(green)"
        },
        {
            "name": "LaTeX brackets",
            "scope": "constant.character.parenthesis.tex, constant.character.bracket.tex, punctuation.definition.group.brace.begin.latex, punctuation.definition.group.brace.end.latex",
            "foreground": "var(textcolor)"
        },
        {
            "name": "LaTeX escaped brace character",
            "scope": "constant.character.brace.escape.tex",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX whitespace character",
            "scope": "constant.character.space.tex, constant.character.escape.tex",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX array delimiter",
            "scope": "constant.character.ampersand.tex, constant.character.newline.latex",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX command or operator declaration",
            "scope": "entity.name.newcommand.latex, entity.name.declare-math-operator.latex, entity.name.definition.tex",
            "foreground": "var(blue)"
        },
        {
            "name": "LaTeX option parameter",
            "scope": "variable.parameter.bracket.latex",
            "foreground": "var(textcolor)"
        },
        {
            "name": "BibTeX citation-key",
            "scope": "entity.name.type.entry-key.bibtex",
            "foreground": "var(pink)"
        },
        {
            "name": "BibTeX field name",
            "scope": "string.unquoted.key.bibtex",
            "foreground": "var(violet)"
        },
        {
            "name": "BibTeX brace character",
            "scope": "string.quoted.other.braces.bibtex punctuation.definition.string",
            "foreground": "var(textcolor)"
        },
        // Lisp specific rules
        {
            "name": "Lisp operator keyword",
            "scope": "keyword.operator.logical.lisp, keyword.operator.bitwise.lisp",
            "foreground": "var(blue)"
        },
        // LESS specific rules >> https://packagecontrol.io/packages/LESS
        {
            "name": "LESS logical operator keyword",
            "scope": "keyword.operator.logic.mixin.less",
            "foreground": "var(blue)"
        },
        // Lua specific rules
        {
            "name": "Lua logical operator keyword",
            "scope": "keyword.operator.logical.lua",
            "foreground": "var(blue)"
        },
        // Markdown specific rules
        {
            "name": "Markdown blockquote",
            "scope": "text.html.markdown markup.quote",
            "foreground": "var(blue)"
        },
        {
            "name": "Markdown code",
            "scope": "text.html.markdown markup.raw",
            "foreground": "var(grey)"
        },
        {
            "name": "Markdown fenced code block with syntax highlighting",
            "scope": "text.html.markdown markup.raw.code-fence - markup.raw.code-fence.markdown-gfm",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Markdown fenced code block punctuation",
            "scope": "text.html.markdown punctuation.definition.raw.code-fence",
            "foreground": "var(grey)"
        },
        {
            "name": "Markdown fenced code block language",
            "scope": "text.html.markdown meta.code-fence constant.other.language-name",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        {
            "name": "Markdown horizontal rule",
            "scope": "text.html.markdown punctuation.definition.thematic-break",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown link text & image description",
            "scope": "text.html.markdown meta.link.inline.description, text.html.markdown meta.link.reference.description, text.html.markdown meta.link.reference.literal.description, text.html.markdown entity.name.reference.link, text.html.markdown meta.image.inline.description, text.html.markdown meta.image.reference.description",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown link & image url",
            "scope": "text.html.markdown markup.underline.link",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown footnote id",
            "scope": "text.html.markdown meta.link.reference.literal.footnote-id",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown reference-style link & image id",
            "scope": "text.html.markdown meta.link.reference constant.other.reference.link, text.html.markdown meta.image.reference constant.other.reference.link",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown inline link & image attribute",
            "scope": "text.html.markdown entity.other.attribute-name.markdown",
            "foreground": "var(pink)"
        },
        {
            "name": "Markdown link text & image description punctuation",
            "scope": "text.html.markdown punctuation.definition.link - meta.link.inet - meta.link.email - meta.link.reference.def - meta.image.inline, text.html.markdown punctuation.definition.image, text.html.markdown meta.link.reference.def punctuation.definition.constant",
            "foreground": "color(var(violet) alpha(0.6))"
        },
        {
            "name": "Markdown link & image url punctuation",
            "scope": "text.html.markdown punctuation.definition.metadata",
            "foreground": "color(var(orange) alpha(0.6))"
        },
        {
            "name": "Markdown reference-style link & image id punctuation",
            "scope": "text.html.markdown punctuation.definition.constant - meta.link.reference.def",
            "foreground": "color(var(orange) alpha(0.6))"
        },
        {
            "name": "Markdown automatic link & email punctuation",
            "scope": "text.html.markdown meta.link.inet punctuation.definition.link, text.html.markdown meta.link.email punctuation.definition.link, text.html.markdown meta.link.reference.def punctuation.definition.link, text.html.markdown meta.image.inline punctuation.definition.link",
            "foreground": "color(var(orange) alpha(0.6))"
        },
        {
            "name": "Markdown inline link & image attributes punctuation",
            "scope": "text.html.markdown punctuation.definition.attributes",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        // Markdown specific rules >> https://packagecontrol.io/packages/Markdown%20Extended
        {
            "name": "Markdown fenced code block with syntax highlighting",
            "scope": "text.html.markdown markup.raw.block.fenced & (source | text.html.basic | text.xml)",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Markdown fenced code block language",
            "scope": "text.html.markdown markup.raw.block.fenced variable.language.fenced",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        {
            "name": "Markdown horizontal rule",
            "scope": "text.html.markdown meta.separator.markdown",
            "foreground": "var(orange)"
        },
        {
            "name": "Markdown link text & image description",
            "scope": "text.html.markdown string.other.link.title.markdown, text.html.markdown string.other.link.description.markdown, text.html.markdown meta.link.reference.def constant.other.reference.link",
            "foreground": "var(violet)"
        },
        {
            "name": "Markdown link text & image description punctuation",
            "scope": "text.html.markdown meta.link punctuation.definition.string - string, text.html.markdown meta.image punctuation.definition.string - string",
            "foreground": "color(var(violet) alpha(0.6))"
        },
        // Matlab specific rules
        {
            "name": "Matlab built-in function",
            "scope": "keyword.operator.matlab",
            "foreground": "var(blue)"
        },
        {
            "name": "Matlab built-in variable",
            "scope": "variable.other.function.matlab",
            "foreground": "var(blue)"
        },
        // NGINX specific rules >> https://packagecontrol.io/packages/nginx
        {
            "name": "NGINX context",
            "scope": "storage.type.context.nginx - meta.context.upstream",
            "foreground": "var(violet)"
        },
        {
            "name": "NGINX unknown directive",
            "scope": "keyword.directive.module.unsupported.nginx",
            "foreground": "var(textcolor)"
        },
        {
            "name": "NGINX IP address",
            "scope": "string.ipaddress.nginx",
            "foreground": "var(green)"
        },
        // OCaml specific rules
        {
            "name": "OCaml preprocessor directive",
            "scope": "keyword.other.directive.ocaml, keyword.other.directive.line-number.ocaml",
            "foreground": "var(purple)"
        },
        // Perl specific rules
        {
            "name": "Perl arrow",
            "scope": "keyword.accessor.arrow.perl",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Perl Pod misc",
            "scope": "source.perl comment.block.documentation & (entity.name.label | constant.character.escape | string.unquoted | markup.heading | markup.underline.link | markup.quote | markup.bold | markup.italic)",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        // PHP specific rules
        {
            "name": "PHP keyword",
            "scope": "keyword.operator.type.php",
            "foreground": "var(blue)"
        },
        {
            "name": "PHP punctuation",
            "scope": "punctuation.definition.expression.php, punctuation.section.block.begin.php, punctuation.section.block.end.php, punctuation.section.brackets.begin.php, punctuation.section.brackets.end.php, punctuation.section.embedded.begin.php, punctuation.section.embedded.end.php, punctuation.section.group.begin.php, punctuation.section.group.end.php",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PHP user-defined class",
            "scope": "support.class.php",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PHP library constant",
            "scope": "support.constant.core.php, support.constant.std.php, support.constant.ext.php, support.constant.parser-token.php",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "PHP ampersand reference punctuation",
            "scope": "storage.modifier.reference.php",
            "foreground": "var(textcolor)"
        },
        // PowerShell specific rules >> https://packagecontrol.io/packages/PowerShell
        {
            "name": "PowerShell operator keyword",
            "scope": "keyword.operator.comparison.powershell, keyword.operator.unary.powershell, keyword.operator.logical.powershell, keyword.operator.bitwise.powershell, keyword.operator.string-format.powershell",
            "foreground": "var(blue)"
        },
        {
            "name": "PowerShell variable punctuation",
            "scope": "keyword.other.variable.definition.powershell",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PowerShell at-symbol",
            "scope": "keyword.other.array.begin.powershell, keyword.other.hashtable.begin.powershell",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PowerShell semicolon",
            "scope": "keyword.other.statement-separator.powershell",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PowerShell documentation header",
            "scope": "source.powershell comment.documentation.embedded keyword.operator",
            "foreground": "color(var(pink) alpha(0.6))"
        },
        {
            "name": "PowerShell string interpolation bracket",
            "scope": "string.quoted.double.powershell punctuation.section",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PowerShell attribute",
            "scope": "support.function.attribute.powershell, meta.attribute.powershell punctuation.section.bracket",
            "foreground": "var(pink)"
        },
        {
            "name": "PowerShell attribute argument",
            "scope": "variable.parameter.attribute.powershell",
            "foreground": "var(blue)"
        },
        // Python specific rules
        {
            "name": "Python import statement punctuation/asterisk",
            "scope": "keyword.control.import.relative.python, constant.language.import-all.python",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Python logical operator keyword",
            "scope": "keyword.operator.logical.python",
            "foreground": "var(blue)"
        },
        {
            "name": "Python dict unquoted key",
            "scope": "meta.mapping.key.python meta.generic-name.python",
            "foreground": "var(violet)"
        },
        {
            "name": "Python decorator",
            "scope": "variable.annotation support.function.builtin.python, meta.annotation meta.generic-name.python - meta.annotation.arguments",
            "foreground": "var(pink)"
        },
        {
            "name": "Python constant",
            "scope": "variable.other.constant.python",
            "font_style": "italic"
        },
        // Python specific rules >> https://packagecontrol.io/packages/Python%203
        {
            "name": "Python logical operator keyword",
            "scope": "keyword.operator.bool.logical.python.3",
            "foreground": "var(blue)"
        },
        {
            "name": "Python decorator",
            "scope": "meta.function.decorator support.function.decorator.python.3",
            "foreground": "var(pink)"
        },
        // Python specific rules >> https://packagecontrol.io/packages/MagicPython
        {
            "name": "Python decorator",
            "scope": "meta.function.decorator entity.name.function.decorator.python, meta.function.decorator support.type.python",
            "foreground": "var(pink)"
        },
        {
            "name": "Python constant",
            "scope": "constant.other.caps.python",
            "font_style": "italic"
        },
        // Python specific rules >> https://packagecontrol.io/packages/Python%20Improved
        {
            "name": "Python constant",
            "scope": "constant.other.allcaps.python",
            "font_style": "italic"
        },
        // R specific rules
        {
            "name": "R operator symbol",
            "scope": "source.r keyword.other",
            "foreground": "var(textcolor)"
        },
        {
            "name": "R code section comment",
            "scope": "source.r comment entity.name.section",
            "foreground": "color(var(pink) alpha(0.6))"
        },
        {
            "name": "R doc comment tag",
            "scope": "source.r comment keyword.other",
            "foreground": "color(var(blue) alpha(0.6))"
        },
        {
            "name": "R doc comment parameter",
            "scope": "source.r comment variable.parameter",
            "foreground": "color(var(orange) alpha(0.6)"
        },
        // Regular Expression specific rules
        {
            "name": "Regex string",
            "scope": "string source.regexp",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Regex metacharacter",
            "scope": "keyword.operator.quantifier.regexp, keyword.operator.alternation.regexp, keyword.operator.or.regexp, keyword.operator.negation.regexp, keyword.operator.intersection.regexp",
            "foreground": "var(blue)"
        },
        {
            "name": "Regex group & character set parens/brackets",
            "scope": "keyword.control.group.regexp, keyword.control.set.regexp",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Regex non-capturing group & assertion",
            "scope": "punctuation.definition.group.no-capture.regexp, constant.other.assertion.regexp, punctuation.definition.group.assertion.regexp",
            "foreground": "var(blue)"
        },
        {
            "name": "Regex character class",
            "scope": "keyword.control.character-class.regexp, keyword.other.any.regexp",
            "foreground": "var(violet)"
        },
        {
            "name": "Regex character class [PHP, Python]",
            "scope": "constant.character.character-class.regexp",
            "foreground": "var(violet)"
        },
        {
            "name": "Regex POSIX character class",
            "scope": "constant.other.posix-class.regexp",
            "foreground": "var(violet)"
        },
        {
            "name": "Regex back-reference",
            "scope": "keyword.other.backref-and-recursion.regexp variable.other.backref-and-recursion.regexp",
            "foreground": "var(blue)"
        },
        {
            "name": "Regex named capture group",
            "scope": "entity.name.capture-group.regexp",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Regex Replace case conversion",
            "scope": "keyword.operator.case-conversion.regexp-replace",
            "foreground": "var(blue)"
        },
        // reStructuredText specific rules
        {
            "name": "RST link label",
            "scope": "string.other.link.title.restructuredtext",
            "foreground": "var(violet)"
        },
        {
            "name": "RST link label punctuation",
            "scope": "punctuation.definition.link.restructuredtext - meta.link.reference.def - meta.link.footnote.def - meta.link.citation.def, punctuation.definition.string.restructuredtext",
            "foreground": "var(violet)"
        },
        {
            "name": "RST link target",
            "scope": "markup.underline.link.restructuredtext",
            "foreground": "var(orange)"
        },
        {
            "name": "RST footnote label",
            "scope": "text.restructuredtext meta.link.footnote constant.other.footnote.link",
            "foreground": "var(blue)"
        },
        {
            "name": "RST footnote label punctuation",
            "scope": "meta.link.footnote punctuation.definition.constant.restructuredtext",
            "foreground": "var(blue)"
        },
        {
            "name": "RST citation label",
            "scope": "text.restructuredtext meta.link.citation constant.other.citation.link",
            "foreground": "var(blue)"
        },
        {
            "name": "RST citation label punctuation",
            "scope": "meta.link.citation punctuation.definition.constant.restructuredtext",
            "foreground": "var(blue)"
        },
        {
            "name": "RST directive",
            "scope": "meta.other.directive.restructuredtext - punctuation",
            "foreground": "var(blue)"
        },
        {
            "name": "RST field name punctuation",
            "scope": "punctuation.definition.field.restructuredtext",
            "foreground": "var(textcolor)"
        },
        {
            "name": "RST interpreted text",
            "scope": "markup.other.command.restructuredtext",
            "foreground": "var(orange)"
        },
        {
            "name": "RST inline literal",
            "scope": "markup.raw.restructuredtext - meta.raw.block",
            "foreground": "var(grey)"
        },
        {
            "name": "RST block literal",
            "scope": "meta.raw.block markup.raw.restructuredtext",
            "foreground": "var(grey)"
        },
        // Rust specific rules
        {
            "name": "Rust constant",
            "scope": "constant.other.rust, variable.other.constant.rust",
            "font_style": "italic"
        },
        {
            "name": "Rust attribute",
            "scope": "meta.annotation.rust punctuation.section.group - meta.annotation.parameters, meta.annotation.rust variable.function",
            "foreground": "var(pink)"
        },
        {
            "name": "Rust macro",
            "scope": "support.macro.rust",
            "foreground": "var(blue)"
        },
        // Sass specific rules >> https://packagecontrol.io/packages/Sass
        {
            "name": "Sass function call",
            "scope": "source.sass support.function",
            "foreground": "var(orange)"
        },
        // Scala specific rules
        {
            "name": "Scala string interpolation expression",
            "scope": "string punctuation.definition.expression.scala",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Scala lambda function arrow",
            "scope": "storage.type.function.arrow.lambda.scala, storage.type.function.arrow.case.scala",
            "foreground": "var(textcolor)"
        },
        // SCSS specific rules >> https://packagecontrol.io/packages/SCSS
        {
            "name": "SCSS property name",
            "scope": "support.type.property-name.scss",
            "foreground": "var(violet)"
        },
        {
            "name": "SCSS property value",
            "scope": "support.constant.property-value.scss, support.constant.font-name.scss",
            "foreground": "var(orange)"
        },
        {
            "name": "SCSS hex-color",
            "scope": "constant.other.color.rgb-value.scss",
            "foreground": "var(orange)"
        },
        {
            "name": "SCSS function call",
            "scope": "source.scss support.function",
            "foreground": "var(orange)"
        },
        {
            "name": "SCSS function argument",
            "scope": "variable.parameter.url.scss",
            "foreground": "var(textcolor)"
        },
        {
            "name": "SCSS unit suffix",
            "scope": "keyword.other.unit.scss",
            "foreground": "var(green)"
        },
        {
            "name": "SCSS misc symbol",
            "scope": "support.constant.mathematical-symbols.scss, entity.name.tag.wildcard.scss, entity.name.tag.reference.scss",
            "foreground": "var(textcolor)"
        },
        {
            "name": "SCSS string interpolation",
            "scope": "variable.interpolation.scss",
            "foreground": "var(textcolor)"
        },
        // ShellScript specific rules
        {
            "name": "ShellScript variable punctuation",
            "scope": "punctuation.definition.variable.shell",
            "foreground": "var(textcolor)"
        },
        {
            "name": "ShellScript bracket",
            "scope": "support.function.test.begin.shell, support.function.test.end.shell, support.function.double-brace.begin.shell, support.function.double-brace.end.shell",
            "foreground": "var(textcolor)"
        },
        {
            "name": "ShellScript option",
            "scope": "variable.parameter.option.shell",
            "foreground": "var(green)"
        },
        // SQL specific rules
        {
            "name": "SQL embedded in other language",
            "scope": "string source.sql - string source.sql string, string text.sql - string text.sql string",
            "foreground": "var(textcolor)"
        },
        {
            "name": "SQL operator keyword",
            "scope": "keyword.operator.logical.sql, keyword.operator.assignment.alias.sql",
            "foreground": "var(blue)"
        },
        {
            "name": "SQL wildcard asterisk",
            "scope": "variable.language.star.sql",
            "foreground": "var(textcolor)"
        },
        // Stylus specific rules >> https://packagecontrol.io/packages/Stylus
        {
            "name": "Stylus property name",
            "scope": "support.type.property-name.stylus, support.type.property-name.media.stylus",
            "foreground": "var(violet)"
        },
        {
            "name": "Stylus media type",
            "scope": "support.constant.media.stylus",
            "foreground": "var(green)"
        },
        {
            "name": "Stylus unit suffix",
            "scope": "constant.numeric.stylus keyword.other.unit.stylus",
            "foreground": "var(green)"
        },
        {
            "name": "Stylus logical operator keyword",
            "scope": "keyword.operator.logic.media.stylus",
            "foreground": "var(blue)"
        },
        {
            "name": "Stylus vendor prefix",
            "scope": "support.type.vendor-prefix.stylus",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Stylus property value constant",
            "scope": "constant.property-value.stylus",
            "foreground": "var(orange)"
        },
        {
            "name": "Stylus hex-color",
            "scope": "constant.other.color.rgb-value.stylus",
            "foreground": "var(orange)"
        },
        {
            "name": "Stylus built-in color name",
            "scope": "constant.color.w3c-standard-color-name.stylus",
            "foreground": "var(blue)"
        },
        {
            "name": "Stylus animation keyframe selector",
            "scope": "entity.other.animation-keyframe.stylus",
            "foreground": "var(blue)"
        },
        {
            "name": "Stylus function call",
            "scope": "entity.function-name.stylus",
            "foreground": "var(blue)"
        },
        // Swift specific rules >> https://packagecontrol.io/packages/Swift
        {
            "name": "Swift function declaration",
            "scope": "entity.type.function.swift",
            "foreground": "var(violet)"
        },
        {
            "name": "Swift built-in constant",
            "scope": "keyword.constant.boolean.swift, constant.nil.swift",
            "foreground": "var(orange)"
        },
        {
            "name": "Swift keyword",
            "scope": "keyword.operator.type-casting.swift",
            "foreground": "var(blue)"
        },
        {
            "name": "Swift attribute",
            "scope": "storage.modifier.attribute.swift",
            "foreground": "var(pink)"
        },
        {
            "name": "Swift string interpolation punctuation",
            "scope": "meta.literal.string.swift support.punctuation.expression",
            "foreground": "var(textcolor)"
        },
        {
            "name": "Swift imported module",
            "scope": "support.type.module.import.swift",
            "foreground": "var(violet)"
        },
        // Swift specific rules >> https://packagecontrol.io/packages/Decent%20Swift%20Syntax
        {
            "name": "Swift class declaration",
            "scope": "source.swift entity.name.type support.class",
            "foreground": "var(violet)"
        },
        {
            "name": "Swift attribute",
            "scope": "source.swift storage.type.decorator",
            "foreground": "var(pink)"
        },
        // SystemVerilog specific rules >> https://packagecontrol.io/packages/SystemVerilog
        {
            "name": "SystemVerilog preprocessor directive",
            "scope": "constant.other.preprocessor.systemverilog",
            "foreground": "var(purple)"
        },
        // Textile specific rules
        {
            "name": "Textile link title",
            "scope": "string.other.link.title.textile, string.other.link.description.title.textile, markup.underline.link.image.textile",
            "foreground": "var(violet)"
        },
        {
            "name": "Textile link target",
            "scope": "markup.underline.link.textile, constant.other.reference.link.textile",
            "foreground": "var(orange)"
        },
        {
            "name": "Textile attribute",
            "scope": "entity.name.type.textile",
            "foreground": "var(blue)"
        },
        // TOML specific rules >> https://packagecontrol.io/packages/TOML
        {
            "name": "TOML section name",
            "scope": "entity.name.table.toml",
            "foreground": "var(pink)"
        },
        {
            "name": "TOML key",
            "scope": "entity.name.tag.toml",
            "foreground": "var(violet)"
        },
        // Twig specific rules >> https://packagecontrol.io/packages/Twig
        {
            "name": "Twig operator keyword",
            "scope": "keyword.operator.logical.twig - keyword.operator.logical.pipe, keyword.operator.bitwise.twig",
            "foreground": "var(blue)"
        },
        {
            "name": "Twig string interpolation punctuation",
            "scope": "meta.interpolation.twig punctuation.section.interpolation",
            "foreground": "var(textcolor)"
        },
        // TypeScript specific rules >> https://packagecontrol.io/packages/TypeScript
        {
            "name": "TypeScript keyword",
            "scope": "keyword.operator.new.ts, keyword.operator.new.tsx, source.ts keyword.operator.expression, source.tsx keyword.operator.expression",
            "foreground": "var(blue)"
        },
        {
            "name": "TypeScript type",
            "scope": "entity.name.type.ts, entity.name.type.tsx, entity.name.type.module.ts, entity.name.type.module.tsx",
            "foreground": "var(blue)"
        },
        {
            "name": "TypeScript decorator",
            "scope": "(meta.decorator.ts | meta.decorator.tsx) & (variable.other | entity.name), punctuation.decorator.ts, punctuation.decorator.tsx",
            "foreground": "var(pink)"
        },
        {
            "name": "TypeScript lambda function arrow",
            "scope": "storage.type.function.arrow.ts, storage.type.function.arrow.tsx",
            "foreground": "var(textcolor)"
        },
        {
            "name": "TypeScript placeholder asterisk",
            "scope": "constant.language.import-export-all.ts, constant.language.import-export-all.tsx",
            "foreground": "var(textcolor)"
        },
        {
            "name": "TypeScript template string expression",
            "scope": "meta.template.expression.ts - meta.template.expression.ts string, meta.template.expression.tsx - meta.template.expression.tsx string",
            "foreground": "var(textcolor)"
        },
        {
            "name": "JSDoc tag",
            "scope": "(source.ts | source.tsx) & comment.block.documentation storage.type.class.jsdoc",
            "foreground": "color(var(blue) alpha(0.6))"
        },
        {
            "name": "JSDoc keyword",
            "scope": "(source.ts | source.tsx) & comment.block.documentation & (keyword.operator.control.jsdoc | constant.language.access-type.jsdoc | constant.language.symbol-type.jsdoc)",
            "foreground": "color(var(blue) alpha(0.6))"
        },
        {
            "name": "JSDoc parameter",
            "scope": "(source.ts | source.tsx) & comment.block.documentation variable.other.jsdoc",
            "foreground": "color(var(orange) alpha(0.6))"
        },
        {
            "name": "JSDoc punctuation",
            "scope": "(source.ts | source.tsx) & comment.block.documentation variable.other.jsdoc & (punctuation | keyword.operator)",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        {
            "name": "JSDoc type",
            "scope": "(source.ts | source.tsx) & comment.block.documentation entity.name.type.instance.jsdoc",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        {
            "name": "JSDoc link & email",
            "scope": "(source.ts | source.tsx) & comment.block.documentation & (variable.other.link.underline.jsdoc | constant.other.email.link.underline.jsdoc)",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        {
            "name": "JSDoc description",
            "scope": "(source.ts | source.tsx) & comment.block.documentation & (variable.other.description.jsdoc | constant.other.description.jsdoc)",
            "foreground": "color(var(textcolor) alpha(0.6))"
        },
        {
            "name": "JSDoc invalid",
            "scope": "(source.ts | source.tsx) & comment.block.documentation & (invalid.illegal.syntax.jsdoc | invalid.illegal.type.jsdoc)",
            "foreground": "color(var(red) alpha(0.6))"
        },
        // VBScript specific rules >> https://packagecontrol.io/packages/VBScript
        {
            "name": "VBScript operator symbol",
            "scope": "source.vbs keyword.operator.js",
            "foreground": "var(textcolor)"
        },
        {
            "name": "VBScript operator keyword",
            "scope": "source.vbs keyword.operator.asp",
            "foreground": "var(blue)"
        },
        // Vue specific rules >> https://packagecontrol.io/packages/Vue%20Syntax%20Highlight
        {
            "name": "Vue tag attribute name punctuation",
            "scope": "text.html.vue meta.tag punctuation.definition.attribute",
            "foreground": "var(green)"
        },
        {
            "name": "Vue tag attribute value punctuation",
            "scope": "text.html.vue meta.tag punctuation.definition.string",
            "foreground": "var(orange)"
        },
        // Plugin specific rules
        {
            "name": "Find in Files results panel line number context",
            "scope": "constant.numeric.line-number.find-in-files",
            "foreground": "color(var(green) alpha(0.6))"
        },
        // Anaconda specific rules >> https://packagecontrol.io/packages/Anaconda
        {
            "name": "Anaconda linter illegal",
            "scope": "anaconda.outline.illegal",
            "foreground": "var(red)"
        },
        {
            "name": "Anaconda linter warning",
            "scope": "anaconda.outline.warning",
            "foreground": "var(orange)"
        },
        {
            "name": "Anaconda linter violation",
            "scope": "anaconda.outline.violation",
            "foreground": "var(grey)"
        },
        {
            "name": "Anaconda linter underline",
            "scope": "anaconda.underline.illegal, anaconda.underline.warning, anaconda.underline.violation",
            "foreground": "var(red)"
        },
        // GitGutter specific rules >> https://packagecontrol.io/packages/GitGutter
        {
            "name": "GitGutter deleted",
            "scope": "markup.deleted.git_gutter",
            "foreground": "#F92672"
        },
        {
            "name": "GitGutter inserted",
            "scope": "markup.inserted.git_gutter",
            "foreground": "#A6E22E"
        },
        {
            "name": "GitGutter changed",
            "scope": "markup.changed.git_gutter",
            "foreground": "#967EFB"
        },
        {
            "name": "GitGutter ignored",
            "scope": "markup.ignored.git_gutter",
            "foreground": "#565656"
        },
        {
            "name": "GitGutter untracked",
            "scope": "markup.untracked.git_gutter",
            "foreground": "#565656"
        },
        // LSP specific rules >> https://packagecontrol.io/packages/LSP
        {
            "name": "LSP log panel arrow",
            "scope": "output.lsp.log storage.modifier",
            "foreground": "var(textcolor)"
        },
        {
            "name": "LSP log panel arrow unhandled notification",
            "scope": "output.lsp.log invalid.deprecated",
            "foreground": "var(orange)"
        },
        {
            "name": "LSP log panel server",
            "scope": "output.lsp.log variable.function",
            "foreground": "var(purple)"
        },
        {
            "name": "LSP diagnostics panel filename [ST3]",
            "scope": "output.lsp.diagnostics meta.diagnostic.preamble string",
            "foreground": "var(purple)"
        },
        {
            "name": "LSP references panel filename [ST3]",
            "scope": "output.lsp.references meta.reference.preamble entity.name.file",
            "foreground": "var(purple)"
        },
        // OverrideAudit specific rules >> https://packagecontrol.io/packages/OverrideAudit
        {
            "name": "OverrideAudit warning/expired",
            "scope": "text.override-audit.overridereport keyword.control.expired",
            "foreground": "var(orange)"
        },
        // PackageDev specific rules >> https://packagecontrol.io/packages/PackageDev
        {
            "name": "PackageDev JSON built-in key",
            "scope": "source.json.sublime meta.mapping.key & (keyword | support | constant.other | entity.name | storage.modifier)",
            "foreground": "var(violet)",
            "font_style": "italic"
        },
        {
            "name": "PackageDev JSON key",
            "scope": "source.json.sublime & (meta.variable-name punctuation.definition.string | meta.mapping.key entity.name.other.key.sublime-settings | meta.mapping.key keyword.other.namespace.sublime-settings)",
            "foreground": "var(violet)",
            "font_style": ""
        },
        {
            "name": "PackageDev JSON built-in value",
            "scope": "source.json.sublime meta.mapping.value & (support.constant | support.function.modifier.key | storage.type.context.key-value | keyword.operator.context.key-value)",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "PackageDev JSON value",
            "scope": "source.json.sublime meta.mapping.value & (support.constant.command-name | entity.name.variant.sublime-build | entity.name.id.sublime-menu | entity.name.class-selector.sublime-theme | support.constant.mnemonic.sublime-menu | variable.other.setting.sublime-keymap)",
            "foreground": "var(orange)",
            "font_style": ""
        },
        {
            "name": "PackageDev JSON punctuation",
            "scope": "source.json.sublime & (source.scope-selector punctuation.section.group | meta.function-call punctuation.definition.group)",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PackageDev XML/PList keyword",
            "scope": "text.xml.plist.textmate.preferences & (meta.inside-dict-key.plist keyword | meta.inside-value.string.plist support)",
            "foreground": "var(violet)"
        },
        {
            "name": "PackageDev sublime-syntax include",
            "scope": "source.yaml.sublime.syntax keyword.operator.include.sublime-syntax",
            "foreground": "var(blue)"
        },
        {
            "name": "PackageDev sublime-syntax punctuation",
            "scope": "source.yaml.sublime.syntax source.regexp punctuation.definition.variable",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PackageDev sublime-syntax regex character class",
            "scope": "source.yaml.sublime.syntax source.regexp support.class.character-class.regexp, source.yaml.sublime.syntax source.regexp keyword.other.character-class.property.regexp",
            "foreground": "var(violet)"
        },
        {
            "name": "PackageDev sublime-syntax regex unicode category",
            "scope": "source.yaml.sublime.syntax source.regexp keyword.other.character-class.property.regexp support.type.property.regexp",
            "foreground": "var(violet)"
        },
        {
            "name": "PackageDev sublime-syntax regex unrecognized unicode category",
            "scope": "source.yaml.sublime.syntax source.regexp keyword.other.character-class.property.regexp support.function.property.untested.regexp",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PackageDev sublime-syntax regex unicode category punctuation",
            "scope": "source.yaml.sublime.syntax source.regexp keyword.other.character-class.property.regexp punctuation.definition.property",
            "foreground": "var(textcolor)"
        },
        {
            "name": "PackageDev string interpolation placeholder variable",
            "scope": "(source.json.sublime | text.xml.sublime) & (constant.other.placeholder | keyword.other.placeholder.dollar | keyword.other.block)",
            "foreground": "var(textcolor)",
            "font_style": ""
        },
        {
            "name": "PackageDev scope selector punctuation",
            "scope": "(source.json.sublime | text.xml.sublime | text.xml.plist.textmate.preferences) & punctuation.separator.scope-segments.scope-selector",
            "foreground": "var(orange)"
        },
        // SublimeGDB specific rules >> https://packagecontrol.io/packages/SublimeGDB
        {
            "name": "SublimeGDB breakpoint",
            "scope": "keyword.gdb - keyword.gdb.returncode",
            "foreground": "var(red2)"
        },
        // SublimeLinter specific rules >> https://packagecontrol.io/packages/SublimeLinter
        {
            "name": "SublimeLinter diagnostics message",
            "scope": "markup.quote.linter-message.sublime_linter",
            "foreground": "var(textcolor)"
        }
    ]
}
